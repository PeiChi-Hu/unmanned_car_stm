
keyboard0805.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051d0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005394  08005394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053ac  080053ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053ac  080053ac  000153ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053b4  080053b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053b4  080053b4  000153b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  2000000c  080053c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  080053c8  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb97  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dae  00000000  00000000  0002ebd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00030988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  00031698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021983  00000000  00000000  00032300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f26e  00000000  00000000  00053c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfe26  00000000  00000000  00062ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132d17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003734  00000000  00000000  00132d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800537c 	.word	0x0800537c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800537c 	.word	0x0800537c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_TIM_IC_CaptureCallback>:
	unsigned char data[4];
}dc,servo;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a20      	ldr	r2, [pc, #128]	; (8000594 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d10a      	bne.n	800052e <HAL_TIM_IC_CaptureCallback+0x26>
		counter2 = __HAL_TIM_GET_COUNTER(htim);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051e:	4a1e      	ldr	r2, [pc, #120]	; (8000598 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000520:	6013      	str	r3, [r2, #0]
		count2 = (int16_t)counter2;
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	b21a      	sxth	r2, r3
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <HAL_TIM_IC_CaptureCallback+0x94>)
 800052a:	801a      	strh	r2, [r3, #0]
	else if(htim == &htim5){
			counter5 = __HAL_TIM_GET_COUNTER(htim);
			count5 = (int16_t)counter5;
		}

}
 800052c:	e02b      	b.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
	else if(htim == &htim3){
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a1b      	ldr	r2, [pc, #108]	; (80005a0 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d10a      	bne.n	800054c <HAL_TIM_IC_CaptureCallback+0x44>
			counter3 = __HAL_TIM_GET_COUNTER(htim);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053c:	4a19      	ldr	r2, [pc, #100]	; (80005a4 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800053e:	6013      	str	r3, [r2, #0]
			count3 = (int16_t)counter3;
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	b21a      	sxth	r2, r3
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000548:	801a      	strh	r2, [r3, #0]
}
 800054a:	e01c      	b.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
	else if(htim == &htim4){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a17      	ldr	r2, [pc, #92]	; (80005ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d10a      	bne.n	800056a <HAL_TIM_IC_CaptureCallback+0x62>
			counter4 = __HAL_TIM_GET_COUNTER(htim);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055a:	4a15      	ldr	r2, [pc, #84]	; (80005b0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800055c:	6013      	str	r3, [r2, #0]
			count4 = (int16_t)counter4;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	b21a      	sxth	r2, r3
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000566:	801a      	strh	r2, [r3, #0]
}
 8000568:	e00d      	b.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
	else if(htim == &htim5){
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d109      	bne.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
			counter5 = __HAL_TIM_GET_COUNTER(htim);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000578:	4a10      	ldr	r2, [pc, #64]	; (80005bc <HAL_TIM_IC_CaptureCallback+0xb4>)
 800057a:	6013      	str	r3, [r2, #0]
			count5 = (int16_t)counter5;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_TIM_IC_CaptureCallback+0xb4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	b21a      	sxth	r2, r3
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000584:	801a      	strh	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000070 	.word	0x20000070
 8000598:	20000380 	.word	0x20000380
 800059c:	20000390 	.word	0x20000390
 80005a0:	200000b8 	.word	0x200000b8
 80005a4:	20000384 	.word	0x20000384
 80005a8:	20000392 	.word	0x20000392
 80005ac:	20000100 	.word	0x20000100
 80005b0:	20000388 	.word	0x20000388
 80005b4:	20000394 	.word	0x20000394
 80005b8:	20000148 	.word	0x20000148
 80005bc:	2000038c 	.word	0x2000038c
 80005c0:	20000396 	.word	0x20000396

080005c4 <DCmotor>:
void DCmotor(float speed1, float speed2, float speed3, float speed4)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08e      	sub	sp, #56	; 0x38
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	ed87 0a03 	vstr	s0, [r7, #12]
 80005ce:	edc7 0a02 	vstr	s1, [r7, #8]
 80005d2:	ed87 1a01 	vstr	s2, [r7, #4]
 80005d6:	edc7 1a00 	vstr	s3, [r7]
	int a1=0, a2=0, a3=0, a4=0;
 80005da:	2300      	movs	r3, #0
 80005dc:	637b      	str	r3, [r7, #52]	; 0x34
 80005de:	2300      	movs	r3, #0
 80005e0:	633b      	str	r3, [r7, #48]	; 0x30
 80005e2:	2300      	movs	r3, #0
 80005e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005e6:	2300      	movs	r3, #0
 80005e8:	62bb      	str	r3, [r7, #40]	; 0x28
	int b1=0, b2=0, b3=0, b4=0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
 80005ee:	2300      	movs	r3, #0
 80005f0:	623b      	str	r3, [r7, #32]
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
	htim1.Instance-> CCR1 = abs(speed1);
 80005fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80005fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000602:	ee17 3a90 	vmov	r3, s15
 8000606:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800060a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800060e:	4b72      	ldr	r3, [pc, #456]	; (80007d8 <DCmotor+0x214>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance-> CCR2 = abs(speed2);
 8000614:	edd7 7a02 	vldr	s15, [r7, #8]
 8000618:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800061c:	ee17 3a90 	vmov	r3, s15
 8000620:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000624:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000628:	4b6b      	ldr	r3, [pc, #428]	; (80007d8 <DCmotor+0x214>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance-> CCR3 = abs(speed3);
 800062e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000636:	ee17 3a90 	vmov	r3, s15
 800063a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800063e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000642:	4b65      	ldr	r3, [pc, #404]	; (80007d8 <DCmotor+0x214>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance-> CCR4 = abs(speed4);
 8000648:	edd7 7a00 	vldr	s15, [r7]
 800064c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000650:	ee17 3a90 	vmov	r3, s15
 8000654:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000658:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800065c:	4b5e      	ldr	r3, [pc, #376]	; (80007d8 <DCmotor+0x214>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	641a      	str	r2, [r3, #64]	; 0x40
	if(speed1>0){
 8000662:	edd7 7a03 	vldr	s15, [r7, #12]
 8000666:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800066a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800066e:	dd04      	ble.n	800067a <DCmotor+0xb6>
		a1=1, b1=0;
 8000670:	2301      	movs	r3, #1
 8000672:	637b      	str	r3, [r7, #52]	; 0x34
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
 8000678:	e00f      	b.n	800069a <DCmotor+0xd6>
	}else if (speed1<0){
 800067a:	edd7 7a03 	vldr	s15, [r7, #12]
 800067e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000686:	d504      	bpl.n	8000692 <DCmotor+0xce>
		a1=0, b1=1;
 8000688:	2300      	movs	r3, #0
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
 800068c:	2301      	movs	r3, #1
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
 8000690:	e003      	b.n	800069a <DCmotor+0xd6>
	}else{
		a1=0, b1=0;
 8000692:	2300      	movs	r3, #0
 8000694:	637b      	str	r3, [r7, #52]	; 0x34
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if(speed2>0){
 800069a:	edd7 7a02 	vldr	s15, [r7, #8]
 800069e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a6:	dd04      	ble.n	80006b2 <DCmotor+0xee>
		a2=1, b2=0;
 80006a8:	2301      	movs	r3, #1
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
 80006b0:	e00f      	b.n	80006d2 <DCmotor+0x10e>
	}else if (speed2<0){
 80006b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80006b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006be:	d504      	bpl.n	80006ca <DCmotor+0x106>
		a2=0, b2=1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
 80006c8:	e003      	b.n	80006d2 <DCmotor+0x10e>
	}else{
		a2=0, b2=0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	633b      	str	r3, [r7, #48]	; 0x30
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
	}
	if(speed3>0){
 80006d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80006d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006de:	dd04      	ble.n	80006ea <DCmotor+0x126>
		a3=1, b3=0;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
 80006e8:	e00f      	b.n	800070a <DCmotor+0x146>
	}else if (speed3<0){
 80006ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80006ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f6:	d504      	bpl.n	8000702 <DCmotor+0x13e>
		a3=0, b3=1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006fc:	2301      	movs	r3, #1
 80006fe:	61fb      	str	r3, [r7, #28]
 8000700:	e003      	b.n	800070a <DCmotor+0x146>
	}else{
		a3=0, b3=0;
 8000702:	2300      	movs	r3, #0
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
	}
	if(speed4>0){
 800070a:	edd7 7a00 	vldr	s15, [r7]
 800070e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000716:	dd04      	ble.n	8000722 <DCmotor+0x15e>
		a4=1, b4=0;
 8000718:	2301      	movs	r3, #1
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	e00f      	b.n	8000742 <DCmotor+0x17e>
	}else if (speed4<0){
 8000722:	edd7 7a00 	vldr	s15, [r7]
 8000726:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800072a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072e:	d504      	bpl.n	800073a <DCmotor+0x176>
		a4=0, b4=1;
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
 8000734:	2301      	movs	r3, #1
 8000736:	61bb      	str	r3, [r7, #24]
 8000738:	e003      	b.n	8000742 <DCmotor+0x17e>
	}else{
		a4=0, b4=0;
 800073a:	2300      	movs	r3, #0
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
	}
	for(int i=0;i<1;i++){
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	e03e      	b.n	80007c6 <DCmotor+0x202>
		HAL_GPIO_WritePin(DC1_1_GPIO_Port, DC1_1_Pin, a1);
 8000748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800074a:	b2db      	uxtb	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	2102      	movs	r1, #2
 8000750:	4822      	ldr	r0, [pc, #136]	; (80007dc <DCmotor+0x218>)
 8000752:	f001 fdf7 	bl	8002344 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC1_2_GPIO_Port, DC1_2_Pin, b1);
 8000756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000758:	b2db      	uxtb	r3, r3
 800075a:	461a      	mov	r2, r3
 800075c:	2104      	movs	r1, #4
 800075e:	481f      	ldr	r0, [pc, #124]	; (80007dc <DCmotor+0x218>)
 8000760:	f001 fdf0 	bl	8002344 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC2_1_GPIO_Port, DC2_1_Pin, a2);
 8000764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076e:	481c      	ldr	r0, [pc, #112]	; (80007e0 <DCmotor+0x21c>)
 8000770:	f001 fde8 	bl	8002344 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC2_2_GPIO_Port, DC2_2_Pin, b2);
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	461a      	mov	r2, r3
 800077a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077e:	4818      	ldr	r0, [pc, #96]	; (80007e0 <DCmotor+0x21c>)
 8000780:	f001 fde0 	bl	8002344 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC3_1_GPIO_Port, DC3_1_Pin, a3);
 8000784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000786:	b2db      	uxtb	r3, r3
 8000788:	461a      	mov	r2, r3
 800078a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078e:	4813      	ldr	r0, [pc, #76]	; (80007dc <DCmotor+0x218>)
 8000790:	f001 fdd8 	bl	8002344 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC3_2_GPIO_Port, DC3_2_Pin, b3);
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	461a      	mov	r2, r3
 800079a:	2110      	movs	r1, #16
 800079c:	4810      	ldr	r0, [pc, #64]	; (80007e0 <DCmotor+0x21c>)
 800079e:	f001 fdd1 	bl	8002344 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC4_1_GPIO_Port, DC4_1_Pin, a4);
 80007a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	461a      	mov	r2, r3
 80007a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <DCmotor+0x220>)
 80007ae:	f001 fdc9 	bl	8002344 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC4_2_GPIO_Port, DC4_2_Pin, b4);
 80007b2:	69bb      	ldr	r3, [r7, #24]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	2140      	movs	r1, #64	; 0x40
 80007ba:	4809      	ldr	r0, [pc, #36]	; (80007e0 <DCmotor+0x21c>)
 80007bc:	f001 fdc2 	bl	8002344 <HAL_GPIO_WritePin>
	for(int i=0;i<1;i++){
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	3301      	adds	r3, #1
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	ddbd      	ble.n	8000748 <DCmotor+0x184>
	}
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3738      	adds	r7, #56	; 0x38
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000028 	.word	0x20000028
 80007dc:	40020400 	.word	0x40020400
 80007e0:	40020800 	.word	0x40020800
 80007e4:	40020000 	.word	0x40020000

080007e8 <DCstop>:
void DCstop(){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC1_1_GPIO_Port, DC1_1_Pin, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2102      	movs	r1, #2
 80007f0:	4815      	ldr	r0, [pc, #84]	; (8000848 <DCstop+0x60>)
 80007f2:	f001 fda7 	bl	8002344 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC1_2_GPIO_Port, DC1_2_Pin, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2104      	movs	r1, #4
 80007fa:	4813      	ldr	r0, [pc, #76]	; (8000848 <DCstop+0x60>)
 80007fc:	f001 fda2 	bl	8002344 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC2_1_GPIO_Port, DC2_1_Pin, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000806:	4811      	ldr	r0, [pc, #68]	; (800084c <DCstop+0x64>)
 8000808:	f001 fd9c 	bl	8002344 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC2_2_GPIO_Port, DC2_2_Pin, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000812:	480e      	ldr	r0, [pc, #56]	; (800084c <DCstop+0x64>)
 8000814:	f001 fd96 	bl	8002344 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC3_1_GPIO_Port, DC3_1_Pin, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081e:	480a      	ldr	r0, [pc, #40]	; (8000848 <DCstop+0x60>)
 8000820:	f001 fd90 	bl	8002344 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC3_2_GPIO_Port, DC3_2_Pin, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2110      	movs	r1, #16
 8000828:	4808      	ldr	r0, [pc, #32]	; (800084c <DCstop+0x64>)
 800082a:	f001 fd8b 	bl	8002344 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC4_1_GPIO_Port, DC4_1_Pin, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000834:	4806      	ldr	r0, [pc, #24]	; (8000850 <DCstop+0x68>)
 8000836:	f001 fd85 	bl	8002344 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC4_2_GPIO_Port, DC4_2_Pin, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2140      	movs	r1, #64	; 0x40
 800083e:	4803      	ldr	r0, [pc, #12]	; (800084c <DCstop+0x64>)
 8000840:	f001 fd80 	bl	8002344 <HAL_GPIO_WritePin>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40020400 	.word	0x40020400
 800084c:	40020800 	.word	0x40020800
 8000850:	40020000 	.word	0x40020000

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000858:	f001 f9a6 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085c:	f000 f8c2 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000860:	f000 fd10 	bl	8001284 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000864:	f000 fcba 	bl	80011dc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000868:	f000 f928 	bl	8000abc <MX_TIM1_Init>
  MX_TIM2_Init();
 800086c:	f000 f9f4 	bl	8000c58 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000870:	f000 fa46 	bl	8000d00 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000874:	f000 fa98 	bl	8000da8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000878:	f000 faea 	bl	8000e50 <MX_TIM5_Init>
  MX_TIM10_Init();
 800087c:	f000 fb3c 	bl	8000ef8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000880:	f000 fb88 	bl	8000f94 <MX_TIM11_Init>
  MX_TIM12_Init();
 8000884:	f000 fbaa 	bl	8000fdc <MX_TIM12_Init>
  MX_TIM14_Init();
 8000888:	f000 fc5a 	bl	8001140 <MX_TIM14_Init>
  MX_TIM13_Init();
 800088c:	f000 fc0a 	bl	80010a4 <MX_TIM13_Init>
  MX_USART3_UART_Init();
 8000890:	f000 fcce 	bl	8001230 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000894:	213c      	movs	r1, #60	; 0x3c
 8000896:	4845      	ldr	r0, [pc, #276]	; (80009ac <main+0x158>)
 8000898:	f002 fdc6 	bl	8003428 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800089c:	213c      	movs	r1, #60	; 0x3c
 800089e:	4844      	ldr	r0, [pc, #272]	; (80009b0 <main+0x15c>)
 80008a0:	f002 fdc2 	bl	8003428 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80008a4:	213c      	movs	r1, #60	; 0x3c
 80008a6:	4843      	ldr	r0, [pc, #268]	; (80009b4 <main+0x160>)
 80008a8:	f002 fdbe 	bl	8003428 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80008ac:	213c      	movs	r1, #60	; 0x3c
 80008ae:	4842      	ldr	r0, [pc, #264]	; (80009b8 <main+0x164>)
 80008b0:	f002 fdba 	bl	8003428 <HAL_TIM_Encoder_Start_IT>

  // start DC motor PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008b4:	2100      	movs	r1, #0
 80008b6:	4841      	ldr	r0, [pc, #260]	; (80009bc <main+0x168>)
 80008b8:	f002 fbee 	bl	8003098 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80008bc:	2104      	movs	r1, #4
 80008be:	483f      	ldr	r0, [pc, #252]	; (80009bc <main+0x168>)
 80008c0:	f002 fbea 	bl	8003098 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80008c4:	2108      	movs	r1, #8
 80008c6:	483d      	ldr	r0, [pc, #244]	; (80009bc <main+0x168>)
 80008c8:	f002 fbe6 	bl	8003098 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80008cc:	210c      	movs	r1, #12
 80008ce:	483b      	ldr	r0, [pc, #236]	; (80009bc <main+0x168>)
 80008d0:	f002 fbe2 	bl	8003098 <HAL_TIM_PWM_Start>

  htim1.Instance-> CCR1 = 80;
 80008d4:	4b39      	ldr	r3, [pc, #228]	; (80009bc <main+0x168>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2250      	movs	r2, #80	; 0x50
 80008da:	635a      	str	r2, [r3, #52]	; 0x34
  htim1.Instance-> CCR2 = 80;
 80008dc:	4b37      	ldr	r3, [pc, #220]	; (80009bc <main+0x168>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2250      	movs	r2, #80	; 0x50
 80008e2:	639a      	str	r2, [r3, #56]	; 0x38
  htim1.Instance-> CCR3 = 80;
 80008e4:	4b35      	ldr	r3, [pc, #212]	; (80009bc <main+0x168>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2250      	movs	r2, #80	; 0x50
 80008ea:	63da      	str	r2, [r3, #60]	; 0x3c
  htim1.Instance-> CCR4 = 80;
 80008ec:	4b33      	ldr	r3, [pc, #204]	; (80009bc <main+0x168>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2250      	movs	r2, #80	; 0x50
 80008f2:	641a      	str	r2, [r3, #64]	; 0x40

  // Servo PWM
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80008f4:	2100      	movs	r1, #0
 80008f6:	4832      	ldr	r0, [pc, #200]	; (80009c0 <main+0x16c>)
 80008f8:	f002 fbce 	bl	8003098 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80008fc:	2100      	movs	r1, #0
 80008fe:	4831      	ldr	r0, [pc, #196]	; (80009c4 <main+0x170>)
 8000900:	f002 fbca 	bl	8003098 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8000904:	2100      	movs	r1, #0
 8000906:	4830      	ldr	r0, [pc, #192]	; (80009c8 <main+0x174>)
 8000908:	f002 fbc6 	bl	8003098 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800090c:	2100      	movs	r1, #0
 800090e:	482f      	ldr	r0, [pc, #188]	; (80009cc <main+0x178>)
 8000910:	f002 fbc2 	bl	8003098 <HAL_TIM_PWM_Start>

  htim10.Instance->CCR1 = 75;
 8000914:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <main+0x16c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	224b      	movs	r2, #75	; 0x4b
 800091a:	635a      	str	r2, [r3, #52]	; 0x34
  htim12.Instance->CCR1 = 80;
 800091c:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <main+0x170>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2250      	movs	r2, #80	; 0x50
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
  htim13.Instance->CCR1 = 100;
 8000924:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <main+0x174>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2264      	movs	r2, #100	; 0x64
 800092a:	635a      	str	r2, [r3, #52]	; 0x34
  htim14.Instance->CCR1 = 120;
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <main+0x178>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2278      	movs	r2, #120	; 0x78
 8000932:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(1000);
 8000934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000938:	f001 f9a8 	bl	8001c8c <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Transmit(&huart3, (uint8_t*)"Hello World!\n\r", sizeof("Hello World!\n\r")-1, 1000);
	  //HAL_Delay(200);
	  HAL_UART_Receive(&huart3, Rx_data, 1, 2);
 800093c:	2302      	movs	r3, #2
 800093e:	2201      	movs	r2, #1
 8000940:	4923      	ldr	r1, [pc, #140]	; (80009d0 <main+0x17c>)
 8000942:	4824      	ldr	r0, [pc, #144]	; (80009d4 <main+0x180>)
 8000944:	f003 fd17 	bl	8004376 <HAL_UART_Receive>

	  if(Rx_data[0] == 'w'){
 8000948:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <main+0x17c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b77      	cmp	r3, #119	; 0x77
 800094e:	d10d      	bne.n	800096c <main+0x118>
		  action = 'f';
 8000950:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <main+0x184>)
 8000952:	2266      	movs	r2, #102	; 0x66
 8000954:	701a      	strb	r2, [r3, #0]
		  DCmotor(70, 70, 70, 70);
 8000956:	eddf 1a21 	vldr	s3, [pc, #132]	; 80009dc <main+0x188>
 800095a:	ed9f 1a20 	vldr	s2, [pc, #128]	; 80009dc <main+0x188>
 800095e:	eddf 0a1f 	vldr	s1, [pc, #124]	; 80009dc <main+0x188>
 8000962:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80009dc <main+0x188>
 8000966:	f7ff fe2d 	bl	80005c4 <DCmotor>
 800096a:	e7e7      	b.n	800093c <main+0xe8>
	  }else if(Rx_data[0] == '0'){
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <main+0x17c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b30      	cmp	r3, #48	; 0x30
 8000972:	d109      	bne.n	8000988 <main+0x134>
		  action = '0';
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <main+0x184>)
 8000976:	2230      	movs	r2, #48	; 0x30
 8000978:	701a      	strb	r2, [r3, #0]
		  DCstop(0,0,0,0);
 800097a:	2300      	movs	r3, #0
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff ff31 	bl	80007e8 <DCstop>
 8000986:	e7d9      	b.n	800093c <main+0xe8>
	  }else if(Rx_data[0] == 's'){
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <main+0x17c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b73      	cmp	r3, #115	; 0x73
 800098e:	d1d5      	bne.n	800093c <main+0xe8>
		  action = 'b';
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <main+0x184>)
 8000992:	2262      	movs	r2, #98	; 0x62
 8000994:	701a      	strb	r2, [r3, #0]
		  DCmotor(-70,-70,-70,-70);
 8000996:	eddf 1a12 	vldr	s3, [pc, #72]	; 80009e0 <main+0x18c>
 800099a:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80009e0 <main+0x18c>
 800099e:	eddf 0a10 	vldr	s1, [pc, #64]	; 80009e0 <main+0x18c>
 80009a2:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80009e0 <main+0x18c>
 80009a6:	f7ff fe0d 	bl	80005c4 <DCmotor>
	  HAL_UART_Receive(&huart3, Rx_data, 1, 2);
 80009aa:	e7c7      	b.n	800093c <main+0xe8>
 80009ac:	20000070 	.word	0x20000070
 80009b0:	200000b8 	.word	0x200000b8
 80009b4:	20000100 	.word	0x20000100
 80009b8:	20000148 	.word	0x20000148
 80009bc:	20000028 	.word	0x20000028
 80009c0:	20000190 	.word	0x20000190
 80009c4:	20000220 	.word	0x20000220
 80009c8:	20000268 	.word	0x20000268
 80009cc:	200002b0 	.word	0x200002b0
 80009d0:	20000398 	.word	0x20000398
 80009d4:	2000033c 	.word	0x2000033c
 80009d8:	20000399 	.word	0x20000399
 80009dc:	428c0000 	.word	0x428c0000
 80009e0:	c28c0000 	.word	0xc28c0000

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b094      	sub	sp, #80	; 0x50
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	2234      	movs	r2, #52	; 0x34
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f004 fcba 	bl	800536c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <SystemClock_Config+0xd0>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a28      	ldr	r2, [pc, #160]	; (8000ab4 <SystemClock_Config+0xd0>)
 8000a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <SystemClock_Config+0xd0>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <SystemClock_Config+0xd4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a30:	4a21      	ldr	r2, [pc, #132]	; (8000ab8 <SystemClock_Config+0xd4>)
 8000a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <SystemClock_Config+0xd4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a50:	2302      	movs	r3, #2
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a54:	2300      	movs	r3, #0
 8000a56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000a5c:	2340      	movs	r3, #64	; 0x40
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 ffcb 	bl	8002a0c <HAL_RCC_OscConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a7c:	f000 fc9e 	bl	80013bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a80:	230f      	movs	r3, #15
 8000a82:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a84:	2302      	movs	r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fc6b 	bl	8002378 <HAL_RCC_ClockConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000aa8:	f000 fc88 	bl	80013bc <Error_Handler>
  }
}
 8000aac:	bf00      	nop
 8000aae:	3750      	adds	r7, #80	; 0x50
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40007000 	.word	0x40007000

08000abc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b096      	sub	sp, #88	; 0x58
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
 8000aea:	615a      	str	r2, [r3, #20]
 8000aec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2220      	movs	r2, #32
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f004 fc39 	bl	800536c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000afa:	4b55      	ldr	r3, [pc, #340]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000afc:	4a55      	ldr	r2, [pc, #340]	; (8000c54 <MX_TIM1_Init+0x198>)
 8000afe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b00:	4b53      	ldr	r3, [pc, #332]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b06:	4b52      	ldr	r3, [pc, #328]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b0c:	4b50      	ldr	r3, [pc, #320]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b14:	4b4e      	ldr	r3, [pc, #312]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b1a:	4b4d      	ldr	r3, [pc, #308]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b20:	4b4b      	ldr	r3, [pc, #300]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b26:	484a      	ldr	r0, [pc, #296]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000b28:	f002 fa0e 	bl	8002f48 <HAL_TIM_Base_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b32:	f000 fc43 	bl	80013bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b40:	4619      	mov	r1, r3
 8000b42:	4843      	ldr	r0, [pc, #268]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000b44:	f002 fee8 	bl	8003918 <HAL_TIM_ConfigClockSource>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b4e:	f000 fc35 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b52:	483f      	ldr	r0, [pc, #252]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000b54:	f002 fa47 	bl	8002fe6 <HAL_TIM_PWM_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b5e:	f000 fc2d 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000b62:	2108      	movs	r1, #8
 8000b64:	483a      	ldr	r0, [pc, #232]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000b66:	f002 fb5f 	bl	8003228 <HAL_TIM_OnePulse_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000b70:	f000 fc24 	bl	80013bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b80:	4619      	mov	r1, r3
 8000b82:	4833      	ldr	r0, [pc, #204]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000b84:	f003 fac8 	bl	8004118 <HAL_TIMEx_MasterConfigSynchronization>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000b8e:	f000 fc15 	bl	80013bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b92:	2360      	movs	r3, #96	; 0x60
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4826      	ldr	r0, [pc, #152]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000bb8:	f002 fdec 	bl	8003794 <HAL_TIM_PWM_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000bc2:	f000 fbfb 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	2204      	movs	r2, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4820      	ldr	r0, [pc, #128]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000bd0:	f002 fde0 	bl	8003794 <HAL_TIM_PWM_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8000bda:	f000 fbef 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	2208      	movs	r2, #8
 8000be4:	4619      	mov	r1, r3
 8000be6:	481a      	ldr	r0, [pc, #104]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000be8:	f002 fdd4 	bl	8003794 <HAL_TIM_PWM_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000bf2:	f000 fbe3 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4814      	ldr	r0, [pc, #80]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000c00:	f002 fdc8 	bl	8003794 <HAL_TIM_PWM_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000c0a:	f000 fbd7 	bl	80013bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4807      	ldr	r0, [pc, #28]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000c32:	f003 faed 	bl	8004210 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8000c3c:	f000 fbbe 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c40:	4803      	ldr	r0, [pc, #12]	; (8000c50 <MX_TIM1_Init+0x194>)
 8000c42:	f000 fd9d 	bl	8001780 <HAL_TIM_MspPostInit>

}
 8000c46:	bf00      	nop
 8000c48:	3758      	adds	r7, #88	; 0x58
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000028 	.word	0x20000028
 8000c54:	40010000 	.word	0x40010000

08000c58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	2224      	movs	r2, #36	; 0x24
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f004 fb80 	bl	800536c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_TIM2_Init+0xa4>)
 8000c76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_TIM2_Init+0xa4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <MX_TIM2_Init+0xa4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_TIM2_Init+0xa4>)
 8000c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_TIM2_Init+0xa4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_TIM2_Init+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_TIM2_Init+0xa4>)
 8000cc8:	f002 fb08 	bl	80032dc <HAL_TIM_Encoder_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000cd2:	f000 fb73 	bl	80013bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <MX_TIM2_Init+0xa4>)
 8000ce4:	f003 fa18 	bl	8004118 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000cee:	f000 fb65 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	3730      	adds	r7, #48	; 0x30
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000070 	.word	0x20000070

08000d00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	2224      	movs	r2, #36	; 0x24
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f004 fb2c 	bl	800536c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d1c:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <MX_TIM3_Init+0xa0>)
 8000d1e:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <MX_TIM3_Init+0xa4>)
 8000d20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_TIM3_Init+0xa0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_TIM3_Init+0xa0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_TIM3_Init+0xa0>)
 8000d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_TIM3_Init+0xa0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_TIM3_Init+0xa0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d42:	2303      	movs	r3, #3
 8000d44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <MX_TIM3_Init+0xa0>)
 8000d6e:	f002 fab5 	bl	80032dc <HAL_TIM_Encoder_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000d78:	f000 fb20 	bl	80013bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_TIM3_Init+0xa0>)
 8000d8a:	f003 f9c5 	bl	8004118 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000d94:	f000 fb12 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3730      	adds	r7, #48	; 0x30
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200000b8 	.word	0x200000b8
 8000da4:	40000400 	.word	0x40000400

08000da8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	2224      	movs	r2, #36	; 0x24
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 fad8 	bl	800536c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dc4:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <MX_TIM4_Init+0xa0>)
 8000dc6:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <MX_TIM4_Init+0xa4>)
 8000dc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dca:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <MX_TIM4_Init+0xa0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <MX_TIM4_Init+0xa0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <MX_TIM4_Init+0xa0>)
 8000dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ddc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_TIM4_Init+0xa0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_TIM4_Init+0xa0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dea:	2303      	movs	r3, #3
 8000dec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000df2:	2301      	movs	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e02:	2301      	movs	r3, #1
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	4619      	mov	r1, r3
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <MX_TIM4_Init+0xa0>)
 8000e16:	f002 fa61 	bl	80032dc <HAL_TIM_Encoder_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000e20:	f000 facc 	bl	80013bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_TIM4_Init+0xa0>)
 8000e32:	f003 f971 	bl	8004118 <HAL_TIMEx_MasterConfigSynchronization>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000e3c:	f000 fabe 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	3730      	adds	r7, #48	; 0x30
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000100 	.word	0x20000100
 8000e4c:	40000800 	.word	0x40000800

08000e50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2224      	movs	r2, #36	; 0x24
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f004 fa84 	bl	800536c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <MX_TIM5_Init+0xa0>)
 8000e6e:	4a21      	ldr	r2, [pc, #132]	; (8000ef4 <MX_TIM5_Init+0xa4>)
 8000e70:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <MX_TIM5_Init+0xa0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <MX_TIM5_Init+0xa0>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <MX_TIM5_Init+0xa0>)
 8000e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e84:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <MX_TIM5_Init+0xa0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <MX_TIM5_Init+0xa0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e92:	2303      	movs	r3, #3
 8000e94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <MX_TIM5_Init+0xa0>)
 8000ebe:	f002 fa0d 	bl	80032dc <HAL_TIM_Encoder_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000ec8:	f000 fa78 	bl	80013bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_TIM5_Init+0xa0>)
 8000eda:	f003 f91d 	bl	8004118 <HAL_TIMEx_MasterConfigSynchronization>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000ee4:	f000 fa6a 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	3730      	adds	r7, #48	; 0x30
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000148 	.word	0x20000148
 8000ef4:	40000c00 	.word	0x40000c00

08000ef8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]
 8000f0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_TIM10_Init+0x94>)
 8000f12:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <MX_TIM10_Init+0x98>)
 8000f14:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 640;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_TIM10_Init+0x94>)
 8000f18:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000f1c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_TIM10_Init+0x94>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_TIM10_Init+0x94>)
 8000f26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f2a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_TIM10_Init+0x94>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_TIM10_Init+0x94>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f38:	4814      	ldr	r0, [pc, #80]	; (8000f8c <MX_TIM10_Init+0x94>)
 8000f3a:	f002 f805 	bl	8002f48 <HAL_TIM_Base_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8000f44:	f000 fa3a 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000f48:	4810      	ldr	r0, [pc, #64]	; (8000f8c <MX_TIM10_Init+0x94>)
 8000f4a:	f002 f84c 	bl	8002fe6 <HAL_TIM_PWM_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8000f54:	f000 fa32 	bl	80013bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f58:	2360      	movs	r3, #96	; 0x60
 8000f5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4807      	ldr	r0, [pc, #28]	; (8000f8c <MX_TIM10_Init+0x94>)
 8000f70:	f002 fc10 	bl	8003794 <HAL_TIM_PWM_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8000f7a:	f000 fa1f 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000f7e:	4803      	ldr	r0, [pc, #12]	; (8000f8c <MX_TIM10_Init+0x94>)
 8000f80:	f000 fbfe 	bl	8001780 <HAL_TIM_MspPostInit>

}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000190 	.word	0x20000190
 8000f90:	40014400 	.word	0x40014400

08000f94 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_TIM11_Init+0x40>)
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <MX_TIM11_Init+0x44>)
 8000f9c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <MX_TIM11_Init+0x40>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_TIM11_Init+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <MX_TIM11_Init+0x40>)
 8000fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_TIM11_Init+0x40>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_TIM11_Init+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_TIM11_Init+0x40>)
 8000fc0:	f001 ffc2 	bl	8002f48 <HAL_TIM_Base_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000fca:	f000 f9f7 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001d8 	.word	0x200001d8
 8000fd8:	40014800 	.word	0x40014800

08000fdc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
 8000ffe:	615a      	str	r2, [r3, #20]
 8001000:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001002:	4b26      	ldr	r3, [pc, #152]	; (800109c <MX_TIM12_Init+0xc0>)
 8001004:	4a26      	ldr	r2, [pc, #152]	; (80010a0 <MX_TIM12_Init+0xc4>)
 8001006:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 640;
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <MX_TIM12_Init+0xc0>)
 800100a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800100e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <MX_TIM12_Init+0xc0>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <MX_TIM12_Init+0xc0>)
 8001018:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800101c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <MX_TIM12_Init+0xc0>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_TIM12_Init+0xc0>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800102a:	481c      	ldr	r0, [pc, #112]	; (800109c <MX_TIM12_Init+0xc0>)
 800102c:	f001 ff8c 	bl	8002f48 <HAL_TIM_Base_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8001036:	f000 f9c1 	bl	80013bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001040:	f107 0320 	add.w	r3, r7, #32
 8001044:	4619      	mov	r1, r3
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <MX_TIM12_Init+0xc0>)
 8001048:	f002 fc66 	bl	8003918 <HAL_TIM_ConfigClockSource>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8001052:	f000 f9b3 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001056:	4811      	ldr	r0, [pc, #68]	; (800109c <MX_TIM12_Init+0xc0>)
 8001058:	f001 ffc5 	bl	8002fe6 <HAL_TIM_PWM_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001062:	f000 f9ab 	bl	80013bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001066:	2360      	movs	r3, #96	; 0x60
 8001068:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2200      	movs	r2, #0
 800107a:	4619      	mov	r1, r3
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <MX_TIM12_Init+0xc0>)
 800107e:	f002 fb89 	bl	8003794 <HAL_TIM_PWM_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8001088:	f000 f998 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800108c:	4803      	ldr	r0, [pc, #12]	; (800109c <MX_TIM12_Init+0xc0>)
 800108e:	f000 fb77 	bl	8001780 <HAL_TIM_MspPostInit>

}
 8001092:	bf00      	nop
 8001094:	3730      	adds	r7, #48	; 0x30
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000220 	.word	0x20000220
 80010a0:	40001800 	.word	0x40001800

080010a4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
 80010b8:	615a      	str	r2, [r3, #20]
 80010ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <MX_TIM13_Init+0x94>)
 80010be:	4a1f      	ldr	r2, [pc, #124]	; (800113c <MX_TIM13_Init+0x98>)
 80010c0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 640;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <MX_TIM13_Init+0x94>)
 80010c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80010c8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_TIM13_Init+0x94>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000;
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_TIM13_Init+0x94>)
 80010d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010d6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_TIM13_Init+0x94>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_TIM13_Init+0x94>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80010e4:	4814      	ldr	r0, [pc, #80]	; (8001138 <MX_TIM13_Init+0x94>)
 80010e6:	f001 ff2f 	bl	8002f48 <HAL_TIM_Base_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 80010f0:	f000 f964 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80010f4:	4810      	ldr	r0, [pc, #64]	; (8001138 <MX_TIM13_Init+0x94>)
 80010f6:	f001 ff76 	bl	8002fe6 <HAL_TIM_PWM_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8001100:	f000 f95c 	bl	80013bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001104:	2360      	movs	r3, #96	; 0x60
 8001106:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <MX_TIM13_Init+0x94>)
 800111c:	f002 fb3a 	bl	8003794 <HAL_TIM_PWM_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8001126:	f000 f949 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <MX_TIM13_Init+0x94>)
 800112c:	f000 fb28 	bl	8001780 <HAL_TIM_MspPostInit>

}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000268 	.word	0x20000268
 800113c:	40001c00 	.word	0x40001c00

08001140 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	615a      	str	r2, [r3, #20]
 8001156:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <MX_TIM14_Init+0x94>)
 800115a:	4a1f      	ldr	r2, [pc, #124]	; (80011d8 <MX_TIM14_Init+0x98>)
 800115c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 640;
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <MX_TIM14_Init+0x94>)
 8001160:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001164:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <MX_TIM14_Init+0x94>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_TIM14_Init+0x94>)
 800116e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001172:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_TIM14_Init+0x94>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <MX_TIM14_Init+0x94>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001180:	4814      	ldr	r0, [pc, #80]	; (80011d4 <MX_TIM14_Init+0x94>)
 8001182:	f001 fee1 	bl	8002f48 <HAL_TIM_Base_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 800118c:	f000 f916 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001190:	4810      	ldr	r0, [pc, #64]	; (80011d4 <MX_TIM14_Init+0x94>)
 8001192:	f001 ff28 	bl	8002fe6 <HAL_TIM_PWM_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 800119c:	f000 f90e 	bl	80013bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a0:	2360      	movs	r3, #96	; 0x60
 80011a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	4619      	mov	r1, r3
 80011b6:	4807      	ldr	r0, [pc, #28]	; (80011d4 <MX_TIM14_Init+0x94>)
 80011b8:	f002 faec 	bl	8003794 <HAL_TIM_PWM_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80011c2:	f000 f8fb 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80011c6:	4803      	ldr	r0, [pc, #12]	; (80011d4 <MX_TIM14_Init+0x94>)
 80011c8:	f000 fada 	bl	8001780 <HAL_TIM_MspPostInit>

}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200002b0 	.word	0x200002b0
 80011d8:	40002000 	.word	0x40002000

080011dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <MX_USART2_UART_Init+0x50>)
 80011e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 8001214:	f003 f862 	bl	80042dc <HAL_UART_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800121e:	f000 f8cd 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200002f8 	.word	0x200002f8
 800122c:	40004400 	.word	0x40004400

08001230 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_USART3_UART_Init+0x4c>)
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <MX_USART3_UART_Init+0x50>)
 8001238:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <MX_USART3_UART_Init+0x4c>)
 800123c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001240:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_USART3_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_USART3_UART_Init+0x4c>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_USART3_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_USART3_UART_Init+0x4c>)
 8001256:	220c      	movs	r2, #12
 8001258:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_USART3_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_USART3_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_USART3_UART_Init+0x4c>)
 8001268:	f003 f838 	bl	80042dc <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001272:	f000 f8a3 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000033c 	.word	0x2000033c
 8001280:	40004800 	.word	0x40004800

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b43      	ldr	r3, [pc, #268]	; (80013ac <MX_GPIO_Init+0x128>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a42      	ldr	r2, [pc, #264]	; (80013ac <MX_GPIO_Init+0x128>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b40      	ldr	r3, [pc, #256]	; (80013ac <MX_GPIO_Init+0x128>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <MX_GPIO_Init+0x128>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a3b      	ldr	r2, [pc, #236]	; (80013ac <MX_GPIO_Init+0x128>)
 80012c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b39      	ldr	r3, [pc, #228]	; (80013ac <MX_GPIO_Init+0x128>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b35      	ldr	r3, [pc, #212]	; (80013ac <MX_GPIO_Init+0x128>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a34      	ldr	r2, [pc, #208]	; (80013ac <MX_GPIO_Init+0x128>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b32      	ldr	r3, [pc, #200]	; (80013ac <MX_GPIO_Init+0x128>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <MX_GPIO_Init+0x128>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a2d      	ldr	r2, [pc, #180]	; (80013ac <MX_GPIO_Init+0x128>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <MX_GPIO_Init+0x128>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DC4_1_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001310:	4827      	ldr	r0, [pc, #156]	; (80013b0 <MX_GPIO_Init+0x12c>)
 8001312:	f001 f817 	bl	8002344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DC3_2_Pin|DC4_2_Pin|DC2_2_Pin|DC2_1_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 7154 	mov.w	r1, #848	; 0x350
 800131c:	4825      	ldr	r0, [pc, #148]	; (80013b4 <MX_GPIO_Init+0x130>)
 800131e:	f001 f811 	bl	8002344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC1_1_Pin|DC1_2_Pin|DC3_1_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f242 0106 	movw	r1, #8198	; 0x2006
 8001328:	4823      	ldr	r0, [pc, #140]	; (80013b8 <MX_GPIO_Init+0x134>)
 800132a:	f001 f80b 	bl	8002344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800132e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001334:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	481b      	ldr	r0, [pc, #108]	; (80013b4 <MX_GPIO_Init+0x130>)
 8001346:	f000 fe69 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DC4_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DC4_1_Pin;
 800134a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4813      	ldr	r0, [pc, #76]	; (80013b0 <MX_GPIO_Init+0x12c>)
 8001364:	f000 fe5a 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : DC3_2_Pin DC4_2_Pin DC2_2_Pin DC2_1_Pin */
  GPIO_InitStruct.Pin = DC3_2_Pin|DC4_2_Pin|DC2_2_Pin|DC2_1_Pin;
 8001368:	f44f 7354 	mov.w	r3, #848	; 0x350
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_GPIO_Init+0x130>)
 8001382:	f000 fe4b 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : DC1_1_Pin DC1_2_Pin DC3_1_Pin */
  GPIO_InitStruct.Pin = DC1_1_Pin|DC1_2_Pin|DC3_1_Pin;
 8001386:	f242 0306 	movw	r3, #8198	; 0x2006
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <MX_GPIO_Init+0x134>)
 80013a0:	f000 fe3c 	bl	800201c <HAL_GPIO_Init>

}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020400 	.word	0x40020400

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
}
 80013c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <Error_Handler+0x8>
	...

080013c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <HAL_MspInit+0x4c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <HAL_MspInit+0x4c>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_MspInit+0x4c>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_MspInit+0x4c>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001406:	2007      	movs	r0, #7
 8001408:	f000 fd34 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800

08001418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a3d      	ldr	r2, [pc, #244]	; (800151c <HAL_TIM_Base_MspInit+0x104>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d10e      	bne.n	8001448 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a3b      	ldr	r2, [pc, #236]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b39      	ldr	r3, [pc, #228]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001446:	e062      	b.n	800150e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM10)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a35      	ldr	r2, [pc, #212]	; (8001524 <HAL_TIM_Base_MspInit+0x10c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d10e      	bne.n	8001470 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	4b32      	ldr	r3, [pc, #200]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a31      	ldr	r2, [pc, #196]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 800145c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	69bb      	ldr	r3, [r7, #24]
}
 800146e:	e04e      	b.n	800150e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM11)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a2c      	ldr	r2, [pc, #176]	; (8001528 <HAL_TIM_Base_MspInit+0x110>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d10e      	bne.n	8001498 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	4b28      	ldr	r3, [pc, #160]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	4a27      	ldr	r2, [pc, #156]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 8001484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001488:	6453      	str	r3, [r2, #68]	; 0x44
 800148a:	4b25      	ldr	r3, [pc, #148]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697b      	ldr	r3, [r7, #20]
}
 8001496:	e03a      	b.n	800150e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM12)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a23      	ldr	r2, [pc, #140]	; (800152c <HAL_TIM_Base_MspInit+0x114>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d10e      	bne.n	80014c0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 80014ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
}
 80014be:	e026      	b.n	800150e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM13)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a1a      	ldr	r2, [pc, #104]	; (8001530 <HAL_TIM_Base_MspInit+0x118>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d10e      	bne.n	80014e8 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a13      	ldr	r2, [pc, #76]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 80014d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
}
 80014e6:	e012      	b.n	800150e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM14)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a11      	ldr	r2, [pc, #68]	; (8001534 <HAL_TIM_Base_MspInit+0x11c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d10d      	bne.n	800150e <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a09      	ldr	r2, [pc, #36]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <HAL_TIM_Base_MspInit+0x108>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
}
 800150e:	bf00      	nop
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40010000 	.word	0x40010000
 8001520:	40023800 	.word	0x40023800
 8001524:	40014400 	.word	0x40014400
 8001528:	40014800 	.word	0x40014800
 800152c:	40001800 	.word	0x40001800
 8001530:	40001c00 	.word	0x40001c00
 8001534:	40002000 	.word	0x40002000

08001538 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b090      	sub	sp, #64	; 0x40
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001558:	d154      	bne.n	8001604 <HAL_TIM_Encoder_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
 800155e:	4b82      	ldr	r3, [pc, #520]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a81      	ldr	r2, [pc, #516]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
 800156a:	4b7f      	ldr	r3, [pc, #508]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
 8001574:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
 800157a:	4b7b      	ldr	r3, [pc, #492]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a7a      	ldr	r2, [pc, #488]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b78      	ldr	r3, [pc, #480]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
 8001596:	4b74      	ldr	r3, [pc, #464]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a73      	ldr	r2, [pc, #460]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b71      	ldr	r3, [pc, #452]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	623b      	str	r3, [r7, #32]
 80015ac:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015c0:	2301      	movs	r3, #1
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c8:	4619      	mov	r1, r3
 80015ca:	4868      	ldr	r0, [pc, #416]	; (800176c <HAL_TIM_Encoder_MspInit+0x234>)
 80015cc:	f000 fd26 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015e2:	2301      	movs	r3, #1
 80015e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ea:	4619      	mov	r1, r3
 80015ec:	4860      	ldr	r0, [pc, #384]	; (8001770 <HAL_TIM_Encoder_MspInit+0x238>)
 80015ee:	f000 fd15 	bl	800201c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	201c      	movs	r0, #28
 80015f8:	f000 fc47 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015fc:	201c      	movs	r0, #28
 80015fe:	f000 fc60 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001602:	e0ac      	b.n	800175e <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM3)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a5a      	ldr	r2, [pc, #360]	; (8001774 <HAL_TIM_Encoder_MspInit+0x23c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d134      	bne.n	8001678 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	4b55      	ldr	r3, [pc, #340]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a54      	ldr	r2, [pc, #336]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b52      	ldr	r3, [pc, #328]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
 800162e:	4b4e      	ldr	r3, [pc, #312]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a4d      	ldr	r2, [pc, #308]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b4b      	ldr	r3, [pc, #300]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	61bb      	str	r3, [r7, #24]
 8001644:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001646:	2330      	movs	r3, #48	; 0x30
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001656:	2302      	movs	r3, #2
 8001658:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800165e:	4619      	mov	r1, r3
 8001660:	4843      	ldr	r0, [pc, #268]	; (8001770 <HAL_TIM_Encoder_MspInit+0x238>)
 8001662:	f000 fcdb 	bl	800201c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	201d      	movs	r0, #29
 800166c:	f000 fc0d 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001670:	201d      	movs	r0, #29
 8001672:	f000 fc26 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
}
 8001676:	e072      	b.n	800175e <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM4)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a3e      	ldr	r2, [pc, #248]	; (8001778 <HAL_TIM_Encoder_MspInit+0x240>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d134      	bne.n	80016ec <HAL_TIM_Encoder_MspInit+0x1b4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	4b38      	ldr	r3, [pc, #224]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a37      	ldr	r2, [pc, #220]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b35      	ldr	r3, [pc, #212]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a30      	ldr	r2, [pc, #192]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b2e      	ldr	r3, [pc, #184]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ba:	23c0      	movs	r3, #192	; 0xc0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016ca:	2302      	movs	r3, #2
 80016cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d2:	4619      	mov	r1, r3
 80016d4:	4826      	ldr	r0, [pc, #152]	; (8001770 <HAL_TIM_Encoder_MspInit+0x238>)
 80016d6:	f000 fca1 	bl	800201c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	201e      	movs	r0, #30
 80016e0:	f000 fbd3 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016e4:	201e      	movs	r0, #30
 80016e6:	f000 fbec 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
}
 80016ea:	e038      	b.n	800175e <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM5)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a22      	ldr	r2, [pc, #136]	; (800177c <HAL_TIM_Encoder_MspInit+0x244>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d133      	bne.n	800175e <HAL_TIM_Encoder_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a13      	ldr	r2, [pc, #76]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_TIM_Encoder_MspInit+0x230>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800172e:	2303      	movs	r3, #3
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800173e:	2302      	movs	r3, #2
 8001740:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001746:	4619      	mov	r1, r3
 8001748:	4808      	ldr	r0, [pc, #32]	; (800176c <HAL_TIM_Encoder_MspInit+0x234>)
 800174a:	f000 fc67 	bl	800201c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	2032      	movs	r0, #50	; 0x32
 8001754:	f000 fb99 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001758:	2032      	movs	r0, #50	; 0x32
 800175a:	f000 fbb2 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
}
 800175e:	bf00      	nop
 8001760:	3740      	adds	r7, #64	; 0x40
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	40020000 	.word	0x40020000
 8001770:	40020400 	.word	0x40020400
 8001774:	40000400 	.word	0x40000400
 8001778:	40000800 	.word	0x40000800
 800177c:	40000c00 	.word	0x40000c00

08001780 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08c      	sub	sp, #48	; 0x30
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a5b      	ldr	r2, [pc, #364]	; (800190c <HAL_TIM_MspPostInit+0x18c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d11f      	bne.n	80017e2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	4b5a      	ldr	r3, [pc, #360]	; (8001910 <HAL_TIM_MspPostInit+0x190>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a59      	ldr	r2, [pc, #356]	; (8001910 <HAL_TIM_MspPostInit+0x190>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b57      	ldr	r3, [pc, #348]	; (8001910 <HAL_TIM_MspPostInit+0x190>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80017be:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017d0:	2301      	movs	r3, #1
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	484e      	ldr	r0, [pc, #312]	; (8001914 <HAL_TIM_MspPostInit+0x194>)
 80017dc:	f000 fc1e 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80017e0:	e090      	b.n	8001904 <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM10)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <HAL_TIM_MspPostInit+0x198>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d11f      	bne.n	800182c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	4b47      	ldr	r3, [pc, #284]	; (8001910 <HAL_TIM_MspPostInit+0x190>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	4a46      	ldr	r2, [pc, #280]	; (8001910 <HAL_TIM_MspPostInit+0x190>)
 80017f6:	f043 0302 	orr.w	r3, r3, #2
 80017fa:	6313      	str	r3, [r2, #48]	; 0x30
 80017fc:	4b44      	ldr	r3, [pc, #272]	; (8001910 <HAL_TIM_MspPostInit+0x190>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800180c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800181a:	2303      	movs	r3, #3
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	483d      	ldr	r0, [pc, #244]	; (800191c <HAL_TIM_MspPostInit+0x19c>)
 8001826:	f000 fbf9 	bl	800201c <HAL_GPIO_Init>
}
 800182a:	e06b      	b.n	8001904 <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM12)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a3b      	ldr	r2, [pc, #236]	; (8001920 <HAL_TIM_MspPostInit+0x1a0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d11f      	bne.n	8001876 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b35      	ldr	r3, [pc, #212]	; (8001910 <HAL_TIM_MspPostInit+0x190>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a34      	ldr	r2, [pc, #208]	; (8001910 <HAL_TIM_MspPostInit+0x190>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b32      	ldr	r3, [pc, #200]	; (8001910 <HAL_TIM_MspPostInit+0x190>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001852:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001864:	2309      	movs	r3, #9
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	4619      	mov	r1, r3
 800186e:	482b      	ldr	r0, [pc, #172]	; (800191c <HAL_TIM_MspPostInit+0x19c>)
 8001870:	f000 fbd4 	bl	800201c <HAL_GPIO_Init>
}
 8001874:	e046      	b.n	8001904 <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM13)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a2a      	ldr	r2, [pc, #168]	; (8001924 <HAL_TIM_MspPostInit+0x1a4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d11e      	bne.n	80018be <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <HAL_TIM_MspPostInit+0x190>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	4a21      	ldr	r2, [pc, #132]	; (8001910 <HAL_TIM_MspPostInit+0x190>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6313      	str	r3, [r2, #48]	; 0x30
 8001890:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <HAL_TIM_MspPostInit+0x190>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800189c:	2340      	movs	r3, #64	; 0x40
 800189e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80018ac:	2309      	movs	r3, #9
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	4619      	mov	r1, r3
 80018b6:	4817      	ldr	r0, [pc, #92]	; (8001914 <HAL_TIM_MspPostInit+0x194>)
 80018b8:	f000 fbb0 	bl	800201c <HAL_GPIO_Init>
}
 80018bc:	e022      	b.n	8001904 <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM14)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_TIM_MspPostInit+0x1a8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d11d      	bne.n	8001904 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_TIM_MspPostInit+0x190>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_TIM_MspPostInit+0x190>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6313      	str	r3, [r2, #48]	; 0x30
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_TIM_MspPostInit+0x190>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80018f4:	2309      	movs	r3, #9
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_TIM_MspPostInit+0x194>)
 8001900:	f000 fb8c 	bl	800201c <HAL_GPIO_Init>
}
 8001904:	bf00      	nop
 8001906:	3730      	adds	r7, #48	; 0x30
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40010000 	.word	0x40010000
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000
 8001918:	40014400 	.word	0x40014400
 800191c:	40020400 	.word	0x40020400
 8001920:	40001800 	.word	0x40001800
 8001924:	40001c00 	.word	0x40001c00
 8001928:	40002000 	.word	0x40002000

0800192c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	; 0x30
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a45      	ldr	r2, [pc, #276]	; (8001a60 <HAL_UART_MspInit+0x134>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d134      	bne.n	80019b8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <HAL_UART_MspInit+0x138>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a43      	ldr	r2, [pc, #268]	; (8001a64 <HAL_UART_MspInit+0x138>)
 8001958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
 800195e:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <HAL_UART_MspInit+0x138>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	61bb      	str	r3, [r7, #24]
 8001968:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_UART_MspInit+0x138>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a3c      	ldr	r2, [pc, #240]	; (8001a64 <HAL_UART_MspInit+0x138>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <HAL_UART_MspInit+0x138>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001986:	230c      	movs	r3, #12
 8001988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001996:	2307      	movs	r3, #7
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4619      	mov	r1, r3
 80019a0:	4831      	ldr	r0, [pc, #196]	; (8001a68 <HAL_UART_MspInit+0x13c>)
 80019a2:	f000 fb3b 	bl	800201c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2026      	movs	r0, #38	; 0x26
 80019ac:	f000 fa6d 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019b0:	2026      	movs	r0, #38	; 0x26
 80019b2:	f000 fa86 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019b6:	e04f      	b.n	8001a58 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a2b      	ldr	r2, [pc, #172]	; (8001a6c <HAL_UART_MspInit+0x140>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d14a      	bne.n	8001a58 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_UART_MspInit+0x138>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <HAL_UART_MspInit+0x138>)
 80019cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_UART_MspInit+0x138>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_UART_MspInit+0x138>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <HAL_UART_MspInit+0x138>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_UART_MspInit+0x138>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_UART_MspInit+0x138>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a18      	ldr	r2, [pc, #96]	; (8001a64 <HAL_UART_MspInit+0x138>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_UART_MspInit+0x138>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a16:	2320      	movs	r3, #32
 8001a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a22:	2303      	movs	r3, #3
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a26:	2307      	movs	r3, #7
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480f      	ldr	r0, [pc, #60]	; (8001a70 <HAL_UART_MspInit+0x144>)
 8001a32:	f000 faf3 	bl	800201c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a48:	2307      	movs	r3, #7
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	4619      	mov	r1, r3
 8001a52:	4808      	ldr	r0, [pc, #32]	; (8001a74 <HAL_UART_MspInit+0x148>)
 8001a54:	f000 fae2 	bl	800201c <HAL_GPIO_Init>
}
 8001a58:	bf00      	nop
 8001a5a:	3730      	adds	r7, #48	; 0x30
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40004400 	.word	0x40004400
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40004800 	.word	0x40004800
 8001a70:	40020800 	.word	0x40020800
 8001a74:	40020400 	.word	0x40020400

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac4:	f000 f8c2 	bl	8001c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <TIM2_IRQHandler+0x10>)
 8001ad2:	f001 fd57 	bl	8003584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000070 	.word	0x20000070

08001ae0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <TIM3_IRQHandler+0x10>)
 8001ae6:	f001 fd4d 	bl	8003584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200000b8 	.word	0x200000b8

08001af4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <TIM4_IRQHandler+0x10>)
 8001afa:	f001 fd43 	bl	8003584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000100 	.word	0x20000100

08001b08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <USART2_IRQHandler+0x10>)
 8001b0e:	f002 fcd5 	bl	80044bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200002f8 	.word	0x200002f8

08001b1c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <TIM5_IRQHandler+0x10>)
 8001b22:	f001 fd2f 	bl	8003584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000148 	.word	0x20000148

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <SystemInit+0x20>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <SystemInit+0x20>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
 Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5a:	490e      	ldr	r1, [pc, #56]	; (8001b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b70:	4c0b      	ldr	r4, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b7e:	f7ff ffd7 	bl	8001b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f003 fbcf 	bl	8005324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7fe fe65 	bl	8000854 <main>
  bx  lr    
 8001b8a:	4770      	bx	lr
 Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8001b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b98:	080053bc 	.word	0x080053bc
  ldr r2, =_sbss
 8001b9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ba0:	200003a0 	.word	0x200003a0

08001ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <HAL_Init+0x40>)
 8001bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <HAL_Init+0x40>)
 8001bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <HAL_Init+0x40>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 f94f 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f000 f808 	bl	8001bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bdc:	f7ff fbf4 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023c00 	.word	0x40023c00

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x54>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_InitTick+0x58>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f967 	bl	8001ede <HAL_SYSTICK_Config>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00e      	b.n	8001c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b0f      	cmp	r3, #15
 8001c1e:	d80a      	bhi.n	8001c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c20:	2200      	movs	r2, #0
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c28:	f000 f92f 	bl	8001e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c2c:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <HAL_InitTick+0x5c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000008 	.word	0x20000008
 8001c48:	20000004 	.word	0x20000004

08001c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x20>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x24>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_IncTick+0x24>)
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000008 	.word	0x20000008
 8001c70:	2000039c 	.word	0x2000039c

08001c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return uwTick;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_GetTick+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	2000039c 	.word	0x2000039c

08001c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff ffee 	bl	8001c74 <HAL_GetTick>
 8001c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ca4:	d005      	beq.n	8001cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_Delay+0x44>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cb2:	bf00      	nop
 8001cb4:	f7ff ffde 	bl	8001c74 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d8f7      	bhi.n	8001cb4 <HAL_Delay+0x28>
  {
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000008 	.word	0x20000008

08001cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d06:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	60d3      	str	r3, [r2, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <__NVIC_GetPriorityGrouping+0x18>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 0307 	and.w	r3, r3, #7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	db0b      	blt.n	8001d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	f003 021f 	and.w	r2, r3, #31
 8001d50:	4907      	ldr	r1, [pc, #28]	; (8001d70 <__NVIC_EnableIRQ+0x38>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	2001      	movs	r0, #1
 8001d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <__NVIC_SetPriority+0x4c>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	440b      	add	r3, r1
 8001d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d9c:	e00a      	b.n	8001db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4908      	ldr	r1, [pc, #32]	; (8001dc4 <__NVIC_SetPriority+0x50>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3b04      	subs	r3, #4
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f1c3 0307 	rsb	r3, r3, #7
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	bf28      	it	cs
 8001de6:	2304      	movcs	r3, #4
 8001de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d902      	bls.n	8001df8 <NVIC_EncodePriority+0x30>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3b03      	subs	r3, #3
 8001df6:	e000      	b.n	8001dfa <NVIC_EncodePriority+0x32>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43d9      	mvns	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	4313      	orrs	r3, r2
         );
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e40:	d301      	bcc.n	8001e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00f      	b.n	8001e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <SysTick_Config+0x40>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4e:	210f      	movs	r1, #15
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e54:	f7ff ff8e 	bl	8001d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <SysTick_Config+0x40>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <SysTick_Config+0x40>)
 8001e60:	2207      	movs	r2, #7
 8001e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	e000e010 	.word	0xe000e010

08001e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff29 	bl	8001cd4 <__NVIC_SetPriorityGrouping>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9c:	f7ff ff3e 	bl	8001d1c <__NVIC_GetPriorityGrouping>
 8001ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff ff8e 	bl	8001dc8 <NVIC_EncodePriority>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff5d 	bl	8001d74 <__NVIC_SetPriority>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff31 	bl	8001d38 <__NVIC_EnableIRQ>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffa2 	bl	8001e30 <SysTick_Config>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f04:	f7ff feb6 	bl	8001c74 <HAL_GetTick>
 8001f08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d008      	beq.n	8001f28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2280      	movs	r2, #128	; 0x80
 8001f1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e052      	b.n	8001fce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0216 	bic.w	r2, r2, #22
 8001f36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d103      	bne.n	8001f58 <HAL_DMA_Abort+0x62>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0208 	bic.w	r2, r2, #8
 8001f66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f78:	e013      	b.n	8001fa2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f7a:	f7ff fe7b 	bl	8001c74 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b05      	cmp	r3, #5
 8001f86:	d90c      	bls.n	8001fa2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2203      	movs	r2, #3
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e015      	b.n	8001fce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1e4      	bne.n	8001f7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	223f      	movs	r2, #63	; 0x3f
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d004      	beq.n	8001ff4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2280      	movs	r2, #128	; 0x80
 8001fee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e00c      	b.n	800200e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2205      	movs	r2, #5
 8001ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	e165      	b.n	8002304 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002038:	2201      	movs	r2, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	429a      	cmp	r2, r3
 8002052:	f040 8154 	bne.w	80022fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d005      	beq.n	800206e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206a:	2b02      	cmp	r3, #2
 800206c:	d130      	bne.n	80020d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	2203      	movs	r2, #3
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a4:	2201      	movs	r2, #1
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 0201 	and.w	r2, r3, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d017      	beq.n	800210c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d123      	bne.n	8002160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	08da      	lsrs	r2, r3, #3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3208      	adds	r2, #8
 8002120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	220f      	movs	r2, #15
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	08da      	lsrs	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3208      	adds	r2, #8
 800215a:	69b9      	ldr	r1, [r7, #24]
 800215c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0203 	and.w	r2, r3, #3
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80ae 	beq.w	80022fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b5d      	ldr	r3, [pc, #372]	; (800231c <HAL_GPIO_Init+0x300>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	4a5c      	ldr	r2, [pc, #368]	; (800231c <HAL_GPIO_Init+0x300>)
 80021ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b0:	6453      	str	r3, [r2, #68]	; 0x44
 80021b2:	4b5a      	ldr	r3, [pc, #360]	; (800231c <HAL_GPIO_Init+0x300>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021be:	4a58      	ldr	r2, [pc, #352]	; (8002320 <HAL_GPIO_Init+0x304>)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	3302      	adds	r3, #2
 80021c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	220f      	movs	r2, #15
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4f      	ldr	r2, [pc, #316]	; (8002324 <HAL_GPIO_Init+0x308>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d025      	beq.n	8002236 <HAL_GPIO_Init+0x21a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4e      	ldr	r2, [pc, #312]	; (8002328 <HAL_GPIO_Init+0x30c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01f      	beq.n	8002232 <HAL_GPIO_Init+0x216>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4d      	ldr	r2, [pc, #308]	; (800232c <HAL_GPIO_Init+0x310>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d019      	beq.n	800222e <HAL_GPIO_Init+0x212>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4c      	ldr	r2, [pc, #304]	; (8002330 <HAL_GPIO_Init+0x314>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_GPIO_Init+0x20e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4b      	ldr	r2, [pc, #300]	; (8002334 <HAL_GPIO_Init+0x318>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00d      	beq.n	8002226 <HAL_GPIO_Init+0x20a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4a      	ldr	r2, [pc, #296]	; (8002338 <HAL_GPIO_Init+0x31c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d007      	beq.n	8002222 <HAL_GPIO_Init+0x206>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a49      	ldr	r2, [pc, #292]	; (800233c <HAL_GPIO_Init+0x320>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_GPIO_Init+0x202>
 800221a:	2306      	movs	r3, #6
 800221c:	e00c      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 800221e:	2307      	movs	r3, #7
 8002220:	e00a      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 8002222:	2305      	movs	r3, #5
 8002224:	e008      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 8002226:	2304      	movs	r3, #4
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 800222a:	2303      	movs	r3, #3
 800222c:	e004      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 800222e:	2302      	movs	r3, #2
 8002230:	e002      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 8002236:	2300      	movs	r3, #0
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	f002 0203 	and.w	r2, r2, #3
 800223e:	0092      	lsls	r2, r2, #2
 8002240:	4093      	lsls	r3, r2
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002248:	4935      	ldr	r1, [pc, #212]	; (8002320 <HAL_GPIO_Init+0x304>)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002256:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <HAL_GPIO_Init+0x324>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800227a:	4a31      	ldr	r2, [pc, #196]	; (8002340 <HAL_GPIO_Init+0x324>)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002280:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <HAL_GPIO_Init+0x324>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022a4:	4a26      	ldr	r2, [pc, #152]	; (8002340 <HAL_GPIO_Init+0x324>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022aa:	4b25      	ldr	r3, [pc, #148]	; (8002340 <HAL_GPIO_Init+0x324>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ce:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <HAL_GPIO_Init+0x324>)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <HAL_GPIO_Init+0x324>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f8:	4a11      	ldr	r2, [pc, #68]	; (8002340 <HAL_GPIO_Init+0x324>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3301      	adds	r3, #1
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	2b0f      	cmp	r3, #15
 8002308:	f67f ae96 	bls.w	8002038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	40013800 	.word	0x40013800
 8002324:	40020000 	.word	0x40020000
 8002328:	40020400 	.word	0x40020400
 800232c:	40020800 	.word	0x40020800
 8002330:	40020c00 	.word	0x40020c00
 8002334:	40021000 	.word	0x40021000
 8002338:	40021400 	.word	0x40021400
 800233c:	40021800 	.word	0x40021800
 8002340:	40013c00 	.word	0x40013c00

08002344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	807b      	strh	r3, [r7, #2]
 8002350:	4613      	mov	r3, r2
 8002352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002354:	787b      	ldrb	r3, [r7, #1]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800235a:	887a      	ldrh	r2, [r7, #2]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002360:	e003      	b.n	800236a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002362:	887b      	ldrh	r3, [r7, #2]
 8002364:	041a      	lsls	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	619a      	str	r2, [r3, #24]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0cc      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800238c:	4b68      	ldr	r3, [pc, #416]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d90c      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b65      	ldr	r3, [pc, #404]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b63      	ldr	r3, [pc, #396]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0b8      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d020      	beq.n	8002402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023cc:	4b59      	ldr	r3, [pc, #356]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4a58      	ldr	r2, [pc, #352]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e4:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a52      	ldr	r2, [pc, #328]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f0:	4b50      	ldr	r3, [pc, #320]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	494d      	ldr	r1, [pc, #308]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d044      	beq.n	8002498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d119      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e07f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d003      	beq.n	8002436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002432:	2b03      	cmp	r3, #3
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	4b3f      	ldr	r3, [pc, #252]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e06f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002446:	4b3b      	ldr	r3, [pc, #236]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e067      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002456:	4b37      	ldr	r3, [pc, #220]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f023 0203 	bic.w	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4934      	ldr	r1, [pc, #208]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	4313      	orrs	r3, r2
 8002466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002468:	f7ff fc04 	bl	8001c74 <HAL_GetTick>
 800246c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	e00a      	b.n	8002486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002470:	f7ff fc00 	bl	8001c74 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	; 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e04f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 020c 	and.w	r2, r3, #12
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	429a      	cmp	r2, r3
 8002496:	d1eb      	bne.n	8002470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002498:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d20c      	bcs.n	80024c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b20      	ldr	r3, [pc, #128]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e032      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4916      	ldr	r1, [pc, #88]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ea:	4b12      	ldr	r3, [pc, #72]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	490e      	ldr	r1, [pc, #56]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024fe:	f000 f855 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 8002502:	4602      	mov	r2, r0
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	490a      	ldr	r1, [pc, #40]	; (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	5ccb      	ldrb	r3, [r1, r3]
 8002512:	fa22 f303 	lsr.w	r3, r2, r3
 8002516:	4a09      	ldr	r2, [pc, #36]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fb64 	bl	8001bec <HAL_InitTick>

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40023c00 	.word	0x40023c00
 8002534:	40023800 	.word	0x40023800
 8002538:	08005394 	.word	0x08005394
 800253c:	20000000 	.word	0x20000000
 8002540:	20000004 	.word	0x20000004

08002544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_RCC_GetHCLKFreq+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000000 	.word	0x20000000

0800255c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002560:	f7ff fff0 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	0a9b      	lsrs	r3, r3, #10
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4903      	ldr	r1, [pc, #12]	; (8002580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40023800 	.word	0x40023800
 8002580:	080053a4 	.word	0x080053a4

08002584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002588:	f7ff ffdc 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 800258c:	4602      	mov	r2, r0
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	0b5b      	lsrs	r3, r3, #13
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4903      	ldr	r1, [pc, #12]	; (80025a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800259a:	5ccb      	ldrb	r3, [r1, r3]
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40023800 	.word	0x40023800
 80025a8:	080053a4 	.word	0x080053a4

080025ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025b0:	b0ae      	sub	sp, #184	; 0xb8
 80025b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d2:	4bcb      	ldr	r3, [pc, #812]	; (8002900 <HAL_RCC_GetSysClockFreq+0x354>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b0c      	cmp	r3, #12
 80025dc:	f200 8206 	bhi.w	80029ec <HAL_RCC_GetSysClockFreq+0x440>
 80025e0:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80025e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e6:	bf00      	nop
 80025e8:	0800261d 	.word	0x0800261d
 80025ec:	080029ed 	.word	0x080029ed
 80025f0:	080029ed 	.word	0x080029ed
 80025f4:	080029ed 	.word	0x080029ed
 80025f8:	08002625 	.word	0x08002625
 80025fc:	080029ed 	.word	0x080029ed
 8002600:	080029ed 	.word	0x080029ed
 8002604:	080029ed 	.word	0x080029ed
 8002608:	0800262d 	.word	0x0800262d
 800260c:	080029ed 	.word	0x080029ed
 8002610:	080029ed 	.word	0x080029ed
 8002614:	080029ed 	.word	0x080029ed
 8002618:	0800281d 	.word	0x0800281d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800261c:	4bb9      	ldr	r3, [pc, #740]	; (8002904 <HAL_RCC_GetSysClockFreq+0x358>)
 800261e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002622:	e1e7      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002624:	4bb8      	ldr	r3, [pc, #736]	; (8002908 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002626:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800262a:	e1e3      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800262c:	4bb4      	ldr	r3, [pc, #720]	; (8002900 <HAL_RCC_GetSysClockFreq+0x354>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002634:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002638:	4bb1      	ldr	r3, [pc, #708]	; (8002900 <HAL_RCC_GetSysClockFreq+0x354>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d071      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002644:	4bae      	ldr	r3, [pc, #696]	; (8002900 <HAL_RCC_GetSysClockFreq+0x354>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	099b      	lsrs	r3, r3, #6
 800264a:	2200      	movs	r2, #0
 800264c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002650:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002654:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800265c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002666:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800266a:	4622      	mov	r2, r4
 800266c:	462b      	mov	r3, r5
 800266e:	f04f 0000 	mov.w	r0, #0
 8002672:	f04f 0100 	mov.w	r1, #0
 8002676:	0159      	lsls	r1, r3, #5
 8002678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800267c:	0150      	lsls	r0, r2, #5
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4621      	mov	r1, r4
 8002684:	1a51      	subs	r1, r2, r1
 8002686:	6439      	str	r1, [r7, #64]	; 0x40
 8002688:	4629      	mov	r1, r5
 800268a:	eb63 0301 	sbc.w	r3, r3, r1
 800268e:	647b      	str	r3, [r7, #68]	; 0x44
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800269c:	4649      	mov	r1, r9
 800269e:	018b      	lsls	r3, r1, #6
 80026a0:	4641      	mov	r1, r8
 80026a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026a6:	4641      	mov	r1, r8
 80026a8:	018a      	lsls	r2, r1, #6
 80026aa:	4641      	mov	r1, r8
 80026ac:	1a51      	subs	r1, r2, r1
 80026ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80026b0:	4649      	mov	r1, r9
 80026b2:	eb63 0301 	sbc.w	r3, r3, r1
 80026b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80026c4:	4649      	mov	r1, r9
 80026c6:	00cb      	lsls	r3, r1, #3
 80026c8:	4641      	mov	r1, r8
 80026ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ce:	4641      	mov	r1, r8
 80026d0:	00ca      	lsls	r2, r1, #3
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	4603      	mov	r3, r0
 80026d8:	4622      	mov	r2, r4
 80026da:	189b      	adds	r3, r3, r2
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
 80026de:	462b      	mov	r3, r5
 80026e0:	460a      	mov	r2, r1
 80026e2:	eb42 0303 	adc.w	r3, r2, r3
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026f4:	4629      	mov	r1, r5
 80026f6:	024b      	lsls	r3, r1, #9
 80026f8:	4621      	mov	r1, r4
 80026fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026fe:	4621      	mov	r1, r4
 8002700:	024a      	lsls	r2, r1, #9
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800270a:	2200      	movs	r2, #0
 800270c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002710:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002714:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002718:	f7fd fd74 	bl	8000204 <__aeabi_uldivmod>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4613      	mov	r3, r2
 8002722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002726:	e067      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002728:	4b75      	ldr	r3, [pc, #468]	; (8002900 <HAL_RCC_GetSysClockFreq+0x354>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	2200      	movs	r2, #0
 8002730:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002734:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002738:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800273c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002740:	67bb      	str	r3, [r7, #120]	; 0x78
 8002742:	2300      	movs	r3, #0
 8002744:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002746:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800274a:	4622      	mov	r2, r4
 800274c:	462b      	mov	r3, r5
 800274e:	f04f 0000 	mov.w	r0, #0
 8002752:	f04f 0100 	mov.w	r1, #0
 8002756:	0159      	lsls	r1, r3, #5
 8002758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800275c:	0150      	lsls	r0, r2, #5
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4621      	mov	r1, r4
 8002764:	1a51      	subs	r1, r2, r1
 8002766:	62b9      	str	r1, [r7, #40]	; 0x28
 8002768:	4629      	mov	r1, r5
 800276a:	eb63 0301 	sbc.w	r3, r3, r1
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800277c:	4649      	mov	r1, r9
 800277e:	018b      	lsls	r3, r1, #6
 8002780:	4641      	mov	r1, r8
 8002782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002786:	4641      	mov	r1, r8
 8002788:	018a      	lsls	r2, r1, #6
 800278a:	4641      	mov	r1, r8
 800278c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002790:	4649      	mov	r1, r9
 8002792:	eb63 0b01 	sbc.w	fp, r3, r1
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027aa:	4692      	mov	sl, r2
 80027ac:	469b      	mov	fp, r3
 80027ae:	4623      	mov	r3, r4
 80027b0:	eb1a 0303 	adds.w	r3, sl, r3
 80027b4:	623b      	str	r3, [r7, #32]
 80027b6:	462b      	mov	r3, r5
 80027b8:	eb4b 0303 	adc.w	r3, fp, r3
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80027ca:	4629      	mov	r1, r5
 80027cc:	028b      	lsls	r3, r1, #10
 80027ce:	4621      	mov	r1, r4
 80027d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027d4:	4621      	mov	r1, r4
 80027d6:	028a      	lsls	r2, r1, #10
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027e0:	2200      	movs	r2, #0
 80027e2:	673b      	str	r3, [r7, #112]	; 0x70
 80027e4:	677a      	str	r2, [r7, #116]	; 0x74
 80027e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80027ea:	f7fd fd0b 	bl	8000204 <__aeabi_uldivmod>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4613      	mov	r3, r2
 80027f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027f8:	4b41      	ldr	r3, [pc, #260]	; (8002900 <HAL_RCC_GetSysClockFreq+0x354>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	0c1b      	lsrs	r3, r3, #16
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	3301      	adds	r3, #1
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800280a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800280e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002812:	fbb2 f3f3 	udiv	r3, r2, r3
 8002816:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800281a:	e0eb      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800281c:	4b38      	ldr	r3, [pc, #224]	; (8002900 <HAL_RCC_GetSysClockFreq+0x354>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002828:	4b35      	ldr	r3, [pc, #212]	; (8002900 <HAL_RCC_GetSysClockFreq+0x354>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d06b      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002834:	4b32      	ldr	r3, [pc, #200]	; (8002900 <HAL_RCC_GetSysClockFreq+0x354>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	099b      	lsrs	r3, r3, #6
 800283a:	2200      	movs	r2, #0
 800283c:	66bb      	str	r3, [r7, #104]	; 0x68
 800283e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002846:	663b      	str	r3, [r7, #96]	; 0x60
 8002848:	2300      	movs	r3, #0
 800284a:	667b      	str	r3, [r7, #100]	; 0x64
 800284c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002850:	4622      	mov	r2, r4
 8002852:	462b      	mov	r3, r5
 8002854:	f04f 0000 	mov.w	r0, #0
 8002858:	f04f 0100 	mov.w	r1, #0
 800285c:	0159      	lsls	r1, r3, #5
 800285e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002862:	0150      	lsls	r0, r2, #5
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4621      	mov	r1, r4
 800286a:	1a51      	subs	r1, r2, r1
 800286c:	61b9      	str	r1, [r7, #24]
 800286e:	4629      	mov	r1, r5
 8002870:	eb63 0301 	sbc.w	r3, r3, r1
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002882:	4659      	mov	r1, fp
 8002884:	018b      	lsls	r3, r1, #6
 8002886:	4651      	mov	r1, sl
 8002888:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800288c:	4651      	mov	r1, sl
 800288e:	018a      	lsls	r2, r1, #6
 8002890:	4651      	mov	r1, sl
 8002892:	ebb2 0801 	subs.w	r8, r2, r1
 8002896:	4659      	mov	r1, fp
 8002898:	eb63 0901 	sbc.w	r9, r3, r1
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028b0:	4690      	mov	r8, r2
 80028b2:	4699      	mov	r9, r3
 80028b4:	4623      	mov	r3, r4
 80028b6:	eb18 0303 	adds.w	r3, r8, r3
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	462b      	mov	r3, r5
 80028be:	eb49 0303 	adc.w	r3, r9, r3
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80028d0:	4629      	mov	r1, r5
 80028d2:	024b      	lsls	r3, r1, #9
 80028d4:	4621      	mov	r1, r4
 80028d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028da:	4621      	mov	r1, r4
 80028dc:	024a      	lsls	r2, r1, #9
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028e6:	2200      	movs	r2, #0
 80028e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80028ea:	65fa      	str	r2, [r7, #92]	; 0x5c
 80028ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028f0:	f7fd fc88 	bl	8000204 <__aeabi_uldivmod>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4613      	mov	r3, r2
 80028fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028fe:	e065      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x420>
 8002900:	40023800 	.word	0x40023800
 8002904:	00f42400 	.word	0x00f42400
 8002908:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290c:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x458>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	2200      	movs	r2, #0
 8002914:	4618      	mov	r0, r3
 8002916:	4611      	mov	r1, r2
 8002918:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800291c:	653b      	str	r3, [r7, #80]	; 0x50
 800291e:	2300      	movs	r3, #0
 8002920:	657b      	str	r3, [r7, #84]	; 0x54
 8002922:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002926:	4642      	mov	r2, r8
 8002928:	464b      	mov	r3, r9
 800292a:	f04f 0000 	mov.w	r0, #0
 800292e:	f04f 0100 	mov.w	r1, #0
 8002932:	0159      	lsls	r1, r3, #5
 8002934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002938:	0150      	lsls	r0, r2, #5
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4641      	mov	r1, r8
 8002940:	1a51      	subs	r1, r2, r1
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	4649      	mov	r1, r9
 8002946:	eb63 0301 	sbc.w	r3, r3, r1
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002958:	4659      	mov	r1, fp
 800295a:	018b      	lsls	r3, r1, #6
 800295c:	4651      	mov	r1, sl
 800295e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002962:	4651      	mov	r1, sl
 8002964:	018a      	lsls	r2, r1, #6
 8002966:	4651      	mov	r1, sl
 8002968:	1a54      	subs	r4, r2, r1
 800296a:	4659      	mov	r1, fp
 800296c:	eb63 0501 	sbc.w	r5, r3, r1
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	00eb      	lsls	r3, r5, #3
 800297a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800297e:	00e2      	lsls	r2, r4, #3
 8002980:	4614      	mov	r4, r2
 8002982:	461d      	mov	r5, r3
 8002984:	4643      	mov	r3, r8
 8002986:	18e3      	adds	r3, r4, r3
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	464b      	mov	r3, r9
 800298c:	eb45 0303 	adc.w	r3, r5, r3
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800299e:	4629      	mov	r1, r5
 80029a0:	028b      	lsls	r3, r1, #10
 80029a2:	4621      	mov	r1, r4
 80029a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029a8:	4621      	mov	r1, r4
 80029aa:	028a      	lsls	r2, r1, #10
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029b4:	2200      	movs	r2, #0
 80029b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80029b8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80029ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029be:	f7fd fc21 	bl	8000204 <__aeabi_uldivmod>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4613      	mov	r3, r2
 80029c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x458>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	0f1b      	lsrs	r3, r3, #28
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80029da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029ea:	e003      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x45c>)
 80029ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	37b8      	adds	r7, #184	; 0xb8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800
 8002a08:	00f42400 	.word	0x00f42400

08002a0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e28d      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8083 	beq.w	8002b32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a2c:	4b94      	ldr	r3, [pc, #592]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d019      	beq.n	8002a6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a38:	4b91      	ldr	r3, [pc, #580]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a44:	4b8e      	ldr	r3, [pc, #568]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a50:	d00c      	beq.n	8002a6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a52:	4b8b      	ldr	r3, [pc, #556]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a5a:	2b0c      	cmp	r3, #12
 8002a5c:	d112      	bne.n	8002a84 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5e:	4b88      	ldr	r3, [pc, #544]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	4b84      	ldr	r3, [pc, #528]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d05b      	beq.n	8002b30 <HAL_RCC_OscConfig+0x124>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d157      	bne.n	8002b30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e25a      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCC_OscConfig+0x90>
 8002a8e:	4b7c      	ldr	r3, [pc, #496]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a7b      	ldr	r2, [pc, #492]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e01d      	b.n	8002ad8 <HAL_RCC_OscConfig+0xcc>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0xb4>
 8002aa6:	4b76      	ldr	r3, [pc, #472]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a75      	ldr	r2, [pc, #468]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b73      	ldr	r3, [pc, #460]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a72      	ldr	r2, [pc, #456]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0xcc>
 8002ac0:	4b6f      	ldr	r3, [pc, #444]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a6e      	ldr	r2, [pc, #440]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b6c      	ldr	r3, [pc, #432]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a6b      	ldr	r2, [pc, #428]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7ff f8c8 	bl	8001c74 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7ff f8c4 	bl	8001c74 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e21f      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	4b61      	ldr	r3, [pc, #388]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xdc>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7ff f8b4 	bl	8001c74 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b10:	f7ff f8b0 	bl	8001c74 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e20b      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b22:	4b57      	ldr	r3, [pc, #348]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x104>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d06f      	beq.n	8002c1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b3e:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d017      	beq.n	8002b7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b4a:	4b4d      	ldr	r3, [pc, #308]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d105      	bne.n	8002b62 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b56:	4b4a      	ldr	r3, [pc, #296]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b62:	4b47      	ldr	r3, [pc, #284]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d11c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b6e:	4b44      	ldr	r3, [pc, #272]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d116      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7a:	4b41      	ldr	r3, [pc, #260]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d005      	beq.n	8002b92 <HAL_RCC_OscConfig+0x186>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e1d3      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b92:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4937      	ldr	r1, [pc, #220]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba6:	e03a      	b.n	8002c1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d020      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb0:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <HAL_RCC_OscConfig+0x278>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7ff f85d 	bl	8001c74 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7ff f859 	bl	8001c74 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e1b4      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bdc:	4b28      	ldr	r3, [pc, #160]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4925      	ldr	r1, [pc, #148]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	600b      	str	r3, [r1, #0]
 8002bf0:	e015      	b.n	8002c1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_RCC_OscConfig+0x278>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7ff f83c 	bl	8001c74 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c00:	f7ff f838 	bl	8001c74 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e193      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d036      	beq.n	8002c98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d016      	beq.n	8002c60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c38:	f7ff f81c 	bl	8001c74 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c40:	f7ff f818 	bl	8001c74 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e173      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x234>
 8002c5e:	e01b      	b.n	8002c98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_RCC_OscConfig+0x27c>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c66:	f7ff f805 	bl	8001c74 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6c:	e00e      	b.n	8002c8c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c6e:	f7ff f801 	bl	8001c74 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d907      	bls.n	8002c8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e15c      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
 8002c80:	40023800 	.word	0x40023800
 8002c84:	42470000 	.word	0x42470000
 8002c88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8c:	4b8a      	ldr	r3, [pc, #552]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1ea      	bne.n	8002c6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8097 	beq.w	8002dd4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002caa:	4b83      	ldr	r3, [pc, #524]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10f      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	4b7f      	ldr	r3, [pc, #508]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a7e      	ldr	r2, [pc, #504]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b7c      	ldr	r3, [pc, #496]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd6:	4b79      	ldr	r3, [pc, #484]	; (8002ebc <HAL_RCC_OscConfig+0x4b0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d118      	bne.n	8002d14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce2:	4b76      	ldr	r3, [pc, #472]	; (8002ebc <HAL_RCC_OscConfig+0x4b0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a75      	ldr	r2, [pc, #468]	; (8002ebc <HAL_RCC_OscConfig+0x4b0>)
 8002ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cee:	f7fe ffc1 	bl	8001c74 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf6:	f7fe ffbd 	bl	8001c74 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e118      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	4b6c      	ldr	r3, [pc, #432]	; (8002ebc <HAL_RCC_OscConfig+0x4b0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d106      	bne.n	8002d2a <HAL_RCC_OscConfig+0x31e>
 8002d1c:	4b66      	ldr	r3, [pc, #408]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d20:	4a65      	ldr	r2, [pc, #404]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6713      	str	r3, [r2, #112]	; 0x70
 8002d28:	e01c      	b.n	8002d64 <HAL_RCC_OscConfig+0x358>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b05      	cmp	r3, #5
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCC_OscConfig+0x340>
 8002d32:	4b61      	ldr	r3, [pc, #388]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	4a60      	ldr	r2, [pc, #384]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002d38:	f043 0304 	orr.w	r3, r3, #4
 8002d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3e:	4b5e      	ldr	r3, [pc, #376]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	4a5d      	ldr	r2, [pc, #372]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4a:	e00b      	b.n	8002d64 <HAL_RCC_OscConfig+0x358>
 8002d4c:	4b5a      	ldr	r3, [pc, #360]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	4a59      	ldr	r2, [pc, #356]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002d52:	f023 0301 	bic.w	r3, r3, #1
 8002d56:	6713      	str	r3, [r2, #112]	; 0x70
 8002d58:	4b57      	ldr	r3, [pc, #348]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a56      	ldr	r2, [pc, #344]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002d5e:	f023 0304 	bic.w	r3, r3, #4
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d015      	beq.n	8002d98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6c:	f7fe ff82 	bl	8001c74 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d74:	f7fe ff7e 	bl	8001c74 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e0d7      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8a:	4b4b      	ldr	r3, [pc, #300]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0ee      	beq.n	8002d74 <HAL_RCC_OscConfig+0x368>
 8002d96:	e014      	b.n	8002dc2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d98:	f7fe ff6c 	bl	8001c74 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da0:	f7fe ff68 	bl	8001c74 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e0c1      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db6:	4b40      	ldr	r3, [pc, #256]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1ee      	bne.n	8002da0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d105      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc8:	4b3b      	ldr	r3, [pc, #236]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	4a3a      	ldr	r2, [pc, #232]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80ad 	beq.w	8002f38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dde:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d060      	beq.n	8002eac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d145      	bne.n	8002e7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df2:	4b33      	ldr	r3, [pc, #204]	; (8002ec0 <HAL_RCC_OscConfig+0x4b4>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df8:	f7fe ff3c 	bl	8001c74 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e00:	f7fe ff38 	bl	8001c74 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e093      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e12:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	019b      	lsls	r3, r3, #6
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	085b      	lsrs	r3, r3, #1
 8002e36:	3b01      	subs	r3, #1
 8002e38:	041b      	lsls	r3, r3, #16
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	061b      	lsls	r3, r3, #24
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	071b      	lsls	r3, r3, #28
 8002e4a:	491b      	ldr	r1, [pc, #108]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HAL_RCC_OscConfig+0x4b4>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e56:	f7fe ff0d 	bl	8001c74 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5e:	f7fe ff09 	bl	8001c74 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e064      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x452>
 8002e7c:	e05c      	b.n	8002f38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HAL_RCC_OscConfig+0x4b4>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe fef6 	bl	8001c74 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fe fef2 	bl	8001c74 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e04d      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x480>
 8002eaa:	e045      	b.n	8002f38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d107      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e040      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40007000 	.word	0x40007000
 8002ec0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ec4:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <HAL_RCC_OscConfig+0x538>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d030      	beq.n	8002f34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d129      	bne.n	8002f34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d122      	bne.n	8002f34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002efa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d119      	bne.n	8002f34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	085b      	lsrs	r3, r3, #1
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d10f      	bne.n	8002f34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800

08002f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e041      	b.n	8002fde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fe fa52 	bl	8001418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	f000 fdb6 	bl	8003af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e041      	b.n	800307c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f839 	bl	8003084 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3304      	adds	r3, #4
 8003022:	4619      	mov	r1, r3
 8003024:	4610      	mov	r0, r2
 8003026:	f000 fd67 	bl	8003af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_TIM_PWM_Start+0x24>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	e022      	b.n	8003102 <HAL_TIM_PWM_Start+0x6a>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d109      	bne.n	80030d6 <HAL_TIM_PWM_Start+0x3e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	e015      	b.n	8003102 <HAL_TIM_PWM_Start+0x6a>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d109      	bne.n	80030f0 <HAL_TIM_PWM_Start+0x58>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e008      	b.n	8003102 <HAL_TIM_PWM_Start+0x6a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e07c      	b.n	8003204 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d104      	bne.n	800311a <HAL_TIM_PWM_Start+0x82>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003118:	e013      	b.n	8003142 <HAL_TIM_PWM_Start+0xaa>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b04      	cmp	r3, #4
 800311e:	d104      	bne.n	800312a <HAL_TIM_PWM_Start+0x92>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003128:	e00b      	b.n	8003142 <HAL_TIM_PWM_Start+0xaa>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d104      	bne.n	800313a <HAL_TIM_PWM_Start+0xa2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003138:	e003      	b.n	8003142 <HAL_TIM_PWM_Start+0xaa>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2202      	movs	r2, #2
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2201      	movs	r2, #1
 8003148:	6839      	ldr	r1, [r7, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f000 ffbe 	bl	80040cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2d      	ldr	r2, [pc, #180]	; (800320c <HAL_TIM_PWM_Start+0x174>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_TIM_PWM_Start+0xcc>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a2c      	ldr	r2, [pc, #176]	; (8003210 <HAL_TIM_PWM_Start+0x178>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d101      	bne.n	8003168 <HAL_TIM_PWM_Start+0xd0>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <HAL_TIM_PWM_Start+0xd2>
 8003168:	2300      	movs	r3, #0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800317c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a22      	ldr	r2, [pc, #136]	; (800320c <HAL_TIM_PWM_Start+0x174>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d022      	beq.n	80031ce <HAL_TIM_PWM_Start+0x136>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d01d      	beq.n	80031ce <HAL_TIM_PWM_Start+0x136>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <HAL_TIM_PWM_Start+0x17c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d018      	beq.n	80031ce <HAL_TIM_PWM_Start+0x136>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1d      	ldr	r2, [pc, #116]	; (8003218 <HAL_TIM_PWM_Start+0x180>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <HAL_TIM_PWM_Start+0x136>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1c      	ldr	r2, [pc, #112]	; (800321c <HAL_TIM_PWM_Start+0x184>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00e      	beq.n	80031ce <HAL_TIM_PWM_Start+0x136>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a16      	ldr	r2, [pc, #88]	; (8003210 <HAL_TIM_PWM_Start+0x178>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d009      	beq.n	80031ce <HAL_TIM_PWM_Start+0x136>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a18      	ldr	r2, [pc, #96]	; (8003220 <HAL_TIM_PWM_Start+0x188>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d004      	beq.n	80031ce <HAL_TIM_PWM_Start+0x136>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a16      	ldr	r2, [pc, #88]	; (8003224 <HAL_TIM_PWM_Start+0x18c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d111      	bne.n	80031f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b06      	cmp	r3, #6
 80031de:	d010      	beq.n	8003202 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f0:	e007      	b.n	8003202 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40010000 	.word	0x40010000
 8003210:	40010400 	.word	0x40010400
 8003214:	40000400 	.word	0x40000400
 8003218:	40000800 	.word	0x40000800
 800321c:	40000c00 	.word	0x40000c00
 8003220:	40014000 	.word	0x40014000
 8003224:	40001800 	.word	0x40001800

08003228 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e041      	b.n	80032c0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d106      	bne.n	8003256 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f839 	bl	80032c8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2202      	movs	r2, #2
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	4619      	mov	r1, r3
 8003268:	4610      	mov	r0, r2
 800326a:	f000 fc45 	bl	8003af8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0208 	bic.w	r2, r2, #8
 800327c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e097      	b.n	8003420 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d106      	bne.n	800330a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7fe f917 	bl	8001538 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003320:	f023 0307 	bic.w	r3, r3, #7
 8003324:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3304      	adds	r3, #4
 800332e:	4619      	mov	r1, r3
 8003330:	4610      	mov	r0, r2
 8003332:	f000 fbe1 	bl	8003af8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800335e:	f023 0303 	bic.w	r3, r3, #3
 8003362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	4313      	orrs	r3, r2
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800337c:	f023 030c 	bic.w	r3, r3, #12
 8003380:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003388:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800338c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	4313      	orrs	r3, r2
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	011a      	lsls	r2, r3, #4
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	031b      	lsls	r3, r3, #12
 80033ac:	4313      	orrs	r3, r2
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80033ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80033c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	4313      	orrs	r3, r2
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003438:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003440:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003448:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003450:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d110      	bne.n	800347a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d102      	bne.n	8003464 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800345e:	7b7b      	ldrb	r3, [r7, #13]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d001      	beq.n	8003468 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e089      	b.n	800357c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003478:	e031      	b.n	80034de <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b04      	cmp	r3, #4
 800347e:	d110      	bne.n	80034a2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003480:	7bbb      	ldrb	r3, [r7, #14]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d102      	bne.n	800348c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003486:	7b3b      	ldrb	r3, [r7, #12]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d001      	beq.n	8003490 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e075      	b.n	800357c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034a0:	e01d      	b.n	80034de <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d108      	bne.n	80034ba <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034a8:	7bbb      	ldrb	r3, [r7, #14]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d105      	bne.n	80034ba <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034ae:	7b7b      	ldrb	r3, [r7, #13]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d102      	bne.n	80034ba <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034b4:	7b3b      	ldrb	r3, [r7, #12]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d001      	beq.n	80034be <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e05e      	b.n	800357c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2202      	movs	r2, #2
 80034ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_TIM_Encoder_Start_IT+0xc4>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d010      	beq.n	800350c <HAL_TIM_Encoder_Start_IT+0xe4>
 80034ea:	e01f      	b.n	800352c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2201      	movs	r2, #1
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fde9 	bl	80040cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0202 	orr.w	r2, r2, #2
 8003508:	60da      	str	r2, [r3, #12]
      break;
 800350a:	e02e      	b.n	800356a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2201      	movs	r2, #1
 8003512:	2104      	movs	r1, #4
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fdd9 	bl	80040cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0204 	orr.w	r2, r2, #4
 8003528:	60da      	str	r2, [r3, #12]
      break;
 800352a:	e01e      	b.n	800356a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2201      	movs	r2, #1
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fdc9 	bl	80040cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2201      	movs	r2, #1
 8003540:	2104      	movs	r1, #4
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fdc2 	bl	80040cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0202 	orr.w	r2, r2, #2
 8003556:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0204 	orr.w	r2, r2, #4
 8003566:	60da      	str	r2, [r3, #12]
      break;
 8003568:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b02      	cmp	r3, #2
 8003598:	d122      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d11b      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0202 	mvn.w	r2, #2
 80035b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fc ff9e 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fa73 	bl	8003aba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fa7a 	bl	8003ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d122      	bne.n	8003634 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d11b      	bne.n	8003634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0204 	mvn.w	r2, #4
 8003604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fc ff74 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8003620:	e005      	b.n	800362e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fa49 	bl	8003aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fa50 	bl	8003ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b08      	cmp	r3, #8
 8003640:	d122      	bne.n	8003688 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b08      	cmp	r3, #8
 800364e:	d11b      	bne.n	8003688 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0208 	mvn.w	r2, #8
 8003658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2204      	movs	r2, #4
 800365e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fc ff4a 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8003674:	e005      	b.n	8003682 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fa1f 	bl	8003aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fa26 	bl	8003ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	2b10      	cmp	r3, #16
 8003694:	d122      	bne.n	80036dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b10      	cmp	r3, #16
 80036a2:	d11b      	bne.n	80036dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0210 	mvn.w	r2, #16
 80036ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2208      	movs	r2, #8
 80036b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7fc ff20 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 80036c8:	e005      	b.n	80036d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f9f5 	bl	8003aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f9fc 	bl	8003ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d10e      	bne.n	8003708 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d107      	bne.n	8003708 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0201 	mvn.w	r2, #1
 8003700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f9cf 	bl	8003aa6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b80      	cmp	r3, #128	; 0x80
 8003714:	d10e      	bne.n	8003734 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003720:	2b80      	cmp	r3, #128	; 0x80
 8003722:	d107      	bne.n	8003734 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800372c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fdca 	bl	80042c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d10e      	bne.n	8003760 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d107      	bne.n	8003760 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f9c1 	bl	8003ae2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b20      	cmp	r3, #32
 800376c:	d10e      	bne.n	800378c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b20      	cmp	r3, #32
 800377a:	d107      	bne.n	800378c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0220 	mvn.w	r2, #32
 8003784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fd94 	bl	80042b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800378c:	bf00      	nop
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e0ae      	b.n	8003910 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b0c      	cmp	r3, #12
 80037be:	f200 809f 	bhi.w	8003900 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037c2:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	080037fd 	.word	0x080037fd
 80037cc:	08003901 	.word	0x08003901
 80037d0:	08003901 	.word	0x08003901
 80037d4:	08003901 	.word	0x08003901
 80037d8:	0800383d 	.word	0x0800383d
 80037dc:	08003901 	.word	0x08003901
 80037e0:	08003901 	.word	0x08003901
 80037e4:	08003901 	.word	0x08003901
 80037e8:	0800387f 	.word	0x0800387f
 80037ec:	08003901 	.word	0x08003901
 80037f0:	08003901 	.word	0x08003901
 80037f4:	08003901 	.word	0x08003901
 80037f8:	080038bf 	.word	0x080038bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fa18 	bl	8003c38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0208 	orr.w	r2, r2, #8
 8003816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0204 	bic.w	r2, r2, #4
 8003826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6999      	ldr	r1, [r3, #24]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	619a      	str	r2, [r3, #24]
      break;
 800383a:	e064      	b.n	8003906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fa68 	bl	8003d18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6999      	ldr	r1, [r3, #24]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	021a      	lsls	r2, r3, #8
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	619a      	str	r2, [r3, #24]
      break;
 800387c:	e043      	b.n	8003906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fabd 	bl	8003e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0208 	orr.w	r2, r2, #8
 8003898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69da      	ldr	r2, [r3, #28]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0204 	bic.w	r2, r2, #4
 80038a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69d9      	ldr	r1, [r3, #28]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	61da      	str	r2, [r3, #28]
      break;
 80038bc:	e023      	b.n	8003906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fb11 	bl	8003eec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69d9      	ldr	r1, [r3, #28]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	021a      	lsls	r2, r3, #8
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	61da      	str	r2, [r3, #28]
      break;
 80038fe:	e002      	b.n	8003906 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	75fb      	strb	r3, [r7, #23]
      break;
 8003904:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800390e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_TIM_ConfigClockSource+0x1c>
 8003930:	2302      	movs	r3, #2
 8003932:	e0b4      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x186>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800395a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800396c:	d03e      	beq.n	80039ec <HAL_TIM_ConfigClockSource+0xd4>
 800396e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003972:	f200 8087 	bhi.w	8003a84 <HAL_TIM_ConfigClockSource+0x16c>
 8003976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397a:	f000 8086 	beq.w	8003a8a <HAL_TIM_ConfigClockSource+0x172>
 800397e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003982:	d87f      	bhi.n	8003a84 <HAL_TIM_ConfigClockSource+0x16c>
 8003984:	2b70      	cmp	r3, #112	; 0x70
 8003986:	d01a      	beq.n	80039be <HAL_TIM_ConfigClockSource+0xa6>
 8003988:	2b70      	cmp	r3, #112	; 0x70
 800398a:	d87b      	bhi.n	8003a84 <HAL_TIM_ConfigClockSource+0x16c>
 800398c:	2b60      	cmp	r3, #96	; 0x60
 800398e:	d050      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x11a>
 8003990:	2b60      	cmp	r3, #96	; 0x60
 8003992:	d877      	bhi.n	8003a84 <HAL_TIM_ConfigClockSource+0x16c>
 8003994:	2b50      	cmp	r3, #80	; 0x50
 8003996:	d03c      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0xfa>
 8003998:	2b50      	cmp	r3, #80	; 0x50
 800399a:	d873      	bhi.n	8003a84 <HAL_TIM_ConfigClockSource+0x16c>
 800399c:	2b40      	cmp	r3, #64	; 0x40
 800399e:	d058      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x13a>
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	d86f      	bhi.n	8003a84 <HAL_TIM_ConfigClockSource+0x16c>
 80039a4:	2b30      	cmp	r3, #48	; 0x30
 80039a6:	d064      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x15a>
 80039a8:	2b30      	cmp	r3, #48	; 0x30
 80039aa:	d86b      	bhi.n	8003a84 <HAL_TIM_ConfigClockSource+0x16c>
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d060      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x15a>
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d867      	bhi.n	8003a84 <HAL_TIM_ConfigClockSource+0x16c>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d05c      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x15a>
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d05a      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x15a>
 80039bc:	e062      	b.n	8003a84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6899      	ldr	r1, [r3, #8]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f000 fb5d 	bl	800408c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	609a      	str	r2, [r3, #8]
      break;
 80039ea:	e04f      	b.n	8003a8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	6899      	ldr	r1, [r3, #8]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f000 fb46 	bl	800408c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a0e:	609a      	str	r2, [r3, #8]
      break;
 8003a10:	e03c      	b.n	8003a8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6859      	ldr	r1, [r3, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f000 faba 	bl	8003f98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2150      	movs	r1, #80	; 0x50
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fb13 	bl	8004056 <TIM_ITRx_SetConfig>
      break;
 8003a30:	e02c      	b.n	8003a8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f000 fad9 	bl	8003ff6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2160      	movs	r1, #96	; 0x60
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fb03 	bl	8004056 <TIM_ITRx_SetConfig>
      break;
 8003a50:	e01c      	b.n	8003a8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f000 fa9a 	bl	8003f98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2140      	movs	r1, #64	; 0x40
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 faf3 	bl	8004056 <TIM_ITRx_SetConfig>
      break;
 8003a70:	e00c      	b.n	8003a8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	f000 faea 	bl	8004056 <TIM_ITRx_SetConfig>
      break;
 8003a82:	e003      	b.n	8003a8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      break;
 8003a88:	e000      	b.n	8003a8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a40      	ldr	r2, [pc, #256]	; (8003c0c <TIM_Base_SetConfig+0x114>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d013      	beq.n	8003b38 <TIM_Base_SetConfig+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b16:	d00f      	beq.n	8003b38 <TIM_Base_SetConfig+0x40>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a3d      	ldr	r2, [pc, #244]	; (8003c10 <TIM_Base_SetConfig+0x118>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00b      	beq.n	8003b38 <TIM_Base_SetConfig+0x40>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a3c      	ldr	r2, [pc, #240]	; (8003c14 <TIM_Base_SetConfig+0x11c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d007      	beq.n	8003b38 <TIM_Base_SetConfig+0x40>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a3b      	ldr	r2, [pc, #236]	; (8003c18 <TIM_Base_SetConfig+0x120>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <TIM_Base_SetConfig+0x40>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a3a      	ldr	r2, [pc, #232]	; (8003c1c <TIM_Base_SetConfig+0x124>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d108      	bne.n	8003b4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a2f      	ldr	r2, [pc, #188]	; (8003c0c <TIM_Base_SetConfig+0x114>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d02b      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b58:	d027      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a2c      	ldr	r2, [pc, #176]	; (8003c10 <TIM_Base_SetConfig+0x118>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d023      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a2b      	ldr	r2, [pc, #172]	; (8003c14 <TIM_Base_SetConfig+0x11c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01f      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a2a      	ldr	r2, [pc, #168]	; (8003c18 <TIM_Base_SetConfig+0x120>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d01b      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a29      	ldr	r2, [pc, #164]	; (8003c1c <TIM_Base_SetConfig+0x124>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d017      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a28      	ldr	r2, [pc, #160]	; (8003c20 <TIM_Base_SetConfig+0x128>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a27      	ldr	r2, [pc, #156]	; (8003c24 <TIM_Base_SetConfig+0x12c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00f      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a26      	ldr	r2, [pc, #152]	; (8003c28 <TIM_Base_SetConfig+0x130>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00b      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a25      	ldr	r2, [pc, #148]	; (8003c2c <TIM_Base_SetConfig+0x134>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d007      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a24      	ldr	r2, [pc, #144]	; (8003c30 <TIM_Base_SetConfig+0x138>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d003      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a23      	ldr	r2, [pc, #140]	; (8003c34 <TIM_Base_SetConfig+0x13c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d108      	bne.n	8003bbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <TIM_Base_SetConfig+0x114>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_Base_SetConfig+0xf8>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a0c      	ldr	r2, [pc, #48]	; (8003c1c <TIM_Base_SetConfig+0x124>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d103      	bne.n	8003bf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	615a      	str	r2, [r3, #20]
}
 8003bfe:	bf00      	nop
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40010000 	.word	0x40010000
 8003c10:	40000400 	.word	0x40000400
 8003c14:	40000800 	.word	0x40000800
 8003c18:	40000c00 	.word	0x40000c00
 8003c1c:	40010400 	.word	0x40010400
 8003c20:	40014000 	.word	0x40014000
 8003c24:	40014400 	.word	0x40014400
 8003c28:	40014800 	.word	0x40014800
 8003c2c:	40001800 	.word	0x40001800
 8003c30:	40001c00 	.word	0x40001c00
 8003c34:	40002000 	.word	0x40002000

08003c38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f023 0201 	bic.w	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0303 	bic.w	r3, r3, #3
 8003c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f023 0302 	bic.w	r3, r3, #2
 8003c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a20      	ldr	r2, [pc, #128]	; (8003d10 <TIM_OC1_SetConfig+0xd8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_OC1_SetConfig+0x64>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <TIM_OC1_SetConfig+0xdc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d10c      	bne.n	8003cb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f023 0308 	bic.w	r3, r3, #8
 8003ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f023 0304 	bic.w	r3, r3, #4
 8003cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a15      	ldr	r2, [pc, #84]	; (8003d10 <TIM_OC1_SetConfig+0xd8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <TIM_OC1_SetConfig+0x8e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a14      	ldr	r2, [pc, #80]	; (8003d14 <TIM_OC1_SetConfig+0xdc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d111      	bne.n	8003cea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	621a      	str	r2, [r3, #32]
}
 8003d04:	bf00      	nop
 8003d06:	371c      	adds	r7, #28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	40010000 	.word	0x40010000
 8003d14:	40010400 	.word	0x40010400

08003d18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f023 0210 	bic.w	r2, r3, #16
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 0320 	bic.w	r3, r3, #32
 8003d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a22      	ldr	r2, [pc, #136]	; (8003dfc <TIM_OC2_SetConfig+0xe4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_OC2_SetConfig+0x68>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a21      	ldr	r2, [pc, #132]	; (8003e00 <TIM_OC2_SetConfig+0xe8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d10d      	bne.n	8003d9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a17      	ldr	r2, [pc, #92]	; (8003dfc <TIM_OC2_SetConfig+0xe4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <TIM_OC2_SetConfig+0x94>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a16      	ldr	r2, [pc, #88]	; (8003e00 <TIM_OC2_SetConfig+0xe8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d113      	bne.n	8003dd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003db2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40010000 	.word	0x40010000
 8003e00:	40010400 	.word	0x40010400

08003e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0303 	bic.w	r3, r3, #3
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a21      	ldr	r2, [pc, #132]	; (8003ee4 <TIM_OC3_SetConfig+0xe0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d003      	beq.n	8003e6a <TIM_OC3_SetConfig+0x66>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a20      	ldr	r2, [pc, #128]	; (8003ee8 <TIM_OC3_SetConfig+0xe4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d10d      	bne.n	8003e86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a16      	ldr	r2, [pc, #88]	; (8003ee4 <TIM_OC3_SetConfig+0xe0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d003      	beq.n	8003e96 <TIM_OC3_SetConfig+0x92>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <TIM_OC3_SetConfig+0xe4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d113      	bne.n	8003ebe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	621a      	str	r2, [r3, #32]
}
 8003ed8:	bf00      	nop
 8003eda:	371c      	adds	r7, #28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	40010000 	.word	0x40010000
 8003ee8:	40010400 	.word	0x40010400

08003eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	031b      	lsls	r3, r3, #12
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a12      	ldr	r2, [pc, #72]	; (8003f90 <TIM_OC4_SetConfig+0xa4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <TIM_OC4_SetConfig+0x68>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a11      	ldr	r2, [pc, #68]	; (8003f94 <TIM_OC4_SetConfig+0xa8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d109      	bne.n	8003f68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	019b      	lsls	r3, r3, #6
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40010000 	.word	0x40010000
 8003f94:	40010400 	.word	0x40010400

08003f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	f023 0201 	bic.w	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f023 030a 	bic.w	r3, r3, #10
 8003fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	621a      	str	r2, [r3, #32]
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b087      	sub	sp, #28
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	f023 0210 	bic.w	r2, r3, #16
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004020:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	031b      	lsls	r3, r3, #12
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004032:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	621a      	str	r2, [r3, #32]
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004056:	b480      	push	{r7}
 8004058:	b085      	sub	sp, #20
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	f043 0307 	orr.w	r3, r3, #7
 8004078:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	609a      	str	r2, [r3, #8]
}
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	021a      	lsls	r2, r3, #8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	609a      	str	r2, [r3, #8]
}
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	2201      	movs	r2, #1
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a1a      	ldr	r2, [r3, #32]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	401a      	ands	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	fa01 f303 	lsl.w	r3, r1, r3
 8004104:	431a      	orrs	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	621a      	str	r2, [r3, #32]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800412c:	2302      	movs	r3, #2
 800412e:	e05a      	b.n	80041e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a21      	ldr	r2, [pc, #132]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d022      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417c:	d01d      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1d      	ldr	r2, [pc, #116]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d018      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1b      	ldr	r2, [pc, #108]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1a      	ldr	r2, [pc, #104]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00e      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a18      	ldr	r2, [pc, #96]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d009      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a17      	ldr	r2, [pc, #92]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a15      	ldr	r2, [pc, #84]	; (800420c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d10c      	bne.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40010000 	.word	0x40010000
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40000800 	.word	0x40000800
 8004200:	40000c00 	.word	0x40000c00
 8004204:	40010400 	.word	0x40010400
 8004208:	40014000 	.word	0x40014000
 800420c:	40001800 	.word	0x40001800

08004210 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004228:	2302      	movs	r3, #2
 800422a:	e03d      	b.n	80042a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e03f      	b.n	800436e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fd fb12 	bl	800192c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2224      	movs	r2, #36	; 0x24
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800431e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fd8b 	bl	8004e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b08a      	sub	sp, #40	; 0x28
 800437a:	af02      	add	r7, sp, #8
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	603b      	str	r3, [r7, #0]
 8004382:	4613      	mov	r3, r2
 8004384:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b20      	cmp	r3, #32
 8004394:	f040 808c 	bne.w	80044b0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_UART_Receive+0x2e>
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e084      	b.n	80044b2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_UART_Receive+0x40>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e07d      	b.n	80044b2 <HAL_UART_Receive+0x13c>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2222      	movs	r2, #34	; 0x22
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043d2:	f7fd fc4f 	bl	8001c74 <HAL_GetTick>
 80043d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	88fa      	ldrh	r2, [r7, #6]
 80043e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ec:	d108      	bne.n	8004400 <HAL_UART_Receive+0x8a>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d104      	bne.n	8004400 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	e003      	b.n	8004408 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004410:	e043      	b.n	800449a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2200      	movs	r2, #0
 800441a:	2120      	movs	r1, #32
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fb05 	bl	8004a2c <UART_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e042      	b.n	80044b2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10c      	bne.n	800444c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	b29b      	uxth	r3, r3
 800443a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443e:	b29a      	uxth	r2, r3
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	3302      	adds	r3, #2
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	e01f      	b.n	800448c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004454:	d007      	beq.n	8004466 <HAL_UART_Receive+0xf0>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10a      	bne.n	8004474 <HAL_UART_Receive+0xfe>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	b2da      	uxtb	r2, r3
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	e008      	b.n	8004486 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004480:	b2da      	uxtb	r2, r3
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3301      	adds	r3, #1
 800448a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1b6      	bne.n	8004412 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	e000      	b.n	80044b2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80044b0:	2302      	movs	r3, #2
  }
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3720      	adds	r7, #32
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b0ba      	sub	sp, #232	; 0xe8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80044fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10f      	bne.n	8004522 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	d009      	beq.n	8004522 <HAL_UART_IRQHandler+0x66>
 800450e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fbd3 	bl	8004cc6 <UART_Receive_IT>
      return;
 8004520:	e256      	b.n	80049d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 80de 	beq.w	80046e8 <HAL_UART_IRQHandler+0x22c>
 800452c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d106      	bne.n	8004546 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800453c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80d1 	beq.w	80046e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00b      	beq.n	800456a <HAL_UART_IRQHandler+0xae>
 8004552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f043 0201 	orr.w	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800456a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00b      	beq.n	800458e <HAL_UART_IRQHandler+0xd2>
 8004576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	f043 0202 	orr.w	r2, r3, #2
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00b      	beq.n	80045b2 <HAL_UART_IRQHandler+0xf6>
 800459a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f043 0204 	orr.w	r2, r3, #4
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d011      	beq.n	80045e2 <HAL_UART_IRQHandler+0x126>
 80045be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d105      	bne.n	80045d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f043 0208 	orr.w	r2, r3, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 81ed 	beq.w	80049c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d008      	beq.n	800460a <HAL_UART_IRQHandler+0x14e>
 80045f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fb5e 	bl	8004cc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004614:	2b40      	cmp	r3, #64	; 0x40
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d103      	bne.n	8004636 <HAL_UART_IRQHandler+0x17a>
 800462e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004632:	2b00      	cmp	r3, #0
 8004634:	d04f      	beq.n	80046d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fa66 	bl	8004b08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004646:	2b40      	cmp	r3, #64	; 0x40
 8004648:	d141      	bne.n	80046ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3314      	adds	r3, #20
 8004650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004660:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004668:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3314      	adds	r3, #20
 8004672:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004676:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800467a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004682:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800468e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1d9      	bne.n	800464a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	2b00      	cmp	r3, #0
 800469c:	d013      	beq.n	80046c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	4a7d      	ldr	r2, [pc, #500]	; (8004898 <HAL_UART_IRQHandler+0x3dc>)
 80046a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fd fc93 	bl	8001fd6 <HAL_DMA_Abort_IT>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d016      	beq.n	80046e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046c0:	4610      	mov	r0, r2
 80046c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c4:	e00e      	b.n	80046e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f99a 	bl	8004a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046cc:	e00a      	b.n	80046e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f996 	bl	8004a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d4:	e006      	b.n	80046e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f992 	bl	8004a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80046e2:	e170      	b.n	80049c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e4:	bf00      	nop
    return;
 80046e6:	e16e      	b.n	80049c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	f040 814a 	bne.w	8004986 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 8143 	beq.w	8004986 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 813c 	beq.w	8004986 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800470e:	2300      	movs	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472e:	2b40      	cmp	r3, #64	; 0x40
 8004730:	f040 80b4 	bne.w	800489c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004740:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8140 	beq.w	80049ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800474e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004752:	429a      	cmp	r2, r3
 8004754:	f080 8139 	bcs.w	80049ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800475e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800476a:	f000 8088 	beq.w	800487e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	330c      	adds	r3, #12
 8004774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004784:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800478c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	330c      	adds	r3, #12
 8004796:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800479a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800479e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1d9      	bne.n	800476e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3314      	adds	r3, #20
 80047c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3314      	adds	r3, #20
 80047da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047ea:	e841 2300 	strex	r3, r2, [r1]
 80047ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e1      	bne.n	80047ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3314      	adds	r3, #20
 80047fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800480c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3314      	adds	r3, #20
 8004816:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800481a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800481c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004820:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e3      	bne.n	80047f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	330c      	adds	r3, #12
 8004842:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800484c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484e:	f023 0310 	bic.w	r3, r3, #16
 8004852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004860:	65ba      	str	r2, [r7, #88]	; 0x58
 8004862:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004866:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004868:	e841 2300 	strex	r3, r2, [r1]
 800486c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800486e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e3      	bne.n	800483c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	4618      	mov	r0, r3
 800487a:	f7fd fb3c 	bl	8001ef6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004886:	b29b      	uxth	r3, r3
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	b29b      	uxth	r3, r3
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f8c0 	bl	8004a14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004894:	e099      	b.n	80049ca <HAL_UART_IRQHandler+0x50e>
 8004896:	bf00      	nop
 8004898:	08004bcf 	.word	0x08004bcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 808b 	beq.w	80049ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80048b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8086 	beq.w	80049ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	330c      	adds	r3, #12
 80048c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	330c      	adds	r3, #12
 80048e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80048e6:	647a      	str	r2, [r7, #68]	; 0x44
 80048e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e3      	bne.n	80048c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3314      	adds	r3, #20
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	623b      	str	r3, [r7, #32]
   return(result);
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3314      	adds	r3, #20
 800491a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800491e:	633a      	str	r2, [r7, #48]	; 0x30
 8004920:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e3      	bne.n	80048fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	330c      	adds	r3, #12
 8004946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	e853 3f00 	ldrex	r3, [r3]
 800494e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0310 	bic.w	r3, r3, #16
 8004956:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004964:	61fa      	str	r2, [r7, #28]
 8004966:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004968:	69b9      	ldr	r1, [r7, #24]
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	e841 2300 	strex	r3, r2, [r1]
 8004970:	617b      	str	r3, [r7, #20]
   return(result);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e3      	bne.n	8004940 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800497c:	4619      	mov	r1, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f848 	bl	8004a14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004984:	e023      	b.n	80049ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498e:	2b00      	cmp	r3, #0
 8004990:	d009      	beq.n	80049a6 <HAL_UART_IRQHandler+0x4ea>
 8004992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f929 	bl	8004bf6 <UART_Transmit_IT>
    return;
 80049a4:	e014      	b.n	80049d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00e      	beq.n	80049d0 <HAL_UART_IRQHandler+0x514>
 80049b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d008      	beq.n	80049d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f969 	bl	8004c96 <UART_EndTransmit_IT>
    return;
 80049c4:	e004      	b.n	80049d0 <HAL_UART_IRQHandler+0x514>
    return;
 80049c6:	bf00      	nop
 80049c8:	e002      	b.n	80049d0 <HAL_UART_IRQHandler+0x514>
      return;
 80049ca:	bf00      	nop
 80049cc:	e000      	b.n	80049d0 <HAL_UART_IRQHandler+0x514>
      return;
 80049ce:	bf00      	nop
  }
}
 80049d0:	37e8      	adds	r7, #232	; 0xe8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop

080049d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b090      	sub	sp, #64	; 0x40
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a3c:	e050      	b.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a44:	d04c      	beq.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a4c:	f7fd f912 	bl	8001c74 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d241      	bcs.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	330c      	adds	r3, #12
 8004a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a7c:	637a      	str	r2, [r7, #52]	; 0x34
 8004a7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e5      	bne.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3314      	adds	r3, #20
 8004a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3314      	adds	r3, #20
 8004aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ab0:	623a      	str	r2, [r7, #32]
 8004ab2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	69f9      	ldr	r1, [r7, #28]
 8004ab6:	6a3a      	ldr	r2, [r7, #32]
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e5      	bne.n	8004a90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e00f      	b.n	8004b00 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	bf0c      	ite	eq
 8004af0:	2301      	moveq	r3, #1
 8004af2:	2300      	movne	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d09f      	beq.n	8004a3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3740      	adds	r7, #64	; 0x40
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b095      	sub	sp, #84	; 0x54
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b30:	643a      	str	r2, [r7, #64]	; 0x40
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e5      	bne.n	8004b10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3314      	adds	r3, #20
 8004b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f023 0301 	bic.w	r3, r3, #1
 8004b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3314      	adds	r3, #20
 8004b62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e5      	bne.n	8004b44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d119      	bne.n	8004bb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	330c      	adds	r3, #12
 8004b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f023 0310 	bic.w	r3, r3, #16
 8004b96:	647b      	str	r3, [r7, #68]	; 0x44
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	330c      	adds	r3, #12
 8004b9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ba0:	61ba      	str	r2, [r7, #24]
 8004ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	6979      	ldr	r1, [r7, #20]
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	613b      	str	r3, [r7, #16]
   return(result);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e5      	bne.n	8004b80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bc2:	bf00      	nop
 8004bc4:	3754      	adds	r7, #84	; 0x54
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f7ff ff09 	bl	8004a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b21      	cmp	r3, #33	; 0x21
 8004c08:	d13e      	bne.n	8004c88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c12:	d114      	bne.n	8004c3e <UART_Transmit_IT+0x48>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d110      	bne.n	8004c3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	1c9a      	adds	r2, r3, #2
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	621a      	str	r2, [r3, #32]
 8004c3c:	e008      	b.n	8004c50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	1c59      	adds	r1, r3, #1
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6211      	str	r1, [r2, #32]
 8004c48:	781a      	ldrb	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10f      	bne.n	8004c84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	e000      	b.n	8004c8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c88:	2302      	movs	r3, #2
  }
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff fe8e 	bl	80049d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b08c      	sub	sp, #48	; 0x30
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b22      	cmp	r3, #34	; 0x22
 8004cd8:	f040 80ab 	bne.w	8004e32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce4:	d117      	bne.n	8004d16 <UART_Receive_IT+0x50>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d113      	bne.n	8004d16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0e:	1c9a      	adds	r2, r3, #2
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	629a      	str	r2, [r3, #40]	; 0x28
 8004d14:	e026      	b.n	8004d64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d28:	d007      	beq.n	8004d3a <UART_Receive_IT+0x74>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10a      	bne.n	8004d48 <UART_Receive_IT+0x82>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	e008      	b.n	8004d5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	4619      	mov	r1, r3
 8004d72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d15a      	bne.n	8004e2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0220 	bic.w	r2, r2, #32
 8004d86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0201 	bic.w	r2, r2, #1
 8004da6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d135      	bne.n	8004e24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f023 0310 	bic.w	r3, r3, #16
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	330c      	adds	r3, #12
 8004ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dde:	623a      	str	r2, [r7, #32]
 8004de0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	69f9      	ldr	r1, [r7, #28]
 8004de4:	6a3a      	ldr	r2, [r7, #32]
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e5      	bne.n	8004dbe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b10      	cmp	r3, #16
 8004dfe:	d10a      	bne.n	8004e16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7ff fdf9 	bl	8004a14 <HAL_UARTEx_RxEventCallback>
 8004e22:	e002      	b.n	8004e2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff fde1 	bl	80049ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e002      	b.n	8004e34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e000      	b.n	8004e34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e32:	2302      	movs	r3, #2
  }
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3730      	adds	r7, #48	; 0x30
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e40:	b0c0      	sub	sp, #256	; 0x100
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e58:	68d9      	ldr	r1, [r3, #12]
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	ea40 0301 	orr.w	r3, r0, r1
 8004e64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e94:	f021 010c 	bic.w	r1, r1, #12
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb6:	6999      	ldr	r1, [r3, #24]
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	ea40 0301 	orr.w	r3, r0, r1
 8004ec2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4b8f      	ldr	r3, [pc, #572]	; (8005108 <UART_SetConfig+0x2cc>)
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d005      	beq.n	8004edc <UART_SetConfig+0xa0>
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	4b8d      	ldr	r3, [pc, #564]	; (800510c <UART_SetConfig+0x2d0>)
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d104      	bne.n	8004ee6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004edc:	f7fd fb52 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 8004ee0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ee4:	e003      	b.n	8004eee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ee6:	f7fd fb39 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8004eea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef8:	f040 810c 	bne.w	8005114 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f0e:	4622      	mov	r2, r4
 8004f10:	462b      	mov	r3, r5
 8004f12:	1891      	adds	r1, r2, r2
 8004f14:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f16:	415b      	adcs	r3, r3
 8004f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f1e:	4621      	mov	r1, r4
 8004f20:	eb12 0801 	adds.w	r8, r2, r1
 8004f24:	4629      	mov	r1, r5
 8004f26:	eb43 0901 	adc.w	r9, r3, r1
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f3e:	4690      	mov	r8, r2
 8004f40:	4699      	mov	r9, r3
 8004f42:	4623      	mov	r3, r4
 8004f44:	eb18 0303 	adds.w	r3, r8, r3
 8004f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f4c:	462b      	mov	r3, r5
 8004f4e:	eb49 0303 	adc.w	r3, r9, r3
 8004f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	18db      	adds	r3, r3, r3
 8004f6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004f70:	4613      	mov	r3, r2
 8004f72:	eb42 0303 	adc.w	r3, r2, r3
 8004f76:	657b      	str	r3, [r7, #84]	; 0x54
 8004f78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f80:	f7fb f940 	bl	8000204 <__aeabi_uldivmod>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4b61      	ldr	r3, [pc, #388]	; (8005110 <UART_SetConfig+0x2d4>)
 8004f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	011c      	lsls	r4, r3, #4
 8004f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fa4:	4642      	mov	r2, r8
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	1891      	adds	r1, r2, r2
 8004faa:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fac:	415b      	adcs	r3, r3
 8004fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	eb12 0a01 	adds.w	sl, r2, r1
 8004fba:	4649      	mov	r1, r9
 8004fbc:	eb43 0b01 	adc.w	fp, r3, r1
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fd4:	4692      	mov	sl, r2
 8004fd6:	469b      	mov	fp, r3
 8004fd8:	4643      	mov	r3, r8
 8004fda:	eb1a 0303 	adds.w	r3, sl, r3
 8004fde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	eb4b 0303 	adc.w	r3, fp, r3
 8004fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ff8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ffc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005000:	460b      	mov	r3, r1
 8005002:	18db      	adds	r3, r3, r3
 8005004:	643b      	str	r3, [r7, #64]	; 0x40
 8005006:	4613      	mov	r3, r2
 8005008:	eb42 0303 	adc.w	r3, r2, r3
 800500c:	647b      	str	r3, [r7, #68]	; 0x44
 800500e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005012:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005016:	f7fb f8f5 	bl	8000204 <__aeabi_uldivmod>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4611      	mov	r1, r2
 8005020:	4b3b      	ldr	r3, [pc, #236]	; (8005110 <UART_SetConfig+0x2d4>)
 8005022:	fba3 2301 	umull	r2, r3, r3, r1
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	2264      	movs	r2, #100	; 0x64
 800502a:	fb02 f303 	mul.w	r3, r2, r3
 800502e:	1acb      	subs	r3, r1, r3
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005036:	4b36      	ldr	r3, [pc, #216]	; (8005110 <UART_SetConfig+0x2d4>)
 8005038:	fba3 2302 	umull	r2, r3, r3, r2
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005044:	441c      	add	r4, r3
 8005046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800504a:	2200      	movs	r2, #0
 800504c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005050:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005054:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005058:	4642      	mov	r2, r8
 800505a:	464b      	mov	r3, r9
 800505c:	1891      	adds	r1, r2, r2
 800505e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005060:	415b      	adcs	r3, r3
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005064:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005068:	4641      	mov	r1, r8
 800506a:	1851      	adds	r1, r2, r1
 800506c:	6339      	str	r1, [r7, #48]	; 0x30
 800506e:	4649      	mov	r1, r9
 8005070:	414b      	adcs	r3, r1
 8005072:	637b      	str	r3, [r7, #52]	; 0x34
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005080:	4659      	mov	r1, fp
 8005082:	00cb      	lsls	r3, r1, #3
 8005084:	4651      	mov	r1, sl
 8005086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800508a:	4651      	mov	r1, sl
 800508c:	00ca      	lsls	r2, r1, #3
 800508e:	4610      	mov	r0, r2
 8005090:	4619      	mov	r1, r3
 8005092:	4603      	mov	r3, r0
 8005094:	4642      	mov	r2, r8
 8005096:	189b      	adds	r3, r3, r2
 8005098:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800509c:	464b      	mov	r3, r9
 800509e:	460a      	mov	r2, r1
 80050a0:	eb42 0303 	adc.w	r3, r2, r3
 80050a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050bc:	460b      	mov	r3, r1
 80050be:	18db      	adds	r3, r3, r3
 80050c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c2:	4613      	mov	r3, r2
 80050c4:	eb42 0303 	adc.w	r3, r2, r3
 80050c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050d2:	f7fb f897 	bl	8000204 <__aeabi_uldivmod>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	4b0d      	ldr	r3, [pc, #52]	; (8005110 <UART_SetConfig+0x2d4>)
 80050dc:	fba3 1302 	umull	r1, r3, r3, r2
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	2164      	movs	r1, #100	; 0x64
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	3332      	adds	r3, #50	; 0x32
 80050ee:	4a08      	ldr	r2, [pc, #32]	; (8005110 <UART_SetConfig+0x2d4>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	f003 0207 	and.w	r2, r3, #7
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4422      	add	r2, r4
 8005102:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005104:	e105      	b.n	8005312 <UART_SetConfig+0x4d6>
 8005106:	bf00      	nop
 8005108:	40011000 	.word	0x40011000
 800510c:	40011400 	.word	0x40011400
 8005110:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005118:	2200      	movs	r2, #0
 800511a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800511e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005122:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005126:	4642      	mov	r2, r8
 8005128:	464b      	mov	r3, r9
 800512a:	1891      	adds	r1, r2, r2
 800512c:	6239      	str	r1, [r7, #32]
 800512e:	415b      	adcs	r3, r3
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
 8005132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005136:	4641      	mov	r1, r8
 8005138:	1854      	adds	r4, r2, r1
 800513a:	4649      	mov	r1, r9
 800513c:	eb43 0501 	adc.w	r5, r3, r1
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	00eb      	lsls	r3, r5, #3
 800514a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800514e:	00e2      	lsls	r2, r4, #3
 8005150:	4614      	mov	r4, r2
 8005152:	461d      	mov	r5, r3
 8005154:	4643      	mov	r3, r8
 8005156:	18e3      	adds	r3, r4, r3
 8005158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800515c:	464b      	mov	r3, r9
 800515e:	eb45 0303 	adc.w	r3, r5, r3
 8005162:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005172:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005182:	4629      	mov	r1, r5
 8005184:	008b      	lsls	r3, r1, #2
 8005186:	4621      	mov	r1, r4
 8005188:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800518c:	4621      	mov	r1, r4
 800518e:	008a      	lsls	r2, r1, #2
 8005190:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005194:	f7fb f836 	bl	8000204 <__aeabi_uldivmod>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4b60      	ldr	r3, [pc, #384]	; (8005320 <UART_SetConfig+0x4e4>)
 800519e:	fba3 2302 	umull	r2, r3, r3, r2
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	011c      	lsls	r4, r3, #4
 80051a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051b8:	4642      	mov	r2, r8
 80051ba:	464b      	mov	r3, r9
 80051bc:	1891      	adds	r1, r2, r2
 80051be:	61b9      	str	r1, [r7, #24]
 80051c0:	415b      	adcs	r3, r3
 80051c2:	61fb      	str	r3, [r7, #28]
 80051c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051c8:	4641      	mov	r1, r8
 80051ca:	1851      	adds	r1, r2, r1
 80051cc:	6139      	str	r1, [r7, #16]
 80051ce:	4649      	mov	r1, r9
 80051d0:	414b      	adcs	r3, r1
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051e0:	4659      	mov	r1, fp
 80051e2:	00cb      	lsls	r3, r1, #3
 80051e4:	4651      	mov	r1, sl
 80051e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ea:	4651      	mov	r1, sl
 80051ec:	00ca      	lsls	r2, r1, #3
 80051ee:	4610      	mov	r0, r2
 80051f0:	4619      	mov	r1, r3
 80051f2:	4603      	mov	r3, r0
 80051f4:	4642      	mov	r2, r8
 80051f6:	189b      	adds	r3, r3, r2
 80051f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051fc:	464b      	mov	r3, r9
 80051fe:	460a      	mov	r2, r1
 8005200:	eb42 0303 	adc.w	r3, r2, r3
 8005204:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	67bb      	str	r3, [r7, #120]	; 0x78
 8005212:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005220:	4649      	mov	r1, r9
 8005222:	008b      	lsls	r3, r1, #2
 8005224:	4641      	mov	r1, r8
 8005226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800522a:	4641      	mov	r1, r8
 800522c:	008a      	lsls	r2, r1, #2
 800522e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005232:	f7fa ffe7 	bl	8000204 <__aeabi_uldivmod>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4b39      	ldr	r3, [pc, #228]	; (8005320 <UART_SetConfig+0x4e4>)
 800523c:	fba3 1302 	umull	r1, r3, r3, r2
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	2164      	movs	r1, #100	; 0x64
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	3332      	adds	r3, #50	; 0x32
 800524e:	4a34      	ldr	r2, [pc, #208]	; (8005320 <UART_SetConfig+0x4e4>)
 8005250:	fba2 2303 	umull	r2, r3, r2, r3
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800525a:	441c      	add	r4, r3
 800525c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005260:	2200      	movs	r2, #0
 8005262:	673b      	str	r3, [r7, #112]	; 0x70
 8005264:	677a      	str	r2, [r7, #116]	; 0x74
 8005266:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800526a:	4642      	mov	r2, r8
 800526c:	464b      	mov	r3, r9
 800526e:	1891      	adds	r1, r2, r2
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	415b      	adcs	r3, r3
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800527a:	4641      	mov	r1, r8
 800527c:	1851      	adds	r1, r2, r1
 800527e:	6039      	str	r1, [r7, #0]
 8005280:	4649      	mov	r1, r9
 8005282:	414b      	adcs	r3, r1
 8005284:	607b      	str	r3, [r7, #4]
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005292:	4659      	mov	r1, fp
 8005294:	00cb      	lsls	r3, r1, #3
 8005296:	4651      	mov	r1, sl
 8005298:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800529c:	4651      	mov	r1, sl
 800529e:	00ca      	lsls	r2, r1, #3
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	4603      	mov	r3, r0
 80052a6:	4642      	mov	r2, r8
 80052a8:	189b      	adds	r3, r3, r2
 80052aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80052ac:	464b      	mov	r3, r9
 80052ae:	460a      	mov	r2, r1
 80052b0:	eb42 0303 	adc.w	r3, r2, r3
 80052b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	663b      	str	r3, [r7, #96]	; 0x60
 80052c0:	667a      	str	r2, [r7, #100]	; 0x64
 80052c2:	f04f 0200 	mov.w	r2, #0
 80052c6:	f04f 0300 	mov.w	r3, #0
 80052ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052ce:	4649      	mov	r1, r9
 80052d0:	008b      	lsls	r3, r1, #2
 80052d2:	4641      	mov	r1, r8
 80052d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052d8:	4641      	mov	r1, r8
 80052da:	008a      	lsls	r2, r1, #2
 80052dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052e0:	f7fa ff90 	bl	8000204 <__aeabi_uldivmod>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4b0d      	ldr	r3, [pc, #52]	; (8005320 <UART_SetConfig+0x4e4>)
 80052ea:	fba3 1302 	umull	r1, r3, r3, r2
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	2164      	movs	r1, #100	; 0x64
 80052f2:	fb01 f303 	mul.w	r3, r1, r3
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	3332      	adds	r3, #50	; 0x32
 80052fc:	4a08      	ldr	r2, [pc, #32]	; (8005320 <UART_SetConfig+0x4e4>)
 80052fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	f003 020f 	and.w	r2, r3, #15
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4422      	add	r2, r4
 8005310:	609a      	str	r2, [r3, #8]
}
 8005312:	bf00      	nop
 8005314:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005318:	46bd      	mov	sp, r7
 800531a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800531e:	bf00      	nop
 8005320:	51eb851f 	.word	0x51eb851f

08005324 <__libc_init_array>:
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	4d0d      	ldr	r5, [pc, #52]	; (800535c <__libc_init_array+0x38>)
 8005328:	4c0d      	ldr	r4, [pc, #52]	; (8005360 <__libc_init_array+0x3c>)
 800532a:	1b64      	subs	r4, r4, r5
 800532c:	10a4      	asrs	r4, r4, #2
 800532e:	2600      	movs	r6, #0
 8005330:	42a6      	cmp	r6, r4
 8005332:	d109      	bne.n	8005348 <__libc_init_array+0x24>
 8005334:	4d0b      	ldr	r5, [pc, #44]	; (8005364 <__libc_init_array+0x40>)
 8005336:	4c0c      	ldr	r4, [pc, #48]	; (8005368 <__libc_init_array+0x44>)
 8005338:	f000 f820 	bl	800537c <_init>
 800533c:	1b64      	subs	r4, r4, r5
 800533e:	10a4      	asrs	r4, r4, #2
 8005340:	2600      	movs	r6, #0
 8005342:	42a6      	cmp	r6, r4
 8005344:	d105      	bne.n	8005352 <__libc_init_array+0x2e>
 8005346:	bd70      	pop	{r4, r5, r6, pc}
 8005348:	f855 3b04 	ldr.w	r3, [r5], #4
 800534c:	4798      	blx	r3
 800534e:	3601      	adds	r6, #1
 8005350:	e7ee      	b.n	8005330 <__libc_init_array+0xc>
 8005352:	f855 3b04 	ldr.w	r3, [r5], #4
 8005356:	4798      	blx	r3
 8005358:	3601      	adds	r6, #1
 800535a:	e7f2      	b.n	8005342 <__libc_init_array+0x1e>
 800535c:	080053b4 	.word	0x080053b4
 8005360:	080053b4 	.word	0x080053b4
 8005364:	080053b4 	.word	0x080053b4
 8005368:	080053b8 	.word	0x080053b8

0800536c <memset>:
 800536c:	4402      	add	r2, r0
 800536e:	4603      	mov	r3, r0
 8005370:	4293      	cmp	r3, r2
 8005372:	d100      	bne.n	8005376 <memset+0xa>
 8005374:	4770      	bx	lr
 8005376:	f803 1b01 	strb.w	r1, [r3], #1
 800537a:	e7f9      	b.n	8005370 <memset+0x4>

0800537c <_init>:
 800537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537e:	bf00      	nop
 8005380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005382:	bc08      	pop	{r3}
 8005384:	469e      	mov	lr, r3
 8005386:	4770      	bx	lr

08005388 <_fini>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	bf00      	nop
 800538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538e:	bc08      	pop	{r3}
 8005390:	469e      	mov	lr, r3
 8005392:	4770      	bx	lr
