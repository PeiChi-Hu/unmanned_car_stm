
voltage_sensor0803.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057d4  080057d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080057d4  080057d4  000157d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057dc  080057dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057dc  080057dc  000157dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057e0  080057e0  000157e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080057e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  2000000c  080057f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  080057f0  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff28  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fab  00000000  00000000  0002ff64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  00031f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00032d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ee4  00000000  00000000  00033a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108e1  00000000  00000000  0005695c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc822  00000000  00000000  0006723d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143a5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ba0  00000000  00000000  00143ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080057a4 	.word	0x080057a4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080057a4 	.word	0x080057a4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_TIM_IC_CaptureCallback>:

uint8_t Rx_data[1];
int i=0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a20      	ldr	r2, [pc, #128]	; (8000594 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d10a      	bne.n	800052e <HAL_TIM_IC_CaptureCallback+0x26>
		counter2 = __HAL_TIM_GET_COUNTER(htim);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051e:	4a1e      	ldr	r2, [pc, #120]	; (8000598 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000520:	6013      	str	r3, [r2, #0]
		count2 = (int16_t)counter2;
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	b21a      	sxth	r2, r3
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <HAL_TIM_IC_CaptureCallback+0x94>)
 800052a:	801a      	strh	r2, [r3, #0]
	else if(htim == &htim5){
			counter5 = __HAL_TIM_GET_COUNTER(htim);
			count5 = (int16_t)counter5;
		}

}
 800052c:	e02b      	b.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
	else if(htim == &htim3){
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a1b      	ldr	r2, [pc, #108]	; (80005a0 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d10a      	bne.n	800054c <HAL_TIM_IC_CaptureCallback+0x44>
			counter3 = __HAL_TIM_GET_COUNTER(htim);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053c:	4a19      	ldr	r2, [pc, #100]	; (80005a4 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800053e:	6013      	str	r3, [r2, #0]
			count3 = (int16_t)counter3;
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	b21a      	sxth	r2, r3
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000548:	801a      	strh	r2, [r3, #0]
}
 800054a:	e01c      	b.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
	else if(htim == &htim4){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a17      	ldr	r2, [pc, #92]	; (80005ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d10a      	bne.n	800056a <HAL_TIM_IC_CaptureCallback+0x62>
			counter4 = __HAL_TIM_GET_COUNTER(htim);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055a:	4a15      	ldr	r2, [pc, #84]	; (80005b0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800055c:	6013      	str	r3, [r2, #0]
			count4 = (int16_t)counter4;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	b21a      	sxth	r2, r3
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000566:	801a      	strh	r2, [r3, #0]
}
 8000568:	e00d      	b.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
	else if(htim == &htim5){
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d109      	bne.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
			counter5 = __HAL_TIM_GET_COUNTER(htim);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000578:	4a10      	ldr	r2, [pc, #64]	; (80005bc <HAL_TIM_IC_CaptureCallback+0xb4>)
 800057a:	6013      	str	r3, [r2, #0]
			count5 = (int16_t)counter5;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_TIM_IC_CaptureCallback+0xb4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	b21a      	sxth	r2, r3
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000584:	801a      	strh	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	200000b8 	.word	0x200000b8
 8000598:	200003d0 	.word	0x200003d0
 800059c:	200003e0 	.word	0x200003e0
 80005a0:	20000100 	.word	0x20000100
 80005a4:	200003d4 	.word	0x200003d4
 80005a8:	200003e2 	.word	0x200003e2
 80005ac:	20000148 	.word	0x20000148
 80005b0:	200003d8 	.word	0x200003d8
 80005b4:	200003e4 	.word	0x200003e4
 80005b8:	20000190 	.word	0x20000190
 80005bc:	200003dc 	.word	0x200003dc
 80005c0:	200003e6 	.word	0x200003e6

080005c4 <Voltage>:
	htim13.Instance->CCR1 = speed3;
	htim14.Instance->CCR1 = speed4;
}

void Voltage(ADC_HandleTypeDef* hadc)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	  HAL_ADC_PollForConversion(hadc,1000);
 80005cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f001 fbdd 	bl	8001d90 <HAL_ADC_PollForConversion>
	  readValue = HAL_ADC_GetValue(hadc);
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f001 fc65 	bl	8001ea6 <HAL_ADC_GetValue>
 80005dc:	4603      	mov	r3, r0
 80005de:	b29a      	uxth	r2, r3
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <Voltage+0x50>)
 80005e2:	801a      	strh	r2, [r3, #0]
	  voltage =(float)readValue/4095*16.5;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <Voltage+0x50>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	ee07 3a90 	vmov	s15, r3
 80005ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005f0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000618 <Voltage+0x54>
 80005f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005f8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800061c <Voltage+0x58>
 80005fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <Voltage+0x5c>)
 8000602:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(100);
 8000606:	2064      	movs	r0, #100	; 0x64
 8000608:	f001 fa88 	bl	8001b1c <HAL_Delay>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200003c8 	.word	0x200003c8
 8000618:	457ff000 	.word	0x457ff000
 800061c:	41840000 	.word	0x41840000
 8000620:	200003cc 	.word	0x200003cc

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f001 fa06 	bl	8001a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f88c 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 fd2c 	bl	800108c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000634:	f000 fcd6 	bl	8000fe4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000638:	f000 f944 	bl	80008c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800063c:	f000 fa10 	bl	8000a60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000640:	f000 fa62 	bl	8000b08 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000644:	f000 fab4 	bl	8000bb0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000648:	f000 fb06 	bl	8000c58 <MX_TIM5_Init>
  MX_TIM10_Init();
 800064c:	f000 fb58 	bl	8000d00 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000650:	f000 fba4 	bl	8000d9c <MX_TIM11_Init>
  MX_TIM12_Init();
 8000654:	f000 fbc6 	bl	8000de4 <MX_TIM12_Init>
  MX_TIM14_Init();
 8000658:	f000 fc76 	bl	8000f48 <MX_TIM14_Init>
  MX_TIM13_Init();
 800065c:	f000 fc26 	bl	8000eac <MX_TIM13_Init>
  MX_USART3_UART_Init();
 8000660:	f000 fcea 	bl	8001038 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000664:	f000 f8dc 	bl	8000820 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000668:	213c      	movs	r1, #60	; 0x3c
 800066a:	482d      	ldr	r0, [pc, #180]	; (8000720 <main+0xfc>)
 800066c:	f003 fa00 	bl	8003a70 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000670:	213c      	movs	r1, #60	; 0x3c
 8000672:	482c      	ldr	r0, [pc, #176]	; (8000724 <main+0x100>)
 8000674:	f003 f9fc 	bl	8003a70 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000678:	213c      	movs	r1, #60	; 0x3c
 800067a:	482b      	ldr	r0, [pc, #172]	; (8000728 <main+0x104>)
 800067c:	f003 f9f8 	bl	8003a70 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000680:	213c      	movs	r1, #60	; 0x3c
 8000682:	482a      	ldr	r0, [pc, #168]	; (800072c <main+0x108>)
 8000684:	f003 f9f4 	bl	8003a70 <HAL_TIM_Encoder_Start_IT>

  // start DC motor PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000688:	2100      	movs	r1, #0
 800068a:	4829      	ldr	r0, [pc, #164]	; (8000730 <main+0x10c>)
 800068c:	f003 f828 	bl	80036e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000690:	2104      	movs	r1, #4
 8000692:	4827      	ldr	r0, [pc, #156]	; (8000730 <main+0x10c>)
 8000694:	f003 f824 	bl	80036e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000698:	2108      	movs	r1, #8
 800069a:	4825      	ldr	r0, [pc, #148]	; (8000730 <main+0x10c>)
 800069c:	f003 f820 	bl	80036e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80006a0:	210c      	movs	r1, #12
 80006a2:	4823      	ldr	r0, [pc, #140]	; (8000730 <main+0x10c>)
 80006a4:	f003 f81c 	bl	80036e0 <HAL_TIM_PWM_Start>

  htim1.Instance-> CCR1 = 80;
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <main+0x10c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2250      	movs	r2, #80	; 0x50
 80006ae:	635a      	str	r2, [r3, #52]	; 0x34
  htim1.Instance-> CCR2 = 80;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <main+0x10c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2250      	movs	r2, #80	; 0x50
 80006b6:	639a      	str	r2, [r3, #56]	; 0x38
  htim1.Instance-> CCR3 = 80;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <main+0x10c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2250      	movs	r2, #80	; 0x50
 80006be:	63da      	str	r2, [r3, #60]	; 0x3c
  htim1.Instance-> CCR4 = 80;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <main+0x10c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2250      	movs	r2, #80	; 0x50
 80006c6:	641a      	str	r2, [r3, #64]	; 0x40

  // Servo PWM
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80006c8:	2100      	movs	r1, #0
 80006ca:	481a      	ldr	r0, [pc, #104]	; (8000734 <main+0x110>)
 80006cc:	f003 f808 	bl	80036e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80006d0:	2100      	movs	r1, #0
 80006d2:	4819      	ldr	r0, [pc, #100]	; (8000738 <main+0x114>)
 80006d4:	f003 f804 	bl	80036e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80006d8:	2100      	movs	r1, #0
 80006da:	4818      	ldr	r0, [pc, #96]	; (800073c <main+0x118>)
 80006dc:	f003 f800 	bl	80036e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80006e0:	2100      	movs	r1, #0
 80006e2:	4817      	ldr	r0, [pc, #92]	; (8000740 <main+0x11c>)
 80006e4:	f002 fffc 	bl	80036e0 <HAL_TIM_PWM_Start>

  htim10.Instance->CCR1 = 75;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <main+0x110>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	224b      	movs	r2, #75	; 0x4b
 80006ee:	635a      	str	r2, [r3, #52]	; 0x34
  htim12.Instance->CCR1 = 80;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <main+0x114>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2250      	movs	r2, #80	; 0x50
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34
  htim13.Instance->CCR1 = 100;
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <main+0x118>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2264      	movs	r2, #100	; 0x64
 80006fe:	635a      	str	r2, [r3, #52]	; 0x34
  htim14.Instance->CCR1 = 120;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <main+0x11c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2278      	movs	r2, #120	; 0x78
 8000706:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(1000);
 8000708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800070c:	f001 fa06 	bl	8001b1c <HAL_Delay>

  // voltage sensor
  HAL_ADC_Start(&hadc1);
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <main+0x120>)
 8000712:	f001 fa6b 	bl	8001bec <HAL_ADC_Start>
	  int pwm4=0;*/

	  //Servo(75+pwm1, 80+pwm2, 100+pwm3, 120+pwm4);
	  //DCmotor(speed1, speed2, speed3, speed4);

	  Voltage(&hadc1);
 8000716:	480b      	ldr	r0, [pc, #44]	; (8000744 <main+0x120>)
 8000718:	f7ff ff54 	bl	80005c4 <Voltage>
 800071c:	e7fb      	b.n	8000716 <main+0xf2>
 800071e:	bf00      	nop
 8000720:	200000b8 	.word	0x200000b8
 8000724:	20000100 	.word	0x20000100
 8000728:	20000148 	.word	0x20000148
 800072c:	20000190 	.word	0x20000190
 8000730:	20000070 	.word	0x20000070
 8000734:	200001d8 	.word	0x200001d8
 8000738:	20000268 	.word	0x20000268
 800073c:	200002b0 	.word	0x200002b0
 8000740:	200002f8 	.word	0x200002f8
 8000744:	20000028 	.word	0x20000028

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b094      	sub	sp, #80	; 0x50
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2234      	movs	r2, #52	; 0x34
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f005 f81c 	bl	8005794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <SystemClock_Config+0xd0>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	4a28      	ldr	r2, [pc, #160]	; (8000818 <SystemClock_Config+0xd0>)
 8000776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	4b26      	ldr	r3, [pc, #152]	; (8000818 <SystemClock_Config+0xd0>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000788:	2300      	movs	r3, #0
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	4b23      	ldr	r3, [pc, #140]	; (800081c <SystemClock_Config+0xd4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000794:	4a21      	ldr	r2, [pc, #132]	; (800081c <SystemClock_Config+0xd4>)
 8000796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <SystemClock_Config+0xd4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a8:	2302      	movs	r3, #2
 80007aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b0:	2310      	movs	r3, #16
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007bc:	2308      	movs	r3, #8
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 80007c0:	2340      	movs	r3, #64	; 0x40
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fc3d 	bl	8003054 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007e0:	f000 fcf0 	bl	80011c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e8:	2302      	movs	r3, #2
 80007ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	2101      	movs	r1, #1
 8000800:	4618      	mov	r0, r3
 8000802:	f002 f8dd 	bl	80029c0 <HAL_RCC_ClockConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800080c:	f000 fcda 	bl	80011c4 <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	3750      	adds	r7, #80	; 0x50
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000826:	463b      	mov	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_ADC1_Init+0x98>)
 8000834:	4a21      	ldr	r2, [pc, #132]	; (80008bc <MX_ADC1_Init+0x9c>)
 8000836:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_ADC1_Init+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_ADC1_Init+0x98>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_ADC1_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_ADC1_Init+0x98>)
 800084c:	2201      	movs	r2, #1
 800084e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_ADC1_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_ADC1_Init+0x98>)
 800085a:	2200      	movs	r2, #0
 800085c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_ADC1_Init+0x98>)
 8000860:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <MX_ADC1_Init+0xa0>)
 8000862:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_ADC1_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_ADC1_Init+0x98>)
 800086c:	2201      	movs	r2, #1
 800086e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_ADC1_Init+0x98>)
 8000872:	2200      	movs	r2, #0
 8000874:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_ADC1_Init+0x98>)
 800087a:	2201      	movs	r2, #1
 800087c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800087e:	480e      	ldr	r0, [pc, #56]	; (80008b8 <MX_ADC1_Init+0x98>)
 8000880:	f001 f970 	bl	8001b64 <HAL_ADC_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 fc9b 	bl	80011c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800088e:	2308      	movs	r3, #8
 8000890:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089a:	463b      	mov	r3, r7
 800089c:	4619      	mov	r1, r3
 800089e:	4806      	ldr	r0, [pc, #24]	; (80008b8 <MX_ADC1_Init+0x98>)
 80008a0:	f001 fb0e 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008aa:	f000 fc8b 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000028 	.word	0x20000028
 80008bc:	40012000 	.word	0x40012000
 80008c0:	0f000001 	.word	0x0f000001

080008c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b096      	sub	sp, #88	; 0x58
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2220      	movs	r2, #32
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f004 ff49 	bl	8005794 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000902:	4b55      	ldr	r3, [pc, #340]	; (8000a58 <MX_TIM1_Init+0x194>)
 8000904:	4a55      	ldr	r2, [pc, #340]	; (8000a5c <MX_TIM1_Init+0x198>)
 8000906:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000908:	4b53      	ldr	r3, [pc, #332]	; (8000a58 <MX_TIM1_Init+0x194>)
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b52      	ldr	r3, [pc, #328]	; (8000a58 <MX_TIM1_Init+0x194>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000914:	4b50      	ldr	r3, [pc, #320]	; (8000a58 <MX_TIM1_Init+0x194>)
 8000916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800091a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091c:	4b4e      	ldr	r3, [pc, #312]	; (8000a58 <MX_TIM1_Init+0x194>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000922:	4b4d      	ldr	r3, [pc, #308]	; (8000a58 <MX_TIM1_Init+0x194>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000928:	4b4b      	ldr	r3, [pc, #300]	; (8000a58 <MX_TIM1_Init+0x194>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800092e:	484a      	ldr	r0, [pc, #296]	; (8000a58 <MX_TIM1_Init+0x194>)
 8000930:	f002 fe2e 	bl	8003590 <HAL_TIM_Base_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800093a:	f000 fc43 	bl	80011c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000942:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000944:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000948:	4619      	mov	r1, r3
 800094a:	4843      	ldr	r0, [pc, #268]	; (8000a58 <MX_TIM1_Init+0x194>)
 800094c:	f003 fb08 	bl	8003f60 <HAL_TIM_ConfigClockSource>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000956:	f000 fc35 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800095a:	483f      	ldr	r0, [pc, #252]	; (8000a58 <MX_TIM1_Init+0x194>)
 800095c:	f002 fe67 	bl	800362e <HAL_TIM_PWM_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000966:	f000 fc2d 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800096a:	2108      	movs	r1, #8
 800096c:	483a      	ldr	r0, [pc, #232]	; (8000a58 <MX_TIM1_Init+0x194>)
 800096e:	f002 ff7f 	bl	8003870 <HAL_TIM_OnePulse_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000978:	f000 fc24 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097c:	2300      	movs	r3, #0
 800097e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000984:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000988:	4619      	mov	r1, r3
 800098a:	4833      	ldr	r0, [pc, #204]	; (8000a58 <MX_TIM1_Init+0x194>)
 800098c:	f003 fee8 	bl	8004760 <HAL_TIMEx_MasterConfigSynchronization>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000996:	f000 fc15 	bl	80011c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099a:	2360      	movs	r3, #96	; 0x60
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	2200      	movs	r2, #0
 80009bc:	4619      	mov	r1, r3
 80009be:	4826      	ldr	r0, [pc, #152]	; (8000a58 <MX_TIM1_Init+0x194>)
 80009c0:	f003 fa0c 	bl	8003ddc <HAL_TIM_PWM_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80009ca:	f000 fbfb 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	2204      	movs	r2, #4
 80009d4:	4619      	mov	r1, r3
 80009d6:	4820      	ldr	r0, [pc, #128]	; (8000a58 <MX_TIM1_Init+0x194>)
 80009d8:	f003 fa00 	bl	8003ddc <HAL_TIM_PWM_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 80009e2:	f000 fbef 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ea:	2208      	movs	r2, #8
 80009ec:	4619      	mov	r1, r3
 80009ee:	481a      	ldr	r0, [pc, #104]	; (8000a58 <MX_TIM1_Init+0x194>)
 80009f0:	f003 f9f4 	bl	8003ddc <HAL_TIM_PWM_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80009fa:	f000 fbe3 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	220c      	movs	r2, #12
 8000a04:	4619      	mov	r1, r3
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <MX_TIM1_Init+0x194>)
 8000a08:	f003 f9e8 	bl	8003ddc <HAL_TIM_PWM_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000a12:	f000 fbd7 	bl	80011c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	4619      	mov	r1, r3
 8000a38:	4807      	ldr	r0, [pc, #28]	; (8000a58 <MX_TIM1_Init+0x194>)
 8000a3a:	f003 ff0d 	bl	8004858 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8000a44:	f000 fbbe 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <MX_TIM1_Init+0x194>)
 8000a4a:	f000 fde1 	bl	8001610 <HAL_TIM_MspPostInit>

}
 8000a4e:	bf00      	nop
 8000a50:	3758      	adds	r7, #88	; 0x58
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000070 	.word	0x20000070
 8000a5c:	40010000 	.word	0x40010000

08000a60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08c      	sub	sp, #48	; 0x30
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2224      	movs	r2, #36	; 0x24
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f004 fe90 	bl	8005794 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a7c:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_TIM2_Init+0xa4>)
 8000a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a84:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_TIM2_Init+0xa4>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <MX_TIM2_Init+0xa4>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a90:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_TIM2_Init+0xa4>)
 8000a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_TIM2_Init+0xa4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_TIM2_Init+0xa4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aac:	2301      	movs	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000abc:	2301      	movs	r3, #1
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	4619      	mov	r1, r3
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_TIM2_Init+0xa4>)
 8000ad0:	f002 ff28 	bl	8003924 <HAL_TIM_Encoder_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000ada:	f000 fb73 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4806      	ldr	r0, [pc, #24]	; (8000b04 <MX_TIM2_Init+0xa4>)
 8000aec:	f003 fe38 	bl	8004760 <HAL_TIMEx_MasterConfigSynchronization>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000af6:	f000 fb65 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	3730      	adds	r7, #48	; 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200000b8 	.word	0x200000b8

08000b08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	; 0x30
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	2224      	movs	r2, #36	; 0x24
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f004 fe3c 	bl	8005794 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b24:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <MX_TIM3_Init+0xa0>)
 8000b26:	4a21      	ldr	r2, [pc, #132]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_TIM3_Init+0xa0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_TIM3_Init+0xa0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_TIM3_Init+0xa0>)
 8000b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_TIM3_Init+0xa0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_TIM3_Init+0xa0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b52:	2301      	movs	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b62:	2301      	movs	r3, #1
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	4619      	mov	r1, r3
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_TIM3_Init+0xa0>)
 8000b76:	f002 fed5 	bl	8003924 <HAL_TIM_Encoder_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000b80:	f000 fb20 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_TIM3_Init+0xa0>)
 8000b92:	f003 fde5 	bl	8004760 <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b9c:	f000 fb12 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3730      	adds	r7, #48	; 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000100 	.word	0x20000100
 8000bac:	40000400 	.word	0x40000400

08000bb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	2224      	movs	r2, #36	; 0x24
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f004 fde8 	bl	8005794 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bcc:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <MX_TIM4_Init+0xa0>)
 8000bce:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <MX_TIM4_Init+0xa4>)
 8000bd0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_TIM4_Init+0xa0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <MX_TIM4_Init+0xa0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_TIM4_Init+0xa0>)
 8000be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_TIM4_Init+0xa0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <MX_TIM4_Init+0xa0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <MX_TIM4_Init+0xa0>)
 8000c1e:	f002 fe81 	bl	8003924 <HAL_TIM_Encoder_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000c28:	f000 facc 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_TIM4_Init+0xa0>)
 8000c3a:	f003 fd91 	bl	8004760 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000c44:	f000 fabe 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3730      	adds	r7, #48	; 0x30
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000148 	.word	0x20000148
 8000c54:	40000800 	.word	0x40000800

08000c58 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	2224      	movs	r2, #36	; 0x24
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f004 fd94 	bl	8005794 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c74:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <MX_TIM5_Init+0xa0>)
 8000c76:	4a21      	ldr	r2, [pc, #132]	; (8000cfc <MX_TIM5_Init+0xa4>)
 8000c78:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <MX_TIM5_Init+0xa0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_TIM5_Init+0xa0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <MX_TIM5_Init+0xa0>)
 8000c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_TIM5_Init+0xa0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_TIM5_Init+0xa0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <MX_TIM5_Init+0xa0>)
 8000cc6:	f002 fe2d 	bl	8003924 <HAL_TIM_Encoder_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000cd0:	f000 fa78 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_TIM5_Init+0xa0>)
 8000ce2:	f003 fd3d 	bl	8004760 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000cec:	f000 fa6a 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	3730      	adds	r7, #48	; 0x30
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000190 	.word	0x20000190
 8000cfc:	40000c00 	.word	0x40000c00

08000d00 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000d18:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <MX_TIM10_Init+0x94>)
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <MX_TIM10_Init+0x98>)
 8000d1c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 640;
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_TIM10_Init+0x94>)
 8000d20:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000d24:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d26:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <MX_TIM10_Init+0x94>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <MX_TIM10_Init+0x94>)
 8000d2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d32:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_TIM10_Init+0x94>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_TIM10_Init+0x94>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000d40:	4814      	ldr	r0, [pc, #80]	; (8000d94 <MX_TIM10_Init+0x94>)
 8000d42:	f002 fc25 	bl	8003590 <HAL_TIM_Base_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8000d4c:	f000 fa3a 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000d50:	4810      	ldr	r0, [pc, #64]	; (8000d94 <MX_TIM10_Init+0x94>)
 8000d52:	f002 fc6c 	bl	800362e <HAL_TIM_PWM_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8000d5c:	f000 fa32 	bl	80011c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d60:	2360      	movs	r3, #96	; 0x60
 8000d62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	4807      	ldr	r0, [pc, #28]	; (8000d94 <MX_TIM10_Init+0x94>)
 8000d78:	f003 f830 	bl	8003ddc <HAL_TIM_PWM_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8000d82:	f000 fa1f 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000d86:	4803      	ldr	r0, [pc, #12]	; (8000d94 <MX_TIM10_Init+0x94>)
 8000d88:	f000 fc42 	bl	8001610 <HAL_TIM_MspPostInit>

}
 8000d8c:	bf00      	nop
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200001d8 	.word	0x200001d8
 8000d98:	40014400 	.word	0x40014400

08000d9c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_TIM11_Init+0x40>)
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <MX_TIM11_Init+0x44>)
 8000da4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <MX_TIM11_Init+0x40>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_TIM11_Init+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <MX_TIM11_Init+0x40>)
 8000db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_TIM11_Init+0x40>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_TIM11_Init+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_TIM11_Init+0x40>)
 8000dc8:	f002 fbe2 	bl	8003590 <HAL_TIM_Base_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000dd2:	f000 f9f7 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000220 	.word	0x20000220
 8000de0:	40014800 	.word	0x40014800

08000de4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08c      	sub	sp, #48	; 0x30
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dea:	f107 0320 	add.w	r3, r7, #32
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]
 8000e06:	615a      	str	r2, [r3, #20]
 8000e08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000e0a:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <MX_TIM12_Init+0xc0>)
 8000e0c:	4a26      	ldr	r2, [pc, #152]	; (8000ea8 <MX_TIM12_Init+0xc4>)
 8000e0e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 640;
 8000e10:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <MX_TIM12_Init+0xc0>)
 8000e12:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000e16:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <MX_TIM12_Init+0xc0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <MX_TIM12_Init+0xc0>)
 8000e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e24:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e26:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <MX_TIM12_Init+0xc0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_TIM12_Init+0xc0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000e32:	481c      	ldr	r0, [pc, #112]	; (8000ea4 <MX_TIM12_Init+0xc0>)
 8000e34:	f002 fbac 	bl	8003590 <HAL_TIM_Base_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8000e3e:	f000 f9c1 	bl	80011c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e46:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000e48:	f107 0320 	add.w	r3, r7, #32
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4815      	ldr	r0, [pc, #84]	; (8000ea4 <MX_TIM12_Init+0xc0>)
 8000e50:	f003 f886 	bl	8003f60 <HAL_TIM_ConfigClockSource>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8000e5a:	f000 f9b3 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000e5e:	4811      	ldr	r0, [pc, #68]	; (8000ea4 <MX_TIM12_Init+0xc0>)
 8000e60:	f002 fbe5 	bl	800362e <HAL_TIM_PWM_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8000e6a:	f000 f9ab 	bl	80011c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e6e:	2360      	movs	r3, #96	; 0x60
 8000e70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	4619      	mov	r1, r3
 8000e84:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <MX_TIM12_Init+0xc0>)
 8000e86:	f002 ffa9 	bl	8003ddc <HAL_TIM_PWM_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8000e90:	f000 f998 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000e94:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <MX_TIM12_Init+0xc0>)
 8000e96:	f000 fbbb 	bl	8001610 <HAL_TIM_MspPostInit>

}
 8000e9a:	bf00      	nop
 8000e9c:	3730      	adds	r7, #48	; 0x30
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000268 	.word	0x20000268
 8000ea8:	40001800 	.word	0x40001800

08000eac <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]
 8000ec2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <MX_TIM13_Init+0x94>)
 8000ec6:	4a1f      	ldr	r2, [pc, #124]	; (8000f44 <MX_TIM13_Init+0x98>)
 8000ec8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 640;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <MX_TIM13_Init+0x94>)
 8000ecc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000ed0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_TIM13_Init+0x94>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <MX_TIM13_Init+0x94>)
 8000eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ede:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <MX_TIM13_Init+0x94>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MX_TIM13_Init+0x94>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000eec:	4814      	ldr	r0, [pc, #80]	; (8000f40 <MX_TIM13_Init+0x94>)
 8000eee:	f002 fb4f 	bl	8003590 <HAL_TIM_Base_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8000ef8:	f000 f964 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000efc:	4810      	ldr	r0, [pc, #64]	; (8000f40 <MX_TIM13_Init+0x94>)
 8000efe:	f002 fb96 	bl	800362e <HAL_TIM_PWM_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8000f08:	f000 f95c 	bl	80011c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f0c:	2360      	movs	r3, #96	; 0x60
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4619      	mov	r1, r3
 8000f22:	4807      	ldr	r0, [pc, #28]	; (8000f40 <MX_TIM13_Init+0x94>)
 8000f24:	f002 ff5a 	bl	8003ddc <HAL_TIM_PWM_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8000f2e:	f000 f949 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <MX_TIM13_Init+0x94>)
 8000f34:	f000 fb6c 	bl	8001610 <HAL_TIM_MspPostInit>

}
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200002b0 	.word	0x200002b0
 8000f44:	40001c00 	.word	0x40001c00

08000f48 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
 8000f5c:	615a      	str	r2, [r3, #20]
 8000f5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_TIM14_Init+0x94>)
 8000f62:	4a1f      	ldr	r2, [pc, #124]	; (8000fe0 <MX_TIM14_Init+0x98>)
 8000f64:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 640;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_TIM14_Init+0x94>)
 8000f68:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000f6c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_TIM14_Init+0x94>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_TIM14_Init+0x94>)
 8000f76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f7a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <MX_TIM14_Init+0x94>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_TIM14_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f88:	4814      	ldr	r0, [pc, #80]	; (8000fdc <MX_TIM14_Init+0x94>)
 8000f8a:	f002 fb01 	bl	8003590 <HAL_TIM_Base_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8000f94:	f000 f916 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000f98:	4810      	ldr	r0, [pc, #64]	; (8000fdc <MX_TIM14_Init+0x94>)
 8000f9a:	f002 fb48 	bl	800362e <HAL_TIM_PWM_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8000fa4:	f000 f90e 	bl	80011c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa8:	2360      	movs	r3, #96	; 0x60
 8000faa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4807      	ldr	r0, [pc, #28]	; (8000fdc <MX_TIM14_Init+0x94>)
 8000fc0:	f002 ff0c 	bl	8003ddc <HAL_TIM_PWM_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8000fca:	f000 f8fb 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000fce:	4803      	ldr	r0, [pc, #12]	; (8000fdc <MX_TIM14_Init+0x94>)
 8000fd0:	f000 fb1e 	bl	8001610 <HAL_TIM_MspPostInit>

}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200002f8 	.word	0x200002f8
 8000fe0:	40002000 	.word	0x40002000

08000fe4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_USART2_UART_Init+0x4c>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	; (8001034 <MX_USART2_UART_Init+0x50>)
 8000fec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <MX_USART2_UART_Init+0x4c>)
 8000ff0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ff4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_USART2_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_USART2_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <MX_USART2_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_USART2_UART_Init+0x4c>)
 800100a:	220c      	movs	r2, #12
 800100c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <MX_USART2_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_USART2_UART_Init+0x4c>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_USART2_UART_Init+0x4c>)
 800101c:	f003 fc82 	bl	8004924 <HAL_UART_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001026:	f000 f8cd 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000340 	.word	0x20000340
 8001034:	40004400 	.word	0x40004400

08001038 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <MX_USART3_UART_Init+0x50>)
 8001040:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001044:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001048:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 800105e:	220c      	movs	r2, #12
 8001060:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001070:	f003 fc58 	bl	8004924 <HAL_UART_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800107a:	f000 f8a3 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000384 	.word	0x20000384
 8001088:	40004800 	.word	0x40004800

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <MX_GPIO_Init+0x128>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a42      	ldr	r2, [pc, #264]	; (80011b4 <MX_GPIO_Init+0x128>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b40      	ldr	r3, [pc, #256]	; (80011b4 <MX_GPIO_Init+0x128>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <MX_GPIO_Init+0x128>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a3b      	ldr	r2, [pc, #236]	; (80011b4 <MX_GPIO_Init+0x128>)
 80010c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <MX_GPIO_Init+0x128>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <MX_GPIO_Init+0x128>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a34      	ldr	r2, [pc, #208]	; (80011b4 <MX_GPIO_Init+0x128>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <MX_GPIO_Init+0x128>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <MX_GPIO_Init+0x128>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a2d      	ldr	r2, [pc, #180]	; (80011b4 <MX_GPIO_Init+0x128>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <MX_GPIO_Init+0x128>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DC4_1_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001118:	4827      	ldr	r0, [pc, #156]	; (80011b8 <MX_GPIO_Init+0x12c>)
 800111a:	f001 fc37 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DC3_2_Pin|DC4_2_Pin|DC2_2_Pin|DC2_1_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 7154 	mov.w	r1, #848	; 0x350
 8001124:	4825      	ldr	r0, [pc, #148]	; (80011bc <MX_GPIO_Init+0x130>)
 8001126:	f001 fc31 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC1_1_Pin|DC1_2_Pin|DC3_1_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f242 0106 	movw	r1, #8198	; 0x2006
 8001130:	4823      	ldr	r0, [pc, #140]	; (80011c0 <MX_GPIO_Init+0x134>)
 8001132:	f001 fc2b 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800113c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	481b      	ldr	r0, [pc, #108]	; (80011bc <MX_GPIO_Init+0x130>)
 800114e:	f001 fa89 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DC4_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DC4_1_Pin;
 8001152:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	4813      	ldr	r0, [pc, #76]	; (80011b8 <MX_GPIO_Init+0x12c>)
 800116c:	f001 fa7a 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC3_2_Pin DC4_2_Pin DC2_2_Pin DC2_1_Pin */
  GPIO_InitStruct.Pin = DC3_2_Pin|DC4_2_Pin|DC2_2_Pin|DC2_1_Pin;
 8001170:	f44f 7354 	mov.w	r3, #848	; 0x350
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <MX_GPIO_Init+0x130>)
 800118a:	f001 fa6b 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC1_1_Pin DC1_2_Pin DC3_1_Pin */
  GPIO_InitStruct.Pin = DC1_1_Pin|DC1_2_Pin|DC3_1_Pin;
 800118e:	f242 0306 	movw	r3, #8198	; 0x2006
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <MX_GPIO_Init+0x134>)
 80011a8:	f001 fa5c 	bl	8002664 <HAL_GPIO_Init>

}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	; 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020800 	.word	0x40020800
 80011c0:	40020400 	.word	0x40020400

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011cc:	e7fe      	b.n	80011cc <Error_Handler+0x8>
	...

080011d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_MspInit+0x4c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a0f      	ldr	r2, [pc, #60]	; (800121c <HAL_MspInit+0x4c>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <HAL_MspInit+0x4c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_MspInit+0x4c>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_MspInit+0x4c>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_MspInit+0x4c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800120e:	2007      	movs	r0, #7
 8001210:	f001 f954 	bl	80024bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800

08001220 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_ADC_MspInit+0x7c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d127      	bne.n	8001292 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 800124c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800127a:	2301      	movs	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127e:	2303      	movs	r3, #3
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <HAL_ADC_MspInit+0x84>)
 800128e:	f001 f9e9 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40012000 	.word	0x40012000
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020400 	.word	0x40020400

080012a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a3d      	ldr	r2, [pc, #244]	; (80013ac <HAL_TIM_Base_MspInit+0x104>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d10e      	bne.n	80012d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	4a3b      	ldr	r2, [pc, #236]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80012d6:	e062      	b.n	800139e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM10)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a35      	ldr	r2, [pc, #212]	; (80013b4 <HAL_TIM_Base_MspInit+0x10c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d10e      	bne.n	8001300 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
 80012e6:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	4a31      	ldr	r2, [pc, #196]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
 80012f2:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	61bb      	str	r3, [r7, #24]
 80012fc:	69bb      	ldr	r3, [r7, #24]
}
 80012fe:	e04e      	b.n	800139e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM11)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a2c      	ldr	r2, [pc, #176]	; (80013b8 <HAL_TIM_Base_MspInit+0x110>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d10e      	bne.n	8001328 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
}
 8001326:	e03a      	b.n	800139e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM12)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a23      	ldr	r2, [pc, #140]	; (80013bc <HAL_TIM_Base_MspInit+0x114>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d10e      	bne.n	8001350 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 800133c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
}
 800134e:	e026      	b.n	800139e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM13)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a1a      	ldr	r2, [pc, #104]	; (80013c0 <HAL_TIM_Base_MspInit+0x118>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d10e      	bne.n	8001378 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a13      	ldr	r2, [pc, #76]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 8001364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
}
 8001376:	e012      	b.n	800139e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM14)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <HAL_TIM_Base_MspInit+0x11c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d10d      	bne.n	800139e <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <HAL_TIM_Base_MspInit+0x108>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
}
 800139e:	bf00      	nop
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40010000 	.word	0x40010000
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40014400 	.word	0x40014400
 80013b8:	40014800 	.word	0x40014800
 80013bc:	40001800 	.word	0x40001800
 80013c0:	40001c00 	.word	0x40001c00
 80013c4:	40002000 	.word	0x40002000

080013c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b090      	sub	sp, #64	; 0x40
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e8:	d154      	bne.n	8001494 <HAL_TIM_Encoder_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ee:	4b82      	ldr	r3, [pc, #520]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a81      	ldr	r2, [pc, #516]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b7f      	ldr	r3, [pc, #508]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
 8001404:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
 800140a:	4b7b      	ldr	r3, [pc, #492]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a7a      	ldr	r2, [pc, #488]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b78      	ldr	r3, [pc, #480]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
 8001426:	4b74      	ldr	r3, [pc, #464]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a73      	ldr	r2, [pc, #460]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b71      	ldr	r3, [pc, #452]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	623b      	str	r3, [r7, #32]
 800143c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800143e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001450:	2301      	movs	r3, #1
 8001452:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001458:	4619      	mov	r1, r3
 800145a:	4868      	ldr	r0, [pc, #416]	; (80015fc <HAL_TIM_Encoder_MspInit+0x234>)
 800145c:	f001 f902 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001472:	2301      	movs	r3, #1
 8001474:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800147a:	4619      	mov	r1, r3
 800147c:	4860      	ldr	r0, [pc, #384]	; (8001600 <HAL_TIM_Encoder_MspInit+0x238>)
 800147e:	f001 f8f1 	bl	8002664 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	201c      	movs	r0, #28
 8001488:	f001 f823 	bl	80024d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800148c:	201c      	movs	r0, #28
 800148e:	f001 f83c 	bl	800250a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001492:	e0ac      	b.n	80015ee <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM3)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a5a      	ldr	r2, [pc, #360]	; (8001604 <HAL_TIM_Encoder_MspInit+0x23c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d134      	bne.n	8001508 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	4b55      	ldr	r3, [pc, #340]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a54      	ldr	r2, [pc, #336]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b52      	ldr	r3, [pc, #328]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	4b4e      	ldr	r3, [pc, #312]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a4d      	ldr	r2, [pc, #308]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014d6:	2330      	movs	r3, #48	; 0x30
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014e6:	2302      	movs	r3, #2
 80014e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ee:	4619      	mov	r1, r3
 80014f0:	4843      	ldr	r0, [pc, #268]	; (8001600 <HAL_TIM_Encoder_MspInit+0x238>)
 80014f2:	f001 f8b7 	bl	8002664 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	201d      	movs	r0, #29
 80014fc:	f000 ffe9 	bl	80024d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001500:	201d      	movs	r0, #29
 8001502:	f001 f802 	bl	800250a <HAL_NVIC_EnableIRQ>
}
 8001506:	e072      	b.n	80015ee <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM4)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a3e      	ldr	r2, [pc, #248]	; (8001608 <HAL_TIM_Encoder_MspInit+0x240>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d134      	bne.n	800157c <HAL_TIM_Encoder_MspInit+0x1b4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a37      	ldr	r2, [pc, #220]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b35      	ldr	r3, [pc, #212]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a30      	ldr	r2, [pc, #192]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800154a:	23c0      	movs	r3, #192	; 0xc0
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800155a:	2302      	movs	r3, #2
 800155c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001562:	4619      	mov	r1, r3
 8001564:	4826      	ldr	r0, [pc, #152]	; (8001600 <HAL_TIM_Encoder_MspInit+0x238>)
 8001566:	f001 f87d 	bl	8002664 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	201e      	movs	r0, #30
 8001570:	f000 ffaf 	bl	80024d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001574:	201e      	movs	r0, #30
 8001576:	f000 ffc8 	bl	800250a <HAL_NVIC_EnableIRQ>
}
 800157a:	e038      	b.n	80015ee <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM5)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a22      	ldr	r2, [pc, #136]	; (800160c <HAL_TIM_Encoder_MspInit+0x244>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d133      	bne.n	80015ee <HAL_TIM_Encoder_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a1a      	ldr	r2, [pc, #104]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_TIM_Encoder_MspInit+0x230>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015be:	2303      	movs	r3, #3
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80015ce:	2302      	movs	r3, #2
 80015d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d6:	4619      	mov	r1, r3
 80015d8:	4808      	ldr	r0, [pc, #32]	; (80015fc <HAL_TIM_Encoder_MspInit+0x234>)
 80015da:	f001 f843 	bl	8002664 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	2032      	movs	r0, #50	; 0x32
 80015e4:	f000 ff75 	bl	80024d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80015e8:	2032      	movs	r0, #50	; 0x32
 80015ea:	f000 ff8e 	bl	800250a <HAL_NVIC_EnableIRQ>
}
 80015ee:	bf00      	nop
 80015f0:	3740      	adds	r7, #64	; 0x40
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020400 	.word	0x40020400
 8001604:	40000400 	.word	0x40000400
 8001608:	40000800 	.word	0x40000800
 800160c:	40000c00 	.word	0x40000c00

08001610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	; 0x30
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a5b      	ldr	r2, [pc, #364]	; (800179c <HAL_TIM_MspPostInit+0x18c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d11f      	bne.n	8001672 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
 8001636:	4b5a      	ldr	r3, [pc, #360]	; (80017a0 <HAL_TIM_MspPostInit+0x190>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a59      	ldr	r2, [pc, #356]	; (80017a0 <HAL_TIM_MspPostInit+0x190>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b57      	ldr	r3, [pc, #348]	; (80017a0 <HAL_TIM_MspPostInit+0x190>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800164e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001660:	2301      	movs	r3, #1
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	484e      	ldr	r0, [pc, #312]	; (80017a4 <HAL_TIM_MspPostInit+0x194>)
 800166c:	f000 fffa 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001670:	e090      	b.n	8001794 <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM10)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a4c      	ldr	r2, [pc, #304]	; (80017a8 <HAL_TIM_MspPostInit+0x198>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d11f      	bne.n	80016bc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <HAL_TIM_MspPostInit+0x190>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	4a46      	ldr	r2, [pc, #280]	; (80017a0 <HAL_TIM_MspPostInit+0x190>)
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	6313      	str	r3, [r2, #48]	; 0x30
 800168c:	4b44      	ldr	r3, [pc, #272]	; (80017a0 <HAL_TIM_MspPostInit+0x190>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80016aa:	2303      	movs	r3, #3
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	483d      	ldr	r0, [pc, #244]	; (80017ac <HAL_TIM_MspPostInit+0x19c>)
 80016b6:	f000 ffd5 	bl	8002664 <HAL_GPIO_Init>
}
 80016ba:	e06b      	b.n	8001794 <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM12)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a3b      	ldr	r2, [pc, #236]	; (80017b0 <HAL_TIM_MspPostInit+0x1a0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d11f      	bne.n	8001706 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <HAL_TIM_MspPostInit+0x190>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a34      	ldr	r2, [pc, #208]	; (80017a0 <HAL_TIM_MspPostInit+0x190>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <HAL_TIM_MspPostInit+0x190>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80016f4:	2309      	movs	r3, #9
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	482b      	ldr	r0, [pc, #172]	; (80017ac <HAL_TIM_MspPostInit+0x19c>)
 8001700:	f000 ffb0 	bl	8002664 <HAL_GPIO_Init>
}
 8001704:	e046      	b.n	8001794 <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM13)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a2a      	ldr	r2, [pc, #168]	; (80017b4 <HAL_TIM_MspPostInit+0x1a4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d11e      	bne.n	800174e <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <HAL_TIM_MspPostInit+0x190>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	4a21      	ldr	r2, [pc, #132]	; (80017a0 <HAL_TIM_MspPostInit+0x190>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6313      	str	r3, [r2, #48]	; 0x30
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <HAL_TIM_MspPostInit+0x190>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800172c:	2340      	movs	r3, #64	; 0x40
 800172e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800173c:	2309      	movs	r3, #9
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4619      	mov	r1, r3
 8001746:	4817      	ldr	r0, [pc, #92]	; (80017a4 <HAL_TIM_MspPostInit+0x194>)
 8001748:	f000 ff8c 	bl	8002664 <HAL_GPIO_Init>
}
 800174c:	e022      	b.n	8001794 <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM14)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <HAL_TIM_MspPostInit+0x1a8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d11d      	bne.n	8001794 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_TIM_MspPostInit+0x190>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <HAL_TIM_MspPostInit+0x190>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6313      	str	r3, [r2, #48]	; 0x30
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_TIM_MspPostInit+0x190>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001784:	2309      	movs	r3, #9
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <HAL_TIM_MspPostInit+0x194>)
 8001790:	f000 ff68 	bl	8002664 <HAL_GPIO_Init>
}
 8001794:	bf00      	nop
 8001796:	3730      	adds	r7, #48	; 0x30
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40010000 	.word	0x40010000
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40014400 	.word	0x40014400
 80017ac:	40020400 	.word	0x40020400
 80017b0:	40001800 	.word	0x40001800
 80017b4:	40001c00 	.word	0x40001c00
 80017b8:	40002000 	.word	0x40002000

080017bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08c      	sub	sp, #48	; 0x30
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a45      	ldr	r2, [pc, #276]	; (80018f0 <HAL_UART_MspInit+0x134>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d134      	bne.n	8001848 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
 80017e2:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <HAL_UART_MspInit+0x138>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	4a43      	ldr	r2, [pc, #268]	; (80018f4 <HAL_UART_MspInit+0x138>)
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	6413      	str	r3, [r2, #64]	; 0x40
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <HAL_UART_MspInit+0x138>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <HAL_UART_MspInit+0x138>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a3c      	ldr	r2, [pc, #240]	; (80018f4 <HAL_UART_MspInit+0x138>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <HAL_UART_MspInit+0x138>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001816:	230c      	movs	r3, #12
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001826:	2307      	movs	r3, #7
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	4619      	mov	r1, r3
 8001830:	4831      	ldr	r0, [pc, #196]	; (80018f8 <HAL_UART_MspInit+0x13c>)
 8001832:	f000 ff17 	bl	8002664 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	2026      	movs	r0, #38	; 0x26
 800183c:	f000 fe49 	bl	80024d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001840:	2026      	movs	r0, #38	; 0x26
 8001842:	f000 fe62 	bl	800250a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001846:	e04f      	b.n	80018e8 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2b      	ldr	r2, [pc, #172]	; (80018fc <HAL_UART_MspInit+0x140>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d14a      	bne.n	80018e8 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_UART_MspInit+0x138>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a26      	ldr	r2, [pc, #152]	; (80018f4 <HAL_UART_MspInit+0x138>)
 800185c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <HAL_UART_MspInit+0x138>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_UART_MspInit+0x138>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a1f      	ldr	r2, [pc, #124]	; (80018f4 <HAL_UART_MspInit+0x138>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <HAL_UART_MspInit+0x138>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <HAL_UART_MspInit+0x138>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <HAL_UART_MspInit+0x138>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <HAL_UART_MspInit+0x138>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018a6:	2320      	movs	r3, #32
 80018a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018b6:	2307      	movs	r3, #7
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	480f      	ldr	r0, [pc, #60]	; (8001900 <HAL_UART_MspInit+0x144>)
 80018c2:	f000 fecf 	bl	8002664 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018d8:	2307      	movs	r3, #7
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4619      	mov	r1, r3
 80018e2:	4808      	ldr	r0, [pc, #32]	; (8001904 <HAL_UART_MspInit+0x148>)
 80018e4:	f000 febe 	bl	8002664 <HAL_GPIO_Init>
}
 80018e8:	bf00      	nop
 80018ea:	3730      	adds	r7, #48	; 0x30
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40004400 	.word	0x40004400
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40004800 	.word	0x40004800
 8001900:	40020800 	.word	0x40020800
 8001904:	40020400 	.word	0x40020400

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800190c:	e7fe      	b.n	800190c <NMI_Handler+0x4>

0800190e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <MemManage_Handler+0x4>

0800191a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <UsageFault_Handler+0x4>

08001926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001954:	f000 f8c2 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <TIM2_IRQHandler+0x10>)
 8001962:	f002 f933 	bl	8003bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200000b8 	.word	0x200000b8

08001970 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <TIM3_IRQHandler+0x10>)
 8001976:	f002 f929 	bl	8003bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000100 	.word	0x20000100

08001984 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <TIM4_IRQHandler+0x10>)
 800198a:	f002 f91f 	bl	8003bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000148 	.word	0x20000148

08001998 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <USART2_IRQHandler+0x10>)
 800199e:	f003 f80f 	bl	80049c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000340 	.word	0x20000340

080019ac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <TIM5_IRQHandler+0x10>)
 80019b2:	f002 f90b 	bl	8003bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000190 	.word	0x20000190

080019c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <SystemInit+0x20>)
 80019c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <SystemInit+0x20>)
 80019cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
 Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ea:	490e      	ldr	r1, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a00:	4c0b      	ldr	r4, [pc, #44]	; (8001a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a0e:	f7ff ffd7 	bl	80019c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a12:	f003 fe9b 	bl	800574c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7fe fe05 	bl	8000624 <main>
  bx  lr    
 8001a1a:	4770      	bx	lr
 Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8001a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a28:	080057e4 	.word	0x080057e4
  ldr r2, =_sbss
 8001a2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a30:	200003ec 	.word	0x200003ec

08001a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_Init+0x40>)
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_Init+0x40>)
 8001a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_Init+0x40>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 fd2b 	bl	80024bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f000 f808 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fbb0 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 fd43 	bl	8002526 <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ab8:	f000 fd0b 	bl	80024d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_IncTick+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_IncTick+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_IncTick+0x24>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000008 	.word	0x20000008
 8001b00:	200003e8 	.word	0x200003e8

08001b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_GetTick+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	200003e8 	.word	0x200003e8

08001b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff ffee 	bl	8001b04 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_Delay+0x44>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000008 	.word	0x20000008

08001b64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e033      	b.n	8001be2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d109      	bne.n	8001b96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff fb4c 	bl	8001220 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d118      	bne.n	8001bd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001baa:	f023 0302 	bic.w	r3, r3, #2
 8001bae:	f043 0202 	orr.w	r2, r3, #2
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fab4 	bl	8002124 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f023 0303 	bic.w	r3, r3, #3
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
 8001bd2:	e001      	b.n	8001bd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_ADC_Start+0x1a>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e0b2      	b.n	8001d6c <HAL_ADC_Start+0x180>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d018      	beq.n	8001c4e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c2c:	4b52      	ldr	r3, [pc, #328]	; (8001d78 <HAL_ADC_Start+0x18c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_ADC_Start+0x190>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	0c9a      	lsrs	r2, r3, #18
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c40:	e002      	b.n	8001c48 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f9      	bne.n	8001c42 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d17a      	bne.n	8001d52 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d007      	beq.n	8001c8e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c9a:	d106      	bne.n	8001caa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca0:	f023 0206 	bic.w	r2, r3, #6
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ca8:	e002      	b.n	8001cb0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb8:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_ADC_Start+0x194>)
 8001cba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cc4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d12a      	bne.n	8001d28 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a2b      	ldr	r2, [pc, #172]	; (8001d84 <HAL_ADC_Start+0x198>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d015      	beq.n	8001d08 <HAL_ADC_Start+0x11c>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a29      	ldr	r2, [pc, #164]	; (8001d88 <HAL_ADC_Start+0x19c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d105      	bne.n	8001cf2 <HAL_ADC_Start+0x106>
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <HAL_ADC_Start+0x194>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 031f 	and.w	r3, r3, #31
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00a      	beq.n	8001d08 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <HAL_ADC_Start+0x1a0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d136      	bne.n	8001d6a <HAL_ADC_Start+0x17e>
 8001cfc:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_ADC_Start+0x194>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d130      	bne.n	8001d6a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d129      	bne.n	8001d6a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	e020      	b.n	8001d6a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a15      	ldr	r2, [pc, #84]	; (8001d84 <HAL_ADC_Start+0x198>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d11b      	bne.n	8001d6a <HAL_ADC_Start+0x17e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d114      	bne.n	8001d6a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	e00b      	b.n	8001d6a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f043 0210 	orr.w	r2, r3, #16
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	431bde83 	.word	0x431bde83
 8001d80:	40012300 	.word	0x40012300
 8001d84:	40012000 	.word	0x40012000
 8001d88:	40012100 	.word	0x40012100
 8001d8c:	40012200 	.word	0x40012200

08001d90 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dac:	d113      	bne.n	8001dd6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dbc:	d10b      	bne.n	8001dd6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f043 0220 	orr.w	r2, r3, #32
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e063      	b.n	8001e9e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001dd6:	f7ff fe95 	bl	8001b04 <HAL_GetTick>
 8001dda:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ddc:	e021      	b.n	8001e22 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001de4:	d01d      	beq.n	8001e22 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_ADC_PollForConversion+0x6c>
 8001dec:	f7ff fe8a 	bl	8001b04 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d212      	bcs.n	8001e22 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d00b      	beq.n	8001e22 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f043 0204 	orr.w	r2, r3, #4
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e03d      	b.n	8001e9e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d1d6      	bne.n	8001dde <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0212 	mvn.w	r2, #18
 8001e38:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d123      	bne.n	8001e9c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d11f      	bne.n	8001e9c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d006      	beq.n	8001e78 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d111      	bne.n	8001e9c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f043 0201 	orr.w	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1c>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e113      	b.n	8002104 <HAL_ADC_ConfigChannel+0x244>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b09      	cmp	r3, #9
 8001eea:	d925      	bls.n	8001f38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68d9      	ldr	r1, [r3, #12]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	3b1e      	subs	r3, #30
 8001f02:	2207      	movs	r2, #7
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43da      	mvns	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	400a      	ands	r2, r1
 8001f10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68d9      	ldr	r1, [r3, #12]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4403      	add	r3, r0
 8001f2a:	3b1e      	subs	r3, #30
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	e022      	b.n	8001f7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6919      	ldr	r1, [r3, #16]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	400a      	ands	r2, r1
 8001f5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6919      	ldr	r1, [r3, #16]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	4603      	mov	r3, r0
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4403      	add	r3, r0
 8001f74:	409a      	lsls	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d824      	bhi.n	8001fd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	3b05      	subs	r3, #5
 8001f98:	221f      	movs	r2, #31
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3b05      	subs	r3, #5
 8001fc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	635a      	str	r2, [r3, #52]	; 0x34
 8001fce:	e04c      	b.n	800206a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b0c      	cmp	r3, #12
 8001fd6:	d824      	bhi.n	8002022 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b23      	subs	r3, #35	; 0x23
 8001fea:	221f      	movs	r2, #31
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43da      	mvns	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	b29b      	uxth	r3, r3
 8002006:	4618      	mov	r0, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b23      	subs	r3, #35	; 0x23
 8002014:	fa00 f203 	lsl.w	r2, r0, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
 8002020:	e023      	b.n	800206a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	3b41      	subs	r3, #65	; 0x41
 8002034:	221f      	movs	r2, #31
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	400a      	ands	r2, r1
 8002042:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	4618      	mov	r0, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	3b41      	subs	r3, #65	; 0x41
 800205e:	fa00 f203 	lsl.w	r2, r0, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800206a:	4b29      	ldr	r3, [pc, #164]	; (8002110 <HAL_ADC_ConfigChannel+0x250>)
 800206c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a28      	ldr	r2, [pc, #160]	; (8002114 <HAL_ADC_ConfigChannel+0x254>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d10f      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x1d8>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b12      	cmp	r3, #18
 800207e:	d10b      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_ADC_ConfigChannel+0x254>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d12b      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x23a>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <HAL_ADC_ConfigChannel+0x258>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d003      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x1f4>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b11      	cmp	r3, #17
 80020b2:	d122      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a11      	ldr	r2, [pc, #68]	; (8002118 <HAL_ADC_ConfigChannel+0x258>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d111      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_ADC_ConfigChannel+0x25c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a11      	ldr	r2, [pc, #68]	; (8002120 <HAL_ADC_ConfigChannel+0x260>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	0c9a      	lsrs	r2, r3, #18
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020ec:	e002      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f9      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40012300 	.word	0x40012300
 8002114:	40012000 	.word	0x40012000
 8002118:	10000012 	.word	0x10000012
 800211c:	20000000 	.word	0x20000000
 8002120:	431bde83 	.word	0x431bde83

08002124 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800212c:	4b79      	ldr	r3, [pc, #484]	; (8002314 <ADC_Init+0x1f0>)
 800212e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	431a      	orrs	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002158:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	021a      	lsls	r2, r3, #8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800217c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6859      	ldr	r1, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800219e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6899      	ldr	r1, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	4a58      	ldr	r2, [pc, #352]	; (8002318 <ADC_Init+0x1f4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d022      	beq.n	8002202 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6899      	ldr	r1, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6899      	ldr	r1, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	e00f      	b.n	8002222 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002210:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002220:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0202 	bic.w	r2, r2, #2
 8002230:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6899      	ldr	r1, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7e1b      	ldrb	r3, [r3, #24]
 800223c:	005a      	lsls	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3020 	ldrb.w	r3, [r3, #32]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d01b      	beq.n	8002288 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800225e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800226e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6859      	ldr	r1, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	3b01      	subs	r3, #1
 800227c:	035a      	lsls	r2, r3, #13
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	e007      	b.n	8002298 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002296:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	051a      	lsls	r2, r3, #20
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6899      	ldr	r1, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022da:	025a      	lsls	r2, r3, #9
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6899      	ldr	r1, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	029a      	lsls	r2, r3, #10
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	609a      	str	r2, [r3, #8]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40012300 	.word	0x40012300
 8002318:	0f000001 	.word	0x0f000001

0800231c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <__NVIC_SetPriorityGrouping+0x44>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002338:	4013      	ands	r3, r2
 800233a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800234c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234e:	4a04      	ldr	r2, [pc, #16]	; (8002360 <__NVIC_SetPriorityGrouping+0x44>)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	60d3      	str	r3, [r2, #12]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <__NVIC_GetPriorityGrouping+0x18>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	f003 0307 	and.w	r3, r3, #7
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	2b00      	cmp	r3, #0
 8002390:	db0b      	blt.n	80023aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	f003 021f 	and.w	r2, r3, #31
 8002398:	4907      	ldr	r1, [pc, #28]	; (80023b8 <__NVIC_EnableIRQ+0x38>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	2001      	movs	r0, #1
 80023a2:	fa00 f202 	lsl.w	r2, r0, r2
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000e100 	.word	0xe000e100

080023bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	db0a      	blt.n	80023e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	490c      	ldr	r1, [pc, #48]	; (8002408 <__NVIC_SetPriority+0x4c>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	0112      	lsls	r2, r2, #4
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	440b      	add	r3, r1
 80023e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e4:	e00a      	b.n	80023fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4908      	ldr	r1, [pc, #32]	; (800240c <__NVIC_SetPriority+0x50>)
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	3b04      	subs	r3, #4
 80023f4:	0112      	lsls	r2, r2, #4
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	440b      	add	r3, r1
 80023fa:	761a      	strb	r2, [r3, #24]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000e100 	.word	0xe000e100
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f1c3 0307 	rsb	r3, r3, #7
 800242a:	2b04      	cmp	r3, #4
 800242c:	bf28      	it	cs
 800242e:	2304      	movcs	r3, #4
 8002430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3304      	adds	r3, #4
 8002436:	2b06      	cmp	r3, #6
 8002438:	d902      	bls.n	8002440 <NVIC_EncodePriority+0x30>
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3b03      	subs	r3, #3
 800243e:	e000      	b.n	8002442 <NVIC_EncodePriority+0x32>
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	401a      	ands	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	43d9      	mvns	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	4313      	orrs	r3, r2
         );
}
 800246a:	4618      	mov	r0, r3
 800246c:	3724      	adds	r7, #36	; 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002488:	d301      	bcc.n	800248e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800248a:	2301      	movs	r3, #1
 800248c:	e00f      	b.n	80024ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <SysTick_Config+0x40>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002496:	210f      	movs	r1, #15
 8002498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800249c:	f7ff ff8e 	bl	80023bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <SysTick_Config+0x40>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a6:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <SysTick_Config+0x40>)
 80024a8:	2207      	movs	r2, #7
 80024aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	e000e010 	.word	0xe000e010

080024bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff29 	bl	800231c <__NVIC_SetPriorityGrouping>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e4:	f7ff ff3e 	bl	8002364 <__NVIC_GetPriorityGrouping>
 80024e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	6978      	ldr	r0, [r7, #20]
 80024f0:	f7ff ff8e 	bl	8002410 <NVIC_EncodePriority>
 80024f4:	4602      	mov	r2, r0
 80024f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff5d 	bl	80023bc <__NVIC_SetPriority>
}
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	4603      	mov	r3, r0
 8002512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff31 	bl	8002380 <__NVIC_EnableIRQ>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff ffa2 	bl	8002478 <SysTick_Config>
 8002534:	4603      	mov	r3, r0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800254c:	f7ff fada 	bl	8001b04 <HAL_GetTick>
 8002550:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d008      	beq.n	8002570 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e052      	b.n	8002616 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0216 	bic.w	r2, r2, #22
 800257e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800258e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d103      	bne.n	80025a0 <HAL_DMA_Abort+0x62>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259c:	2b00      	cmp	r3, #0
 800259e:	d007      	beq.n	80025b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0208 	bic.w	r2, r2, #8
 80025ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0201 	bic.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c0:	e013      	b.n	80025ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025c2:	f7ff fa9f 	bl	8001b04 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b05      	cmp	r3, #5
 80025ce:	d90c      	bls.n	80025ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2220      	movs	r2, #32
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2203      	movs	r2, #3
 80025da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e015      	b.n	8002616 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1e4      	bne.n	80025c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fc:	223f      	movs	r2, #63	; 0x3f
 80025fe:	409a      	lsls	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d004      	beq.n	800263c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e00c      	b.n	8002656 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2205      	movs	r2, #5
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	e165      	b.n	800294c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	f040 8154 	bne.w	8002946 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d005      	beq.n	80026b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d130      	bne.n	8002718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	2203      	movs	r2, #3
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ec:	2201      	movs	r2, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 0201 	and.w	r2, r3, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b03      	cmp	r3, #3
 8002722:	d017      	beq.n	8002754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d123      	bne.n	80027a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	220f      	movs	r2, #15
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	69b9      	ldr	r1, [r7, #24]
 80027a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0203 	and.w	r2, r3, #3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80ae 	beq.w	8002946 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b5d      	ldr	r3, [pc, #372]	; (8002964 <HAL_GPIO_Init+0x300>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	4a5c      	ldr	r2, [pc, #368]	; (8002964 <HAL_GPIO_Init+0x300>)
 80027f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f8:	6453      	str	r3, [r2, #68]	; 0x44
 80027fa:	4b5a      	ldr	r3, [pc, #360]	; (8002964 <HAL_GPIO_Init+0x300>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002806:	4a58      	ldr	r2, [pc, #352]	; (8002968 <HAL_GPIO_Init+0x304>)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3302      	adds	r3, #2
 800280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	220f      	movs	r2, #15
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4f      	ldr	r2, [pc, #316]	; (800296c <HAL_GPIO_Init+0x308>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d025      	beq.n	800287e <HAL_GPIO_Init+0x21a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a4e      	ldr	r2, [pc, #312]	; (8002970 <HAL_GPIO_Init+0x30c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d01f      	beq.n	800287a <HAL_GPIO_Init+0x216>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a4d      	ldr	r2, [pc, #308]	; (8002974 <HAL_GPIO_Init+0x310>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d019      	beq.n	8002876 <HAL_GPIO_Init+0x212>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4c      	ldr	r2, [pc, #304]	; (8002978 <HAL_GPIO_Init+0x314>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d013      	beq.n	8002872 <HAL_GPIO_Init+0x20e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4b      	ldr	r2, [pc, #300]	; (800297c <HAL_GPIO_Init+0x318>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00d      	beq.n	800286e <HAL_GPIO_Init+0x20a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4a      	ldr	r2, [pc, #296]	; (8002980 <HAL_GPIO_Init+0x31c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d007      	beq.n	800286a <HAL_GPIO_Init+0x206>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a49      	ldr	r2, [pc, #292]	; (8002984 <HAL_GPIO_Init+0x320>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d101      	bne.n	8002866 <HAL_GPIO_Init+0x202>
 8002862:	2306      	movs	r3, #6
 8002864:	e00c      	b.n	8002880 <HAL_GPIO_Init+0x21c>
 8002866:	2307      	movs	r3, #7
 8002868:	e00a      	b.n	8002880 <HAL_GPIO_Init+0x21c>
 800286a:	2305      	movs	r3, #5
 800286c:	e008      	b.n	8002880 <HAL_GPIO_Init+0x21c>
 800286e:	2304      	movs	r3, #4
 8002870:	e006      	b.n	8002880 <HAL_GPIO_Init+0x21c>
 8002872:	2303      	movs	r3, #3
 8002874:	e004      	b.n	8002880 <HAL_GPIO_Init+0x21c>
 8002876:	2302      	movs	r3, #2
 8002878:	e002      	b.n	8002880 <HAL_GPIO_Init+0x21c>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_GPIO_Init+0x21c>
 800287e:	2300      	movs	r3, #0
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	f002 0203 	and.w	r2, r2, #3
 8002886:	0092      	lsls	r2, r2, #2
 8002888:	4093      	lsls	r3, r2
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002890:	4935      	ldr	r1, [pc, #212]	; (8002968 <HAL_GPIO_Init+0x304>)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	3302      	adds	r3, #2
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800289e:	4b3a      	ldr	r3, [pc, #232]	; (8002988 <HAL_GPIO_Init+0x324>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028c2:	4a31      	ldr	r2, [pc, #196]	; (8002988 <HAL_GPIO_Init+0x324>)
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c8:	4b2f      	ldr	r3, [pc, #188]	; (8002988 <HAL_GPIO_Init+0x324>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028ec:	4a26      	ldr	r2, [pc, #152]	; (8002988 <HAL_GPIO_Init+0x324>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028f2:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_GPIO_Init+0x324>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002916:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <HAL_GPIO_Init+0x324>)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800291c:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <HAL_GPIO_Init+0x324>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002940:	4a11      	ldr	r2, [pc, #68]	; (8002988 <HAL_GPIO_Init+0x324>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3301      	adds	r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2b0f      	cmp	r3, #15
 8002950:	f67f ae96 	bls.w	8002680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3724      	adds	r7, #36	; 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	40013800 	.word	0x40013800
 800296c:	40020000 	.word	0x40020000
 8002970:	40020400 	.word	0x40020400
 8002974:	40020800 	.word	0x40020800
 8002978:	40020c00 	.word	0x40020c00
 800297c:	40021000 	.word	0x40021000
 8002980:	40021400 	.word	0x40021400
 8002984:	40021800 	.word	0x40021800
 8002988:	40013c00 	.word	0x40013c00

0800298c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	807b      	strh	r3, [r7, #2]
 8002998:	4613      	mov	r3, r2
 800299a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800299c:	787b      	ldrb	r3, [r7, #1]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029a8:	e003      	b.n	80029b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029aa:	887b      	ldrh	r3, [r7, #2]
 80029ac:	041a      	lsls	r2, r3, #16
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	619a      	str	r2, [r3, #24]
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0cc      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4b68      	ldr	r3, [pc, #416]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d90c      	bls.n	80029fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b65      	ldr	r3, [pc, #404]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b63      	ldr	r3, [pc, #396]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0b8      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a14:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a58      	ldr	r2, [pc, #352]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a2c:	4b53      	ldr	r3, [pc, #332]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a52      	ldr	r2, [pc, #328]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b50      	ldr	r3, [pc, #320]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	494d      	ldr	r1, [pc, #308]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d044      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b47      	ldr	r3, [pc, #284]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d119      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e07f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d003      	beq.n	8002a7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	4b3f      	ldr	r3, [pc, #252]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e067      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9e:	4b37      	ldr	r3, [pc, #220]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f023 0203 	bic.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4934      	ldr	r1, [pc, #208]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab0:	f7ff f828 	bl	8001b04 <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab8:	f7ff f824 	bl	8001b04 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e04f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 020c 	and.w	r2, r3, #12
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d1eb      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d20c      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e032      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b14:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4916      	ldr	r1, [pc, #88]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b32:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	490e      	ldr	r1, [pc, #56]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b46:	f000 f855 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	490a      	ldr	r1, [pc, #40]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	5ccb      	ldrb	r3, [r1, r3]
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_RCC_ClockConfig+0x1c8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe ff88 	bl	8001a7c <HAL_InitTick>

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023c00 	.word	0x40023c00
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	080057bc 	.word	0x080057bc
 8002b84:	20000000 	.word	0x20000000
 8002b88:	20000004 	.word	0x20000004

08002b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b90:	4b03      	ldr	r3, [pc, #12]	; (8002ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000000 	.word	0x20000000

08002ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ba8:	f7ff fff0 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	0a9b      	lsrs	r3, r3, #10
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4903      	ldr	r1, [pc, #12]	; (8002bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	080057cc 	.word	0x080057cc

08002bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bd0:	f7ff ffdc 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	0b5b      	lsrs	r3, r3, #13
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	080057cc 	.word	0x080057cc

08002bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf8:	b0ae      	sub	sp, #184	; 0xb8
 8002bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c1a:	4bcb      	ldr	r3, [pc, #812]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b0c      	cmp	r3, #12
 8002c24:	f200 8206 	bhi.w	8003034 <HAL_RCC_GetSysClockFreq+0x440>
 8002c28:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	08002c65 	.word	0x08002c65
 8002c34:	08003035 	.word	0x08003035
 8002c38:	08003035 	.word	0x08003035
 8002c3c:	08003035 	.word	0x08003035
 8002c40:	08002c6d 	.word	0x08002c6d
 8002c44:	08003035 	.word	0x08003035
 8002c48:	08003035 	.word	0x08003035
 8002c4c:	08003035 	.word	0x08003035
 8002c50:	08002c75 	.word	0x08002c75
 8002c54:	08003035 	.word	0x08003035
 8002c58:	08003035 	.word	0x08003035
 8002c5c:	08003035 	.word	0x08003035
 8002c60:	08002e65 	.word	0x08002e65
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c64:	4bb9      	ldr	r3, [pc, #740]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8002c66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002c6a:	e1e7      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c6c:	4bb8      	ldr	r3, [pc, #736]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c72:	e1e3      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c74:	4bb4      	ldr	r3, [pc, #720]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c80:	4bb1      	ldr	r3, [pc, #708]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d071      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8c:	4bae      	ldr	r3, [pc, #696]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c98:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002c9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cb2:	4622      	mov	r2, r4
 8002cb4:	462b      	mov	r3, r5
 8002cb6:	f04f 0000 	mov.w	r0, #0
 8002cba:	f04f 0100 	mov.w	r1, #0
 8002cbe:	0159      	lsls	r1, r3, #5
 8002cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc4:	0150      	lsls	r0, r2, #5
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4621      	mov	r1, r4
 8002ccc:	1a51      	subs	r1, r2, r1
 8002cce:	6439      	str	r1, [r7, #64]	; 0x40
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ce4:	4649      	mov	r1, r9
 8002ce6:	018b      	lsls	r3, r1, #6
 8002ce8:	4641      	mov	r1, r8
 8002cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cee:	4641      	mov	r1, r8
 8002cf0:	018a      	lsls	r2, r1, #6
 8002cf2:	4641      	mov	r1, r8
 8002cf4:	1a51      	subs	r1, r2, r1
 8002cf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cf8:	4649      	mov	r1, r9
 8002cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8002cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d0c:	4649      	mov	r1, r9
 8002d0e:	00cb      	lsls	r3, r1, #3
 8002d10:	4641      	mov	r1, r8
 8002d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d16:	4641      	mov	r1, r8
 8002d18:	00ca      	lsls	r2, r1, #3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4622      	mov	r2, r4
 8002d22:	189b      	adds	r3, r3, r2
 8002d24:	633b      	str	r3, [r7, #48]	; 0x30
 8002d26:	462b      	mov	r3, r5
 8002d28:	460a      	mov	r2, r1
 8002d2a:	eb42 0303 	adc.w	r3, r2, r3
 8002d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	024b      	lsls	r3, r1, #9
 8002d40:	4621      	mov	r1, r4
 8002d42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d46:	4621      	mov	r1, r4
 8002d48:	024a      	lsls	r2, r1, #9
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d52:	2200      	movs	r2, #0
 8002d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d5c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002d60:	f7fd fa50 	bl	8000204 <__aeabi_uldivmod>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4613      	mov	r3, r2
 8002d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d6e:	e067      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d70:	4b75      	ldr	r3, [pc, #468]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	099b      	lsrs	r3, r3, #6
 8002d76:	2200      	movs	r2, #0
 8002d78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d7c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002d80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d8e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002d92:	4622      	mov	r2, r4
 8002d94:	462b      	mov	r3, r5
 8002d96:	f04f 0000 	mov.w	r0, #0
 8002d9a:	f04f 0100 	mov.w	r1, #0
 8002d9e:	0159      	lsls	r1, r3, #5
 8002da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da4:	0150      	lsls	r0, r2, #5
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4621      	mov	r1, r4
 8002dac:	1a51      	subs	r1, r2, r1
 8002dae:	62b9      	str	r1, [r7, #40]	; 0x28
 8002db0:	4629      	mov	r1, r5
 8002db2:	eb63 0301 	sbc.w	r3, r3, r1
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002dc4:	4649      	mov	r1, r9
 8002dc6:	018b      	lsls	r3, r1, #6
 8002dc8:	4641      	mov	r1, r8
 8002dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dce:	4641      	mov	r1, r8
 8002dd0:	018a      	lsls	r2, r1, #6
 8002dd2:	4641      	mov	r1, r8
 8002dd4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dd8:	4649      	mov	r1, r9
 8002dda:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002df2:	4692      	mov	sl, r2
 8002df4:	469b      	mov	fp, r3
 8002df6:	4623      	mov	r3, r4
 8002df8:	eb1a 0303 	adds.w	r3, sl, r3
 8002dfc:	623b      	str	r3, [r7, #32]
 8002dfe:	462b      	mov	r3, r5
 8002e00:	eb4b 0303 	adc.w	r3, fp, r3
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e12:	4629      	mov	r1, r5
 8002e14:	028b      	lsls	r3, r1, #10
 8002e16:	4621      	mov	r1, r4
 8002e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	028a      	lsls	r2, r1, #10
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e28:	2200      	movs	r2, #0
 8002e2a:	673b      	str	r3, [r7, #112]	; 0x70
 8002e2c:	677a      	str	r2, [r7, #116]	; 0x74
 8002e2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002e32:	f7fd f9e7 	bl	8000204 <__aeabi_uldivmod>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e40:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002e52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e62:	e0eb      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e64:	4b38      	ldr	r3, [pc, #224]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e70:	4b35      	ldr	r3, [pc, #212]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d06b      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7c:	4b32      	ldr	r3, [pc, #200]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	099b      	lsrs	r3, r3, #6
 8002e82:	2200      	movs	r2, #0
 8002e84:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8e:	663b      	str	r3, [r7, #96]	; 0x60
 8002e90:	2300      	movs	r3, #0
 8002e92:	667b      	str	r3, [r7, #100]	; 0x64
 8002e94:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002e98:	4622      	mov	r2, r4
 8002e9a:	462b      	mov	r3, r5
 8002e9c:	f04f 0000 	mov.w	r0, #0
 8002ea0:	f04f 0100 	mov.w	r1, #0
 8002ea4:	0159      	lsls	r1, r3, #5
 8002ea6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eaa:	0150      	lsls	r0, r2, #5
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	1a51      	subs	r1, r2, r1
 8002eb4:	61b9      	str	r1, [r7, #24]
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	eb63 0301 	sbc.w	r3, r3, r1
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002eca:	4659      	mov	r1, fp
 8002ecc:	018b      	lsls	r3, r1, #6
 8002ece:	4651      	mov	r1, sl
 8002ed0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ed4:	4651      	mov	r1, sl
 8002ed6:	018a      	lsls	r2, r1, #6
 8002ed8:	4651      	mov	r1, sl
 8002eda:	ebb2 0801 	subs.w	r8, r2, r1
 8002ede:	4659      	mov	r1, fp
 8002ee0:	eb63 0901 	sbc.w	r9, r3, r1
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ef8:	4690      	mov	r8, r2
 8002efa:	4699      	mov	r9, r3
 8002efc:	4623      	mov	r3, r4
 8002efe:	eb18 0303 	adds.w	r3, r8, r3
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	462b      	mov	r3, r5
 8002f06:	eb49 0303 	adc.w	r3, r9, r3
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f18:	4629      	mov	r1, r5
 8002f1a:	024b      	lsls	r3, r1, #9
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f22:	4621      	mov	r1, r4
 8002f24:	024a      	lsls	r2, r1, #9
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f2e:	2200      	movs	r2, #0
 8002f30:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f32:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f38:	f7fd f964 	bl	8000204 <__aeabi_uldivmod>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4613      	mov	r3, r2
 8002f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f46:	e065      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x420>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	00f42400 	.word	0x00f42400
 8002f50:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f54:	4b3d      	ldr	r3, [pc, #244]	; (800304c <HAL_RCC_GetSysClockFreq+0x458>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	4611      	mov	r1, r2
 8002f60:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f64:	653b      	str	r3, [r7, #80]	; 0x50
 8002f66:	2300      	movs	r3, #0
 8002f68:	657b      	str	r3, [r7, #84]	; 0x54
 8002f6a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002f6e:	4642      	mov	r2, r8
 8002f70:	464b      	mov	r3, r9
 8002f72:	f04f 0000 	mov.w	r0, #0
 8002f76:	f04f 0100 	mov.w	r1, #0
 8002f7a:	0159      	lsls	r1, r3, #5
 8002f7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f80:	0150      	lsls	r0, r2, #5
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4641      	mov	r1, r8
 8002f88:	1a51      	subs	r1, r2, r1
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	4649      	mov	r1, r9
 8002f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002fa0:	4659      	mov	r1, fp
 8002fa2:	018b      	lsls	r3, r1, #6
 8002fa4:	4651      	mov	r1, sl
 8002fa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002faa:	4651      	mov	r1, sl
 8002fac:	018a      	lsls	r2, r1, #6
 8002fae:	4651      	mov	r1, sl
 8002fb0:	1a54      	subs	r4, r2, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	eb63 0501 	sbc.w	r5, r3, r1
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	00eb      	lsls	r3, r5, #3
 8002fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fc6:	00e2      	lsls	r2, r4, #3
 8002fc8:	4614      	mov	r4, r2
 8002fca:	461d      	mov	r5, r3
 8002fcc:	4643      	mov	r3, r8
 8002fce:	18e3      	adds	r3, r4, r3
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	eb45 0303 	adc.w	r3, r5, r3
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	028b      	lsls	r3, r1, #10
 8002fea:	4621      	mov	r1, r4
 8002fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	028a      	lsls	r2, r1, #10
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003000:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003002:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003006:	f7fd f8fd 	bl	8000204 <__aeabi_uldivmod>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4613      	mov	r3, r2
 8003010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_RCC_GetSysClockFreq+0x458>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	0f1b      	lsrs	r3, r3, #28
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800302a:	fbb2 f3f3 	udiv	r3, r2, r3
 800302e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003032:	e003      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800303a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800303c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003040:	4618      	mov	r0, r3
 8003042:	37b8      	adds	r7, #184	; 0xb8
 8003044:	46bd      	mov	sp, r7
 8003046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800
 8003050:	00f42400 	.word	0x00f42400

08003054 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e28d      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8083 	beq.w	800317a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003074:	4b94      	ldr	r3, [pc, #592]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b04      	cmp	r3, #4
 800307e:	d019      	beq.n	80030b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003080:	4b91      	ldr	r3, [pc, #580]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003088:	2b08      	cmp	r3, #8
 800308a:	d106      	bne.n	800309a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800308c:	4b8e      	ldr	r3, [pc, #568]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003098:	d00c      	beq.n	80030b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309a:	4b8b      	ldr	r3, [pc, #556]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d112      	bne.n	80030cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a6:	4b88      	ldr	r3, [pc, #544]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b2:	d10b      	bne.n	80030cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	4b84      	ldr	r3, [pc, #528]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d05b      	beq.n	8003178 <HAL_RCC_OscConfig+0x124>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d157      	bne.n	8003178 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e25a      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d4:	d106      	bne.n	80030e4 <HAL_RCC_OscConfig+0x90>
 80030d6:	4b7c      	ldr	r3, [pc, #496]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a7b      	ldr	r2, [pc, #492]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	e01d      	b.n	8003120 <HAL_RCC_OscConfig+0xcc>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0xb4>
 80030ee:	4b76      	ldr	r3, [pc, #472]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a75      	ldr	r2, [pc, #468]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b73      	ldr	r3, [pc, #460]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a72      	ldr	r2, [pc, #456]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e00b      	b.n	8003120 <HAL_RCC_OscConfig+0xcc>
 8003108:	4b6f      	ldr	r3, [pc, #444]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a6e      	ldr	r2, [pc, #440]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800310e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4b6c      	ldr	r3, [pc, #432]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a6b      	ldr	r2, [pc, #428]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800311a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d013      	beq.n	8003150 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7fe fcec 	bl	8001b04 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003130:	f7fe fce8 	bl	8001b04 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	; 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e21f      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b61      	ldr	r3, [pc, #388]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0xdc>
 800314e:	e014      	b.n	800317a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fe fcd8 	bl	8001b04 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003158:	f7fe fcd4 	bl	8001b04 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e20b      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316a:	4b57      	ldr	r3, [pc, #348]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x104>
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d06f      	beq.n	8003266 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003186:	4b50      	ldr	r3, [pc, #320]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b00      	cmp	r3, #0
 8003190:	d017      	beq.n	80031c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003192:	4b4d      	ldr	r3, [pc, #308]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800319a:	2b08      	cmp	r3, #8
 800319c:	d105      	bne.n	80031aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800319e:	4b4a      	ldr	r3, [pc, #296]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031aa:	4b47      	ldr	r3, [pc, #284]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031b2:	2b0c      	cmp	r3, #12
 80031b4:	d11c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b6:	4b44      	ldr	r3, [pc, #272]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d116      	bne.n	80031f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	4b41      	ldr	r3, [pc, #260]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_RCC_OscConfig+0x186>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d001      	beq.n	80031da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e1d3      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031da:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4937      	ldr	r1, [pc, #220]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	e03a      	b.n	8003266 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f8:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_RCC_OscConfig+0x278>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7fe fc81 	bl	8001b04 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003206:	f7fe fc7d 	bl	8001b04 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e1b4      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003224:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4925      	ldr	r1, [pc, #148]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]
 8003238:	e015      	b.n	8003266 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323a:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCC_OscConfig+0x278>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe fc60 	bl	8001b04 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003248:	f7fe fc5c 	bl	8001b04 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e193      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d036      	beq.n	80032e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d016      	beq.n	80032a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <HAL_RCC_OscConfig+0x27c>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fe fc40 	bl	8001b04 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003288:	f7fe fc3c 	bl	8001b04 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e173      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800329c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x234>
 80032a6:	e01b      	b.n	80032e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a8:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <HAL_RCC_OscConfig+0x27c>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ae:	f7fe fc29 	bl	8001b04 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	e00e      	b.n	80032d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b6:	f7fe fc25 	bl	8001b04 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d907      	bls.n	80032d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e15c      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	42470000 	.word	0x42470000
 80032d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d4:	4b8a      	ldr	r3, [pc, #552]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80032d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ea      	bne.n	80032b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8097 	beq.w	800341c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f2:	4b83      	ldr	r3, [pc, #524]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10f      	bne.n	800331e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	4b7f      	ldr	r3, [pc, #508]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	4a7e      	ldr	r2, [pc, #504]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	; 0x40
 800330e:	4b7c      	ldr	r3, [pc, #496]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4b79      	ldr	r3, [pc, #484]	; (8003504 <HAL_RCC_OscConfig+0x4b0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d118      	bne.n	800335c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332a:	4b76      	ldr	r3, [pc, #472]	; (8003504 <HAL_RCC_OscConfig+0x4b0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a75      	ldr	r2, [pc, #468]	; (8003504 <HAL_RCC_OscConfig+0x4b0>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003336:	f7fe fbe5 	bl	8001b04 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333e:	f7fe fbe1 	bl	8001b04 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e118      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	4b6c      	ldr	r3, [pc, #432]	; (8003504 <HAL_RCC_OscConfig+0x4b0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x31e>
 8003364:	4b66      	ldr	r3, [pc, #408]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a65      	ldr	r2, [pc, #404]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	e01c      	b.n	80033ac <HAL_RCC_OscConfig+0x358>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b05      	cmp	r3, #5
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x340>
 800337a:	4b61      	ldr	r3, [pc, #388]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a60      	ldr	r2, [pc, #384]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	6713      	str	r3, [r2, #112]	; 0x70
 8003386:	4b5e      	ldr	r3, [pc, #376]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a5d      	ldr	r2, [pc, #372]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0x358>
 8003394:	4b5a      	ldr	r3, [pc, #360]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	4a59      	ldr	r2, [pc, #356]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	6713      	str	r3, [r2, #112]	; 0x70
 80033a0:	4b57      	ldr	r3, [pc, #348]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a56      	ldr	r2, [pc, #344]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80033a6:	f023 0304 	bic.w	r3, r3, #4
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fe fba6 	bl	8001b04 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fe fba2 	bl	8001b04 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0d7      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d2:	4b4b      	ldr	r3, [pc, #300]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0ee      	beq.n	80033bc <HAL_RCC_OscConfig+0x368>
 80033de:	e014      	b.n	800340a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7fe fb90 	bl	8001b04 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7fe fb8c 	bl	8001b04 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0c1      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fe:	4b40      	ldr	r3, [pc, #256]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ee      	bne.n	80033e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003410:	4b3b      	ldr	r3, [pc, #236]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	4a3a      	ldr	r2, [pc, #232]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80ad 	beq.w	8003580 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003426:	4b36      	ldr	r3, [pc, #216]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b08      	cmp	r3, #8
 8003430:	d060      	beq.n	80034f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d145      	bne.n	80034c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b33      	ldr	r3, [pc, #204]	; (8003508 <HAL_RCC_OscConfig+0x4b4>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe fb60 	bl	8001b04 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003448:	f7fe fb5c 	bl	8001b04 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e093      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	4b29      	ldr	r3, [pc, #164]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	019b      	lsls	r3, r3, #6
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	3b01      	subs	r3, #1
 8003480:	041b      	lsls	r3, r3, #16
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	071b      	lsls	r3, r3, #28
 8003492:	491b      	ldr	r1, [pc, #108]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003498:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x4b4>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fe fb31 	bl	8001b04 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fe fb2d 	bl	8001b04 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e064      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b8:	4b11      	ldr	r3, [pc, #68]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x452>
 80034c4:	e05c      	b.n	8003580 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <HAL_RCC_OscConfig+0x4b4>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fe fb1a 	bl	8001b04 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fe fb16 	bl	8001b04 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e04d      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x480>
 80034f2:	e045      	b.n	8003580 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d107      	bne.n	800350c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e040      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
 8003500:	40023800 	.word	0x40023800
 8003504:	40007000 	.word	0x40007000
 8003508:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800350c:	4b1f      	ldr	r3, [pc, #124]	; (800358c <HAL_RCC_OscConfig+0x538>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d030      	beq.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d129      	bne.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d122      	bne.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800353c:	4013      	ands	r3, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003542:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003544:	4293      	cmp	r3, r2
 8003546:	d119      	bne.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	3b01      	subs	r3, #1
 8003556:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d10f      	bne.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d107      	bne.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800

08003590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e041      	b.n	8003626 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fd fe76 	bl	80012a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f000 fdb6 	bl	8004140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e041      	b.n	80036c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d106      	bne.n	800365a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f839 	bl	80036cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2202      	movs	r2, #2
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	4619      	mov	r1, r3
 800366c:	4610      	mov	r0, r2
 800366e:	f000 fd67 	bl	8004140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <HAL_TIM_PWM_Start+0x24>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	bf14      	ite	ne
 80036fc:	2301      	movne	r3, #1
 80036fe:	2300      	moveq	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e022      	b.n	800374a <HAL_TIM_PWM_Start+0x6a>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b04      	cmp	r3, #4
 8003708:	d109      	bne.n	800371e <HAL_TIM_PWM_Start+0x3e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	bf14      	ite	ne
 8003716:	2301      	movne	r3, #1
 8003718:	2300      	moveq	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	e015      	b.n	800374a <HAL_TIM_PWM_Start+0x6a>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b08      	cmp	r3, #8
 8003722:	d109      	bne.n	8003738 <HAL_TIM_PWM_Start+0x58>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b01      	cmp	r3, #1
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e008      	b.n	800374a <HAL_TIM_PWM_Start+0x6a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	bf14      	ite	ne
 8003744:	2301      	movne	r3, #1
 8003746:	2300      	moveq	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07c      	b.n	800384c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <HAL_TIM_PWM_Start+0x82>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003760:	e013      	b.n	800378a <HAL_TIM_PWM_Start+0xaa>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b04      	cmp	r3, #4
 8003766:	d104      	bne.n	8003772 <HAL_TIM_PWM_Start+0x92>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003770:	e00b      	b.n	800378a <HAL_TIM_PWM_Start+0xaa>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d104      	bne.n	8003782 <HAL_TIM_PWM_Start+0xa2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003780:	e003      	b.n	800378a <HAL_TIM_PWM_Start+0xaa>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2201      	movs	r2, #1
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f000 ffbe 	bl	8004714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a2d      	ldr	r2, [pc, #180]	; (8003854 <HAL_TIM_PWM_Start+0x174>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d004      	beq.n	80037ac <HAL_TIM_PWM_Start+0xcc>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a2c      	ldr	r2, [pc, #176]	; (8003858 <HAL_TIM_PWM_Start+0x178>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_TIM_PWM_Start+0xd0>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <HAL_TIM_PWM_Start+0xd2>
 80037b0:	2300      	movs	r3, #0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a22      	ldr	r2, [pc, #136]	; (8003854 <HAL_TIM_PWM_Start+0x174>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d022      	beq.n	8003816 <HAL_TIM_PWM_Start+0x136>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d8:	d01d      	beq.n	8003816 <HAL_TIM_PWM_Start+0x136>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1f      	ldr	r2, [pc, #124]	; (800385c <HAL_TIM_PWM_Start+0x17c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d018      	beq.n	8003816 <HAL_TIM_PWM_Start+0x136>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <HAL_TIM_PWM_Start+0x180>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <HAL_TIM_PWM_Start+0x136>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <HAL_TIM_PWM_Start+0x184>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00e      	beq.n	8003816 <HAL_TIM_PWM_Start+0x136>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a16      	ldr	r2, [pc, #88]	; (8003858 <HAL_TIM_PWM_Start+0x178>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_TIM_PWM_Start+0x136>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a18      	ldr	r2, [pc, #96]	; (8003868 <HAL_TIM_PWM_Start+0x188>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_TIM_PWM_Start+0x136>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a16      	ldr	r2, [pc, #88]	; (800386c <HAL_TIM_PWM_Start+0x18c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d111      	bne.n	800383a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b06      	cmp	r3, #6
 8003826:	d010      	beq.n	800384a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003838:	e007      	b.n	800384a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40010000 	.word	0x40010000
 8003858:	40010400 	.word	0x40010400
 800385c:	40000400 	.word	0x40000400
 8003860:	40000800 	.word	0x40000800
 8003864:	40000c00 	.word	0x40000c00
 8003868:	40014000 	.word	0x40014000
 800386c:	40001800 	.word	0x40001800

08003870 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e041      	b.n	8003908 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f839 	bl	8003910 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3304      	adds	r3, #4
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f000 fc45 	bl	8004140 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0208 	bic.w	r2, r2, #8
 80038c4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6819      	ldr	r1, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e097      	b.n	8003a68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d106      	bne.n	8003952 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7fd fd3b 	bl	80013c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2202      	movs	r2, #2
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003968:	f023 0307 	bic.w	r3, r3, #7
 800396c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3304      	adds	r3, #4
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f000 fbe1 	bl	8004140 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a6:	f023 0303 	bic.w	r3, r3, #3
 80039aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	021b      	lsls	r3, r3, #8
 80039b6:	4313      	orrs	r3, r2
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80039c4:	f023 030c 	bic.w	r3, r3, #12
 80039c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	4313      	orrs	r3, r2
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	011a      	lsls	r2, r3, #4
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	031b      	lsls	r3, r3, #12
 80039f4:	4313      	orrs	r3, r2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003a02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003a0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	4313      	orrs	r3, r2
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d110      	bne.n	8003ac2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d102      	bne.n	8003aac <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003aa6:	7b7b      	ldrb	r3, [r7, #13]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d001      	beq.n	8003ab0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e089      	b.n	8003bc4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ac0:	e031      	b.n	8003b26 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d110      	bne.n	8003aea <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ac8:	7bbb      	ldrb	r3, [r7, #14]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d102      	bne.n	8003ad4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ace:	7b3b      	ldrb	r3, [r7, #12]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d001      	beq.n	8003ad8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e075      	b.n	8003bc4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ae8:	e01d      	b.n	8003b26 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d108      	bne.n	8003b02 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003af0:	7bbb      	ldrb	r3, [r7, #14]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d105      	bne.n	8003b02 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003af6:	7b7b      	ldrb	r3, [r7, #13]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d102      	bne.n	8003b02 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003afc:	7b3b      	ldrb	r3, [r7, #12]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d001      	beq.n	8003b06 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e05e      	b.n	8003bc4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2202      	movs	r2, #2
 8003b22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d010      	beq.n	8003b54 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003b32:	e01f      	b.n	8003b74 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fde9 	bl	8004714 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0202 	orr.w	r2, r2, #2
 8003b50:	60da      	str	r2, [r3, #12]
      break;
 8003b52:	e02e      	b.n	8003bb2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	2104      	movs	r1, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fdd9 	bl	8004714 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0204 	orr.w	r2, r2, #4
 8003b70:	60da      	str	r2, [r3, #12]
      break;
 8003b72:	e01e      	b.n	8003bb2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fdc9 	bl	8004714 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2201      	movs	r2, #1
 8003b88:	2104      	movs	r1, #4
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fdc2 	bl	8004714 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0202 	orr.w	r2, r2, #2
 8003b9e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0204 	orr.w	r2, r2, #4
 8003bae:	60da      	str	r2, [r3, #12]
      break;
 8003bb0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0201 	orr.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d122      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d11b      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0202 	mvn.w	r2, #2
 8003bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fc fc7a 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8003c14:	e005      	b.n	8003c22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fa73 	bl	8004102 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fa7a 	bl	8004116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d122      	bne.n	8003c7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d11b      	bne.n	8003c7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0204 	mvn.w	r2, #4
 8003c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2202      	movs	r2, #2
 8003c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fc fc50 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8003c68:	e005      	b.n	8003c76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fa49 	bl	8004102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fa50 	bl	8004116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d122      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d11b      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0208 	mvn.w	r2, #8
 8003ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fc fc26 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8003cbc:	e005      	b.n	8003cca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fa1f 	bl	8004102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fa26 	bl	8004116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b10      	cmp	r3, #16
 8003cdc:	d122      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d11b      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f06f 0210 	mvn.w	r2, #16
 8003cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fc fbfc 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8003d10:	e005      	b.n	8003d1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f9f5 	bl	8004102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f9fc 	bl	8004116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d10e      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d107      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0201 	mvn.w	r2, #1
 8003d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f9cf 	bl	80040ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5a:	2b80      	cmp	r3, #128	; 0x80
 8003d5c:	d10e      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d68:	2b80      	cmp	r3, #128	; 0x80
 8003d6a:	d107      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fdca 	bl	8004910 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b40      	cmp	r3, #64	; 0x40
 8003d88:	d10e      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d107      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f9c1 	bl	800412a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b20      	cmp	r3, #32
 8003db4:	d10e      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d107      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0220 	mvn.w	r2, #32
 8003dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fd94 	bl	80048fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e0ae      	b.n	8003f58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b0c      	cmp	r3, #12
 8003e06:	f200 809f 	bhi.w	8003f48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e0a:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e10:	08003e45 	.word	0x08003e45
 8003e14:	08003f49 	.word	0x08003f49
 8003e18:	08003f49 	.word	0x08003f49
 8003e1c:	08003f49 	.word	0x08003f49
 8003e20:	08003e85 	.word	0x08003e85
 8003e24:	08003f49 	.word	0x08003f49
 8003e28:	08003f49 	.word	0x08003f49
 8003e2c:	08003f49 	.word	0x08003f49
 8003e30:	08003ec7 	.word	0x08003ec7
 8003e34:	08003f49 	.word	0x08003f49
 8003e38:	08003f49 	.word	0x08003f49
 8003e3c:	08003f49 	.word	0x08003f49
 8003e40:	08003f07 	.word	0x08003f07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fa18 	bl	8004280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0208 	orr.w	r2, r2, #8
 8003e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0204 	bic.w	r2, r2, #4
 8003e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6999      	ldr	r1, [r3, #24]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	619a      	str	r2, [r3, #24]
      break;
 8003e82:	e064      	b.n	8003f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fa68 	bl	8004360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6999      	ldr	r1, [r3, #24]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	021a      	lsls	r2, r3, #8
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	619a      	str	r2, [r3, #24]
      break;
 8003ec4:	e043      	b.n	8003f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68b9      	ldr	r1, [r7, #8]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fabd 	bl	800444c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0208 	orr.w	r2, r2, #8
 8003ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0204 	bic.w	r2, r2, #4
 8003ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69d9      	ldr	r1, [r3, #28]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	61da      	str	r2, [r3, #28]
      break;
 8003f04:	e023      	b.n	8003f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fb11 	bl	8004534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69d9      	ldr	r1, [r3, #28]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	021a      	lsls	r2, r3, #8
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	61da      	str	r2, [r3, #28]
      break;
 8003f46:	e002      	b.n	8003f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_TIM_ConfigClockSource+0x1c>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e0b4      	b.n	80040e6 <HAL_TIM_ConfigClockSource+0x186>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb4:	d03e      	beq.n	8004034 <HAL_TIM_ConfigClockSource+0xd4>
 8003fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fba:	f200 8087 	bhi.w	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc2:	f000 8086 	beq.w	80040d2 <HAL_TIM_ConfigClockSource+0x172>
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fca:	d87f      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fcc:	2b70      	cmp	r3, #112	; 0x70
 8003fce:	d01a      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0xa6>
 8003fd0:	2b70      	cmp	r3, #112	; 0x70
 8003fd2:	d87b      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fd4:	2b60      	cmp	r3, #96	; 0x60
 8003fd6:	d050      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x11a>
 8003fd8:	2b60      	cmp	r3, #96	; 0x60
 8003fda:	d877      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b50      	cmp	r3, #80	; 0x50
 8003fde:	d03c      	beq.n	800405a <HAL_TIM_ConfigClockSource+0xfa>
 8003fe0:	2b50      	cmp	r3, #80	; 0x50
 8003fe2:	d873      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b40      	cmp	r3, #64	; 0x40
 8003fe6:	d058      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x13a>
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	d86f      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b30      	cmp	r3, #48	; 0x30
 8003fee:	d064      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8003ff0:	2b30      	cmp	r3, #48	; 0x30
 8003ff2:	d86b      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d060      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d867      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d05c      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8004000:	2b10      	cmp	r3, #16
 8004002:	d05a      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8004004:	e062      	b.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6899      	ldr	r1, [r3, #8]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f000 fb5d 	bl	80046d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004028:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	609a      	str	r2, [r3, #8]
      break;
 8004032:	e04f      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	6899      	ldr	r1, [r3, #8]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f000 fb46 	bl	80046d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004056:	609a      	str	r2, [r3, #8]
      break;
 8004058:	e03c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	461a      	mov	r2, r3
 8004068:	f000 faba 	bl	80045e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2150      	movs	r1, #80	; 0x50
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fb13 	bl	800469e <TIM_ITRx_SetConfig>
      break;
 8004078:	e02c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	461a      	mov	r2, r3
 8004088:	f000 fad9 	bl	800463e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2160      	movs	r1, #96	; 0x60
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fb03 	bl	800469e <TIM_ITRx_SetConfig>
      break;
 8004098:	e01c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6859      	ldr	r1, [r3, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	461a      	mov	r2, r3
 80040a8:	f000 fa9a 	bl	80045e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2140      	movs	r1, #64	; 0x40
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 faf3 	bl	800469e <TIM_ITRx_SetConfig>
      break;
 80040b8:	e00c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f000 faea 	bl	800469e <TIM_ITRx_SetConfig>
      break;
 80040ca:	e003      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
      break;
 80040d0:	e000      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a40      	ldr	r2, [pc, #256]	; (8004254 <TIM_Base_SetConfig+0x114>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <TIM_Base_SetConfig+0x40>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415e:	d00f      	beq.n	8004180 <TIM_Base_SetConfig+0x40>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a3d      	ldr	r2, [pc, #244]	; (8004258 <TIM_Base_SetConfig+0x118>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00b      	beq.n	8004180 <TIM_Base_SetConfig+0x40>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a3c      	ldr	r2, [pc, #240]	; (800425c <TIM_Base_SetConfig+0x11c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d007      	beq.n	8004180 <TIM_Base_SetConfig+0x40>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a3b      	ldr	r2, [pc, #236]	; (8004260 <TIM_Base_SetConfig+0x120>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_Base_SetConfig+0x40>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a3a      	ldr	r2, [pc, #232]	; (8004264 <TIM_Base_SetConfig+0x124>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d108      	bne.n	8004192 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a2f      	ldr	r2, [pc, #188]	; (8004254 <TIM_Base_SetConfig+0x114>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d02b      	beq.n	80041f2 <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a0:	d027      	beq.n	80041f2 <TIM_Base_SetConfig+0xb2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a2c      	ldr	r2, [pc, #176]	; (8004258 <TIM_Base_SetConfig+0x118>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d023      	beq.n	80041f2 <TIM_Base_SetConfig+0xb2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a2b      	ldr	r2, [pc, #172]	; (800425c <TIM_Base_SetConfig+0x11c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d01f      	beq.n	80041f2 <TIM_Base_SetConfig+0xb2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a2a      	ldr	r2, [pc, #168]	; (8004260 <TIM_Base_SetConfig+0x120>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d01b      	beq.n	80041f2 <TIM_Base_SetConfig+0xb2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a29      	ldr	r2, [pc, #164]	; (8004264 <TIM_Base_SetConfig+0x124>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d017      	beq.n	80041f2 <TIM_Base_SetConfig+0xb2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a28      	ldr	r2, [pc, #160]	; (8004268 <TIM_Base_SetConfig+0x128>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <TIM_Base_SetConfig+0xb2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a27      	ldr	r2, [pc, #156]	; (800426c <TIM_Base_SetConfig+0x12c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00f      	beq.n	80041f2 <TIM_Base_SetConfig+0xb2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a26      	ldr	r2, [pc, #152]	; (8004270 <TIM_Base_SetConfig+0x130>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00b      	beq.n	80041f2 <TIM_Base_SetConfig+0xb2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a25      	ldr	r2, [pc, #148]	; (8004274 <TIM_Base_SetConfig+0x134>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d007      	beq.n	80041f2 <TIM_Base_SetConfig+0xb2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a24      	ldr	r2, [pc, #144]	; (8004278 <TIM_Base_SetConfig+0x138>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d003      	beq.n	80041f2 <TIM_Base_SetConfig+0xb2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a23      	ldr	r2, [pc, #140]	; (800427c <TIM_Base_SetConfig+0x13c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d108      	bne.n	8004204 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a0a      	ldr	r2, [pc, #40]	; (8004254 <TIM_Base_SetConfig+0x114>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d003      	beq.n	8004238 <TIM_Base_SetConfig+0xf8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a0c      	ldr	r2, [pc, #48]	; (8004264 <TIM_Base_SetConfig+0x124>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d103      	bne.n	8004240 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	615a      	str	r2, [r3, #20]
}
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40010000 	.word	0x40010000
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40000c00 	.word	0x40000c00
 8004264:	40010400 	.word	0x40010400
 8004268:	40014000 	.word	0x40014000
 800426c:	40014400 	.word	0x40014400
 8004270:	40014800 	.word	0x40014800
 8004274:	40001800 	.word	0x40001800
 8004278:	40001c00 	.word	0x40001c00
 800427c:	40002000 	.word	0x40002000

08004280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f023 0201 	bic.w	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f023 0302 	bic.w	r3, r3, #2
 80042c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a20      	ldr	r2, [pc, #128]	; (8004358 <TIM_OC1_SetConfig+0xd8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_OC1_SetConfig+0x64>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a1f      	ldr	r2, [pc, #124]	; (800435c <TIM_OC1_SetConfig+0xdc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d10c      	bne.n	80042fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f023 0308 	bic.w	r3, r3, #8
 80042ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f023 0304 	bic.w	r3, r3, #4
 80042fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a15      	ldr	r2, [pc, #84]	; (8004358 <TIM_OC1_SetConfig+0xd8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d003      	beq.n	800430e <TIM_OC1_SetConfig+0x8e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a14      	ldr	r2, [pc, #80]	; (800435c <TIM_OC1_SetConfig+0xdc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d111      	bne.n	8004332 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800431c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	621a      	str	r2, [r3, #32]
}
 800434c:	bf00      	nop
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40010000 	.word	0x40010000
 800435c:	40010400 	.word	0x40010400

08004360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f023 0210 	bic.w	r2, r3, #16
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800438e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f023 0320 	bic.w	r3, r3, #32
 80043aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a22      	ldr	r2, [pc, #136]	; (8004444 <TIM_OC2_SetConfig+0xe4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d003      	beq.n	80043c8 <TIM_OC2_SetConfig+0x68>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a21      	ldr	r2, [pc, #132]	; (8004448 <TIM_OC2_SetConfig+0xe8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d10d      	bne.n	80043e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a17      	ldr	r2, [pc, #92]	; (8004444 <TIM_OC2_SetConfig+0xe4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <TIM_OC2_SetConfig+0x94>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a16      	ldr	r2, [pc, #88]	; (8004448 <TIM_OC2_SetConfig+0xe8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d113      	bne.n	800441c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	621a      	str	r2, [r3, #32]
}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40010000 	.word	0x40010000
 8004448:	40010400 	.word	0x40010400

0800444c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0303 	bic.w	r3, r3, #3
 8004482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4313      	orrs	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a21      	ldr	r2, [pc, #132]	; (800452c <TIM_OC3_SetConfig+0xe0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d003      	beq.n	80044b2 <TIM_OC3_SetConfig+0x66>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a20      	ldr	r2, [pc, #128]	; (8004530 <TIM_OC3_SetConfig+0xe4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d10d      	bne.n	80044ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	021b      	lsls	r3, r3, #8
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a16      	ldr	r2, [pc, #88]	; (800452c <TIM_OC3_SetConfig+0xe0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_OC3_SetConfig+0x92>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a15      	ldr	r2, [pc, #84]	; (8004530 <TIM_OC3_SetConfig+0xe4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d113      	bne.n	8004506 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	621a      	str	r2, [r3, #32]
}
 8004520:	bf00      	nop
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	40010000 	.word	0x40010000
 8004530:	40010400 	.word	0x40010400

08004534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800457e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	031b      	lsls	r3, r3, #12
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a12      	ldr	r2, [pc, #72]	; (80045d8 <TIM_OC4_SetConfig+0xa4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d003      	beq.n	800459c <TIM_OC4_SetConfig+0x68>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a11      	ldr	r2, [pc, #68]	; (80045dc <TIM_OC4_SetConfig+0xa8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d109      	bne.n	80045b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	019b      	lsls	r3, r3, #6
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40010000 	.word	0x40010000
 80045dc:	40010400 	.word	0x40010400

080045e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f023 0201 	bic.w	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800460a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f023 030a 	bic.w	r3, r3, #10
 800461c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	621a      	str	r2, [r3, #32]
}
 8004632:	bf00      	nop
 8004634:	371c      	adds	r7, #28
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800463e:	b480      	push	{r7}
 8004640:	b087      	sub	sp, #28
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f023 0210 	bic.w	r2, r3, #16
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	031b      	lsls	r3, r3, #12
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800467a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	621a      	str	r2, [r3, #32]
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f043 0307 	orr.w	r3, r3, #7
 80046c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	609a      	str	r2, [r3, #8]
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	021a      	lsls	r2, r3, #8
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	609a      	str	r2, [r3, #8]
}
 8004708:	bf00      	nop
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	2201      	movs	r2, #1
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a1a      	ldr	r2, [r3, #32]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	43db      	mvns	r3, r3
 8004736:	401a      	ands	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a1a      	ldr	r2, [r3, #32]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	fa01 f303 	lsl.w	r3, r1, r3
 800474c:	431a      	orrs	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	621a      	str	r2, [r3, #32]
}
 8004752:	bf00      	nop
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004774:	2302      	movs	r3, #2
 8004776:	e05a      	b.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a21      	ldr	r2, [pc, #132]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d022      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c4:	d01d      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d018      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1a      	ldr	r2, [pc, #104]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00e      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a18      	ldr	r2, [pc, #96]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d009      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a17      	ldr	r2, [pc, #92]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a15      	ldr	r2, [pc, #84]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10c      	bne.n	800481c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	4313      	orrs	r3, r2
 8004812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40010000 	.word	0x40010000
 8004840:	40000400 	.word	0x40000400
 8004844:	40000800 	.word	0x40000800
 8004848:	40000c00 	.word	0x40000c00
 800484c:	40010400 	.word	0x40010400
 8004850:	40014000 	.word	0x40014000
 8004854:	40001800 	.word	0x40001800

08004858 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004870:	2302      	movs	r3, #2
 8004872:	e03d      	b.n	80048f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e03f      	b.n	80049b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fc ff36 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2224      	movs	r2, #36	; 0x24
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fc7b 	bl	8005264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800497c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800498c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800499c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b0ba      	sub	sp, #232	; 0xe8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80049fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10f      	bne.n	8004a26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <HAL_UART_IRQHandler+0x66>
 8004a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fb65 	bl	80050ee <UART_Receive_IT>
      return;
 8004a24:	e256      	b.n	8004ed4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 80de 	beq.w	8004bec <HAL_UART_IRQHandler+0x22c>
 8004a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d106      	bne.n	8004a4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a40:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 80d1 	beq.w	8004bec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00b      	beq.n	8004a6e <HAL_UART_IRQHandler+0xae>
 8004a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f043 0201 	orr.w	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00b      	beq.n	8004a92 <HAL_UART_IRQHandler+0xd2>
 8004a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f043 0202 	orr.w	r2, r3, #2
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00b      	beq.n	8004ab6 <HAL_UART_IRQHandler+0xf6>
 8004a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d005      	beq.n	8004ab6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	f043 0204 	orr.w	r2, r3, #4
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d011      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x126>
 8004ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d105      	bne.n	8004ada <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f043 0208 	orr.w	r2, r3, #8
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 81ed 	beq.w	8004eca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_UART_IRQHandler+0x14e>
 8004afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 faf0 	bl	80050ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b18:	2b40      	cmp	r3, #64	; 0x40
 8004b1a:	bf0c      	ite	eq
 8004b1c:	2301      	moveq	r3, #1
 8004b1e:	2300      	movne	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <HAL_UART_IRQHandler+0x17a>
 8004b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d04f      	beq.n	8004bda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f9f8 	bl	8004f30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	d141      	bne.n	8004bd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3314      	adds	r3, #20
 8004b54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3314      	adds	r3, #20
 8004b76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1d9      	bne.n	8004b4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d013      	beq.n	8004bca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	4a7d      	ldr	r2, [pc, #500]	; (8004d9c <HAL_UART_IRQHandler+0x3dc>)
 8004ba8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fd fd35 	bl	800261e <HAL_DMA_Abort_IT>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d016      	beq.n	8004be8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc8:	e00e      	b.n	8004be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f99a 	bl	8004f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd0:	e00a      	b.n	8004be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f996 	bl	8004f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd8:	e006      	b.n	8004be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f992 	bl	8004f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004be6:	e170      	b.n	8004eca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be8:	bf00      	nop
    return;
 8004bea:	e16e      	b.n	8004eca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	f040 814a 	bne.w	8004e8a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 8143 	beq.w	8004e8a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 813c 	beq.w	8004e8a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c12:	2300      	movs	r3, #0
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c32:	2b40      	cmp	r3, #64	; 0x40
 8004c34:	f040 80b4 	bne.w	8004da0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8140 	beq.w	8004ece <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c56:	429a      	cmp	r2, r3
 8004c58:	f080 8139 	bcs.w	8004ece <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6e:	f000 8088 	beq.w	8004d82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ca2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004caa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1d9      	bne.n	8004c72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3314      	adds	r3, #20
 8004cc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc8:	e853 3f00 	ldrex	r3, [r3]
 8004ccc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cd0:	f023 0301 	bic.w	r3, r3, #1
 8004cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3314      	adds	r3, #20
 8004cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ce2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ce6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1e1      	bne.n	8004cbe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3314      	adds	r3, #20
 8004d00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3314      	adds	r3, #20
 8004d1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d26:	e841 2300 	strex	r3, r2, [r1]
 8004d2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1e3      	bne.n	8004cfa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	330c      	adds	r3, #12
 8004d46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d52:	f023 0310 	bic.w	r3, r3, #16
 8004d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	330c      	adds	r3, #12
 8004d60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d64:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d66:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e3      	bne.n	8004d40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fd fbde 	bl	800253e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	4619      	mov	r1, r3
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f8c0 	bl	8004f18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d98:	e099      	b.n	8004ece <HAL_UART_IRQHandler+0x50e>
 8004d9a:	bf00      	nop
 8004d9c:	08004ff7 	.word	0x08004ff7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 808b 	beq.w	8004ed2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004dbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8086 	beq.w	8004ed2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ddc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004dea:	647a      	str	r2, [r7, #68]	; 0x44
 8004dec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004df0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e3      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3314      	adds	r3, #20
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3314      	adds	r3, #20
 8004e1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e22:	633a      	str	r2, [r7, #48]	; 0x30
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2a:	e841 2300 	strex	r3, r2, [r1]
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1e3      	bne.n	8004dfe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	e853 3f00 	ldrex	r3, [r3]
 8004e52:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0310 	bic.w	r3, r3, #16
 8004e5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	330c      	adds	r3, #12
 8004e64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e68:	61fa      	str	r2, [r7, #28]
 8004e6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	69b9      	ldr	r1, [r7, #24]
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	e841 2300 	strex	r3, r2, [r1]
 8004e74:	617b      	str	r3, [r7, #20]
   return(result);
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e3      	bne.n	8004e44 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e80:	4619      	mov	r1, r3
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f848 	bl	8004f18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e88:	e023      	b.n	8004ed2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d009      	beq.n	8004eaa <HAL_UART_IRQHandler+0x4ea>
 8004e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f8bb 	bl	800501e <UART_Transmit_IT>
    return;
 8004ea8:	e014      	b.n	8004ed4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00e      	beq.n	8004ed4 <HAL_UART_IRQHandler+0x514>
 8004eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d008      	beq.n	8004ed4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f8fb 	bl	80050be <UART_EndTransmit_IT>
    return;
 8004ec8:	e004      	b.n	8004ed4 <HAL_UART_IRQHandler+0x514>
    return;
 8004eca:	bf00      	nop
 8004ecc:	e002      	b.n	8004ed4 <HAL_UART_IRQHandler+0x514>
      return;
 8004ece:	bf00      	nop
 8004ed0:	e000      	b.n	8004ed4 <HAL_UART_IRQHandler+0x514>
      return;
 8004ed2:	bf00      	nop
  }
}
 8004ed4:	37e8      	adds	r7, #232	; 0xe8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop

08004edc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b095      	sub	sp, #84	; 0x54
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	330c      	adds	r3, #12
 8004f56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f58:	643a      	str	r2, [r7, #64]	; 0x40
 8004f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e5      	bne.n	8004f38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3314      	adds	r3, #20
 8004f72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f023 0301 	bic.w	r3, r3, #1
 8004f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3314      	adds	r3, #20
 8004f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e5      	bne.n	8004f6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d119      	bne.n	8004fdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	330c      	adds	r3, #12
 8004fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	e853 3f00 	ldrex	r3, [r3]
 8004fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f023 0310 	bic.w	r3, r3, #16
 8004fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	330c      	adds	r3, #12
 8004fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fc8:	61ba      	str	r2, [r7, #24]
 8004fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6979      	ldr	r1, [r7, #20]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e5      	bne.n	8004fa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fea:	bf00      	nop
 8004fec:	3754      	adds	r7, #84	; 0x54
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f7ff ff77 	bl	8004f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800501e:	b480      	push	{r7}
 8005020:	b085      	sub	sp, #20
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b21      	cmp	r3, #33	; 0x21
 8005030:	d13e      	bne.n	80050b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503a:	d114      	bne.n	8005066 <UART_Transmit_IT+0x48>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d110      	bne.n	8005066 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005058:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	1c9a      	adds	r2, r3, #2
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	621a      	str	r2, [r3, #32]
 8005064:	e008      	b.n	8005078 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	1c59      	adds	r1, r3, #1
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6211      	str	r1, [r2, #32]
 8005070:	781a      	ldrb	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29b      	uxth	r3, r3
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	4619      	mov	r1, r3
 8005086:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10f      	bne.n	80050ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800509a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e000      	b.n	80050b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
  }
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff fefc 	bl	8004edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b08c      	sub	sp, #48	; 0x30
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b22      	cmp	r3, #34	; 0x22
 8005100:	f040 80ab 	bne.w	800525a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510c:	d117      	bne.n	800513e <UART_Receive_IT+0x50>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d113      	bne.n	800513e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	b29b      	uxth	r3, r3
 8005128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512c:	b29a      	uxth	r2, r3
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005136:	1c9a      	adds	r2, r3, #2
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	629a      	str	r2, [r3, #40]	; 0x28
 800513c:	e026      	b.n	800518c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005144:	2300      	movs	r3, #0
 8005146:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005150:	d007      	beq.n	8005162 <UART_Receive_IT+0x74>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10a      	bne.n	8005170 <UART_Receive_IT+0x82>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	b2da      	uxtb	r2, r3
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	e008      	b.n	8005182 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	b2db      	uxtb	r3, r3
 8005178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800517c:	b2da      	uxtb	r2, r3
 800517e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005180:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29b      	uxth	r3, r3
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	4619      	mov	r1, r3
 800519a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800519c:	2b00      	cmp	r3, #0
 800519e:	d15a      	bne.n	8005256 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0220 	bic.w	r2, r2, #32
 80051ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695a      	ldr	r2, [r3, #20]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0201 	bic.w	r2, r2, #1
 80051ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d135      	bne.n	800524c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	330c      	adds	r3, #12
 80051ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	613b      	str	r3, [r7, #16]
   return(result);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f023 0310 	bic.w	r3, r3, #16
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	330c      	adds	r3, #12
 8005204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005206:	623a      	str	r2, [r7, #32]
 8005208:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	69f9      	ldr	r1, [r7, #28]
 800520c:	6a3a      	ldr	r2, [r7, #32]
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	61bb      	str	r3, [r7, #24]
   return(result);
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e5      	bne.n	80051e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b10      	cmp	r3, #16
 8005226:	d10a      	bne.n	800523e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff fe67 	bl	8004f18 <HAL_UARTEx_RxEventCallback>
 800524a:	e002      	b.n	8005252 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fe4f 	bl	8004ef0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	e002      	b.n	800525c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	e000      	b.n	800525c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800525a:	2302      	movs	r3, #2
  }
}
 800525c:	4618      	mov	r0, r3
 800525e:	3730      	adds	r7, #48	; 0x30
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005268:	b0c0      	sub	sp, #256	; 0x100
 800526a:	af00      	add	r7, sp, #0
 800526c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005280:	68d9      	ldr	r1, [r3, #12]
 8005282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	ea40 0301 	orr.w	r3, r0, r1
 800528c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800528e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	431a      	orrs	r2, r3
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	431a      	orrs	r2, r3
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052bc:	f021 010c 	bic.w	r1, r1, #12
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052ca:	430b      	orrs	r3, r1
 80052cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052de:	6999      	ldr	r1, [r3, #24]
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	ea40 0301 	orr.w	r3, r0, r1
 80052ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4b8f      	ldr	r3, [pc, #572]	; (8005530 <UART_SetConfig+0x2cc>)
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d005      	beq.n	8005304 <UART_SetConfig+0xa0>
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b8d      	ldr	r3, [pc, #564]	; (8005534 <UART_SetConfig+0x2d0>)
 8005300:	429a      	cmp	r2, r3
 8005302:	d104      	bne.n	800530e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005304:	f7fd fc62 	bl	8002bcc <HAL_RCC_GetPCLK2Freq>
 8005308:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800530c:	e003      	b.n	8005316 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800530e:	f7fd fc49 	bl	8002ba4 <HAL_RCC_GetPCLK1Freq>
 8005312:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005320:	f040 810c 	bne.w	800553c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005328:	2200      	movs	r2, #0
 800532a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800532e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005332:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005336:	4622      	mov	r2, r4
 8005338:	462b      	mov	r3, r5
 800533a:	1891      	adds	r1, r2, r2
 800533c:	65b9      	str	r1, [r7, #88]	; 0x58
 800533e:	415b      	adcs	r3, r3
 8005340:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005346:	4621      	mov	r1, r4
 8005348:	eb12 0801 	adds.w	r8, r2, r1
 800534c:	4629      	mov	r1, r5
 800534e:	eb43 0901 	adc.w	r9, r3, r1
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800535e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005366:	4690      	mov	r8, r2
 8005368:	4699      	mov	r9, r3
 800536a:	4623      	mov	r3, r4
 800536c:	eb18 0303 	adds.w	r3, r8, r3
 8005370:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005374:	462b      	mov	r3, r5
 8005376:	eb49 0303 	adc.w	r3, r9, r3
 800537a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800537e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800538a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800538e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005392:	460b      	mov	r3, r1
 8005394:	18db      	adds	r3, r3, r3
 8005396:	653b      	str	r3, [r7, #80]	; 0x50
 8005398:	4613      	mov	r3, r2
 800539a:	eb42 0303 	adc.w	r3, r2, r3
 800539e:	657b      	str	r3, [r7, #84]	; 0x54
 80053a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053a8:	f7fa ff2c 	bl	8000204 <__aeabi_uldivmod>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4b61      	ldr	r3, [pc, #388]	; (8005538 <UART_SetConfig+0x2d4>)
 80053b2:	fba3 2302 	umull	r2, r3, r3, r2
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	011c      	lsls	r4, r3, #4
 80053ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053be:	2200      	movs	r2, #0
 80053c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053cc:	4642      	mov	r2, r8
 80053ce:	464b      	mov	r3, r9
 80053d0:	1891      	adds	r1, r2, r2
 80053d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80053d4:	415b      	adcs	r3, r3
 80053d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053dc:	4641      	mov	r1, r8
 80053de:	eb12 0a01 	adds.w	sl, r2, r1
 80053e2:	4649      	mov	r1, r9
 80053e4:	eb43 0b01 	adc.w	fp, r3, r1
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053fc:	4692      	mov	sl, r2
 80053fe:	469b      	mov	fp, r3
 8005400:	4643      	mov	r3, r8
 8005402:	eb1a 0303 	adds.w	r3, sl, r3
 8005406:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800540a:	464b      	mov	r3, r9
 800540c:	eb4b 0303 	adc.w	r3, fp, r3
 8005410:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005420:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005424:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005428:	460b      	mov	r3, r1
 800542a:	18db      	adds	r3, r3, r3
 800542c:	643b      	str	r3, [r7, #64]	; 0x40
 800542e:	4613      	mov	r3, r2
 8005430:	eb42 0303 	adc.w	r3, r2, r3
 8005434:	647b      	str	r3, [r7, #68]	; 0x44
 8005436:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800543a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800543e:	f7fa fee1 	bl	8000204 <__aeabi_uldivmod>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4611      	mov	r1, r2
 8005448:	4b3b      	ldr	r3, [pc, #236]	; (8005538 <UART_SetConfig+0x2d4>)
 800544a:	fba3 2301 	umull	r2, r3, r3, r1
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	2264      	movs	r2, #100	; 0x64
 8005452:	fb02 f303 	mul.w	r3, r2, r3
 8005456:	1acb      	subs	r3, r1, r3
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800545e:	4b36      	ldr	r3, [pc, #216]	; (8005538 <UART_SetConfig+0x2d4>)
 8005460:	fba3 2302 	umull	r2, r3, r3, r2
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800546c:	441c      	add	r4, r3
 800546e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005472:	2200      	movs	r2, #0
 8005474:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005478:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800547c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005480:	4642      	mov	r2, r8
 8005482:	464b      	mov	r3, r9
 8005484:	1891      	adds	r1, r2, r2
 8005486:	63b9      	str	r1, [r7, #56]	; 0x38
 8005488:	415b      	adcs	r3, r3
 800548a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800548c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005490:	4641      	mov	r1, r8
 8005492:	1851      	adds	r1, r2, r1
 8005494:	6339      	str	r1, [r7, #48]	; 0x30
 8005496:	4649      	mov	r1, r9
 8005498:	414b      	adcs	r3, r1
 800549a:	637b      	str	r3, [r7, #52]	; 0x34
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054a8:	4659      	mov	r1, fp
 80054aa:	00cb      	lsls	r3, r1, #3
 80054ac:	4651      	mov	r1, sl
 80054ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054b2:	4651      	mov	r1, sl
 80054b4:	00ca      	lsls	r2, r1, #3
 80054b6:	4610      	mov	r0, r2
 80054b8:	4619      	mov	r1, r3
 80054ba:	4603      	mov	r3, r0
 80054bc:	4642      	mov	r2, r8
 80054be:	189b      	adds	r3, r3, r2
 80054c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054c4:	464b      	mov	r3, r9
 80054c6:	460a      	mov	r2, r1
 80054c8:	eb42 0303 	adc.w	r3, r2, r3
 80054cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054e4:	460b      	mov	r3, r1
 80054e6:	18db      	adds	r3, r3, r3
 80054e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ea:	4613      	mov	r3, r2
 80054ec:	eb42 0303 	adc.w	r3, r2, r3
 80054f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054fa:	f7fa fe83 	bl	8000204 <__aeabi_uldivmod>
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <UART_SetConfig+0x2d4>)
 8005504:	fba3 1302 	umull	r1, r3, r3, r2
 8005508:	095b      	lsrs	r3, r3, #5
 800550a:	2164      	movs	r1, #100	; 0x64
 800550c:	fb01 f303 	mul.w	r3, r1, r3
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	3332      	adds	r3, #50	; 0x32
 8005516:	4a08      	ldr	r2, [pc, #32]	; (8005538 <UART_SetConfig+0x2d4>)
 8005518:	fba2 2303 	umull	r2, r3, r2, r3
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	f003 0207 	and.w	r2, r3, #7
 8005522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4422      	add	r2, r4
 800552a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800552c:	e105      	b.n	800573a <UART_SetConfig+0x4d6>
 800552e:	bf00      	nop
 8005530:	40011000 	.word	0x40011000
 8005534:	40011400 	.word	0x40011400
 8005538:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800553c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005540:	2200      	movs	r2, #0
 8005542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005546:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800554a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800554e:	4642      	mov	r2, r8
 8005550:	464b      	mov	r3, r9
 8005552:	1891      	adds	r1, r2, r2
 8005554:	6239      	str	r1, [r7, #32]
 8005556:	415b      	adcs	r3, r3
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
 800555a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800555e:	4641      	mov	r1, r8
 8005560:	1854      	adds	r4, r2, r1
 8005562:	4649      	mov	r1, r9
 8005564:	eb43 0501 	adc.w	r5, r3, r1
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	00eb      	lsls	r3, r5, #3
 8005572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005576:	00e2      	lsls	r2, r4, #3
 8005578:	4614      	mov	r4, r2
 800557a:	461d      	mov	r5, r3
 800557c:	4643      	mov	r3, r8
 800557e:	18e3      	adds	r3, r4, r3
 8005580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005584:	464b      	mov	r3, r9
 8005586:	eb45 0303 	adc.w	r3, r5, r3
 800558a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800559a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	f04f 0300 	mov.w	r3, #0
 80055a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055aa:	4629      	mov	r1, r5
 80055ac:	008b      	lsls	r3, r1, #2
 80055ae:	4621      	mov	r1, r4
 80055b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055b4:	4621      	mov	r1, r4
 80055b6:	008a      	lsls	r2, r1, #2
 80055b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055bc:	f7fa fe22 	bl	8000204 <__aeabi_uldivmod>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4b60      	ldr	r3, [pc, #384]	; (8005748 <UART_SetConfig+0x4e4>)
 80055c6:	fba3 2302 	umull	r2, r3, r3, r2
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	011c      	lsls	r4, r3, #4
 80055ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055e0:	4642      	mov	r2, r8
 80055e2:	464b      	mov	r3, r9
 80055e4:	1891      	adds	r1, r2, r2
 80055e6:	61b9      	str	r1, [r7, #24]
 80055e8:	415b      	adcs	r3, r3
 80055ea:	61fb      	str	r3, [r7, #28]
 80055ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055f0:	4641      	mov	r1, r8
 80055f2:	1851      	adds	r1, r2, r1
 80055f4:	6139      	str	r1, [r7, #16]
 80055f6:	4649      	mov	r1, r9
 80055f8:	414b      	adcs	r3, r1
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005608:	4659      	mov	r1, fp
 800560a:	00cb      	lsls	r3, r1, #3
 800560c:	4651      	mov	r1, sl
 800560e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005612:	4651      	mov	r1, sl
 8005614:	00ca      	lsls	r2, r1, #3
 8005616:	4610      	mov	r0, r2
 8005618:	4619      	mov	r1, r3
 800561a:	4603      	mov	r3, r0
 800561c:	4642      	mov	r2, r8
 800561e:	189b      	adds	r3, r3, r2
 8005620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005624:	464b      	mov	r3, r9
 8005626:	460a      	mov	r2, r1
 8005628:	eb42 0303 	adc.w	r3, r2, r3
 800562c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	67bb      	str	r3, [r7, #120]	; 0x78
 800563a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005648:	4649      	mov	r1, r9
 800564a:	008b      	lsls	r3, r1, #2
 800564c:	4641      	mov	r1, r8
 800564e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005652:	4641      	mov	r1, r8
 8005654:	008a      	lsls	r2, r1, #2
 8005656:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800565a:	f7fa fdd3 	bl	8000204 <__aeabi_uldivmod>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	4b39      	ldr	r3, [pc, #228]	; (8005748 <UART_SetConfig+0x4e4>)
 8005664:	fba3 1302 	umull	r1, r3, r3, r2
 8005668:	095b      	lsrs	r3, r3, #5
 800566a:	2164      	movs	r1, #100	; 0x64
 800566c:	fb01 f303 	mul.w	r3, r1, r3
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	3332      	adds	r3, #50	; 0x32
 8005676:	4a34      	ldr	r2, [pc, #208]	; (8005748 <UART_SetConfig+0x4e4>)
 8005678:	fba2 2303 	umull	r2, r3, r2, r3
 800567c:	095b      	lsrs	r3, r3, #5
 800567e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005682:	441c      	add	r4, r3
 8005684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005688:	2200      	movs	r2, #0
 800568a:	673b      	str	r3, [r7, #112]	; 0x70
 800568c:	677a      	str	r2, [r7, #116]	; 0x74
 800568e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005692:	4642      	mov	r2, r8
 8005694:	464b      	mov	r3, r9
 8005696:	1891      	adds	r1, r2, r2
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	415b      	adcs	r3, r3
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056a2:	4641      	mov	r1, r8
 80056a4:	1851      	adds	r1, r2, r1
 80056a6:	6039      	str	r1, [r7, #0]
 80056a8:	4649      	mov	r1, r9
 80056aa:	414b      	adcs	r3, r1
 80056ac:	607b      	str	r3, [r7, #4]
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	f04f 0300 	mov.w	r3, #0
 80056b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056ba:	4659      	mov	r1, fp
 80056bc:	00cb      	lsls	r3, r1, #3
 80056be:	4651      	mov	r1, sl
 80056c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056c4:	4651      	mov	r1, sl
 80056c6:	00ca      	lsls	r2, r1, #3
 80056c8:	4610      	mov	r0, r2
 80056ca:	4619      	mov	r1, r3
 80056cc:	4603      	mov	r3, r0
 80056ce:	4642      	mov	r2, r8
 80056d0:	189b      	adds	r3, r3, r2
 80056d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80056d4:	464b      	mov	r3, r9
 80056d6:	460a      	mov	r2, r1
 80056d8:	eb42 0303 	adc.w	r3, r2, r3
 80056dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	663b      	str	r3, [r7, #96]	; 0x60
 80056e8:	667a      	str	r2, [r7, #100]	; 0x64
 80056ea:	f04f 0200 	mov.w	r2, #0
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056f6:	4649      	mov	r1, r9
 80056f8:	008b      	lsls	r3, r1, #2
 80056fa:	4641      	mov	r1, r8
 80056fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005700:	4641      	mov	r1, r8
 8005702:	008a      	lsls	r2, r1, #2
 8005704:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005708:	f7fa fd7c 	bl	8000204 <__aeabi_uldivmod>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4b0d      	ldr	r3, [pc, #52]	; (8005748 <UART_SetConfig+0x4e4>)
 8005712:	fba3 1302 	umull	r1, r3, r3, r2
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	2164      	movs	r1, #100	; 0x64
 800571a:	fb01 f303 	mul.w	r3, r1, r3
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	3332      	adds	r3, #50	; 0x32
 8005724:	4a08      	ldr	r2, [pc, #32]	; (8005748 <UART_SetConfig+0x4e4>)
 8005726:	fba2 2303 	umull	r2, r3, r2, r3
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	f003 020f 	and.w	r2, r3, #15
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4422      	add	r2, r4
 8005738:	609a      	str	r2, [r3, #8]
}
 800573a:	bf00      	nop
 800573c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005740:	46bd      	mov	sp, r7
 8005742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005746:	bf00      	nop
 8005748:	51eb851f 	.word	0x51eb851f

0800574c <__libc_init_array>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	4d0d      	ldr	r5, [pc, #52]	; (8005784 <__libc_init_array+0x38>)
 8005750:	4c0d      	ldr	r4, [pc, #52]	; (8005788 <__libc_init_array+0x3c>)
 8005752:	1b64      	subs	r4, r4, r5
 8005754:	10a4      	asrs	r4, r4, #2
 8005756:	2600      	movs	r6, #0
 8005758:	42a6      	cmp	r6, r4
 800575a:	d109      	bne.n	8005770 <__libc_init_array+0x24>
 800575c:	4d0b      	ldr	r5, [pc, #44]	; (800578c <__libc_init_array+0x40>)
 800575e:	4c0c      	ldr	r4, [pc, #48]	; (8005790 <__libc_init_array+0x44>)
 8005760:	f000 f820 	bl	80057a4 <_init>
 8005764:	1b64      	subs	r4, r4, r5
 8005766:	10a4      	asrs	r4, r4, #2
 8005768:	2600      	movs	r6, #0
 800576a:	42a6      	cmp	r6, r4
 800576c:	d105      	bne.n	800577a <__libc_init_array+0x2e>
 800576e:	bd70      	pop	{r4, r5, r6, pc}
 8005770:	f855 3b04 	ldr.w	r3, [r5], #4
 8005774:	4798      	blx	r3
 8005776:	3601      	adds	r6, #1
 8005778:	e7ee      	b.n	8005758 <__libc_init_array+0xc>
 800577a:	f855 3b04 	ldr.w	r3, [r5], #4
 800577e:	4798      	blx	r3
 8005780:	3601      	adds	r6, #1
 8005782:	e7f2      	b.n	800576a <__libc_init_array+0x1e>
 8005784:	080057dc 	.word	0x080057dc
 8005788:	080057dc 	.word	0x080057dc
 800578c:	080057dc 	.word	0x080057dc
 8005790:	080057e0 	.word	0x080057e0

08005794 <memset>:
 8005794:	4402      	add	r2, r0
 8005796:	4603      	mov	r3, r0
 8005798:	4293      	cmp	r3, r2
 800579a:	d100      	bne.n	800579e <memset+0xa>
 800579c:	4770      	bx	lr
 800579e:	f803 1b01 	strb.w	r1, [r3], #1
 80057a2:	e7f9      	b.n	8005798 <memset+0x4>

080057a4 <_init>:
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	bf00      	nop
 80057a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057aa:	bc08      	pop	{r3}
 80057ac:	469e      	mov	lr, r3
 80057ae:	4770      	bx	lr

080057b0 <_fini>:
 80057b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b2:	bf00      	nop
 80057b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b6:	bc08      	pop	{r3}
 80057b8:	469e      	mov	lr, r3
 80057ba:	4770      	bx	lr
