
plusServo0721.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080041bc  080041bc  000141bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d4  080041d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041d4  080041d4  000141d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041dc  080041dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041dc  080041dc  000141dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041e0  080041e0  000141e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000000c  080041f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080041f0  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcbb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae1  00000000  00000000  0002dcf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  0002f7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00030438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f26  00000000  00000000  00031000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df47  00000000  00000000  00051f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccbe6  00000000  00000000  0005fe6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012ca53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003460  00000000  00000000  0012caa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080041a4 	.word	0x080041a4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080041a4 	.word	0x080041a4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_TIM_IC_CaptureCallback>:
int16_t count3 = 0;
int16_t count4 = 0;
int16_t count5 = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a20      	ldr	r2, [pc, #128]	; (8000594 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d10a      	bne.n	800052e <HAL_TIM_IC_CaptureCallback+0x26>
		counter2 = __HAL_TIM_GET_COUNTER(htim);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051e:	4a1e      	ldr	r2, [pc, #120]	; (8000598 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000520:	6013      	str	r3, [r2, #0]
		count2 = (int16_t)counter2;
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	b21a      	sxth	r2, r3
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <HAL_TIM_IC_CaptureCallback+0x94>)
 800052a:	801a      	strh	r2, [r3, #0]
	else if(htim == &htim5){
			counter5 = __HAL_TIM_GET_COUNTER(htim);
			count5 = (int16_t)counter5;
		}

}
 800052c:	e02b      	b.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
	else if(htim == &htim3){
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a1b      	ldr	r2, [pc, #108]	; (80005a0 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d10a      	bne.n	800054c <HAL_TIM_IC_CaptureCallback+0x44>
			counter3 = __HAL_TIM_GET_COUNTER(htim);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053c:	4a19      	ldr	r2, [pc, #100]	; (80005a4 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800053e:	6013      	str	r3, [r2, #0]
			count3 = (int16_t)counter3;
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	b21a      	sxth	r2, r3
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000548:	801a      	strh	r2, [r3, #0]
}
 800054a:	e01c      	b.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
	else if(htim == &htim4){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a17      	ldr	r2, [pc, #92]	; (80005ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d10a      	bne.n	800056a <HAL_TIM_IC_CaptureCallback+0x62>
			counter4 = __HAL_TIM_GET_COUNTER(htim);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055a:	4a15      	ldr	r2, [pc, #84]	; (80005b0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800055c:	6013      	str	r3, [r2, #0]
			count4 = (int16_t)counter4;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	b21a      	sxth	r2, r3
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000566:	801a      	strh	r2, [r3, #0]
}
 8000568:	e00d      	b.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
	else if(htim == &htim5){
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d109      	bne.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
			counter5 = __HAL_TIM_GET_COUNTER(htim);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000578:	4a10      	ldr	r2, [pc, #64]	; (80005bc <HAL_TIM_IC_CaptureCallback+0xb4>)
 800057a:	6013      	str	r3, [r2, #0]
			count5 = (int16_t)counter5;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_TIM_IC_CaptureCallback+0xb4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	b21a      	sxth	r2, r3
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000584:	801a      	strh	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000070 	.word	0x20000070
 8000598:	20000264 	.word	0x20000264
 800059c:	20000274 	.word	0x20000274
 80005a0:	200000b8 	.word	0x200000b8
 80005a4:	20000268 	.word	0x20000268
 80005a8:	20000276 	.word	0x20000276
 80005ac:	20000100 	.word	0x20000100
 80005b0:	2000026c 	.word	0x2000026c
 80005b4:	20000278 	.word	0x20000278
 80005b8:	20000148 	.word	0x20000148
 80005bc:	20000270 	.word	0x20000270
 80005c0:	2000027a 	.word	0x2000027a

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 ffff 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f88b 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 fc27 	bl	8000e24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 fbfb 	bl	8000dd0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005da:	f000 f9bf 	bl	800095c <MX_TIM2_Init>
  MX_TIM3_Init();
 80005de:	f000 fa11 	bl	8000a04 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005e2:	f000 fa63 	bl	8000aac <MX_TIM4_Init>
  MX_TIM5_Init();
 80005e6:	f000 fab5 	bl	8000b54 <MX_TIM5_Init>
  MX_TIM1_Init();
 80005ea:	f000 f8e9 	bl	80007c0 <MX_TIM1_Init>
  MX_TIM10_Init();
 80005ee:	f000 fba1 	bl	8000d34 <MX_TIM10_Init>
  MX_TIM8_Init();
 80005f2:	f000 fb03 	bl	8000bfc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  // Encoder
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80005f6:	213c      	movs	r1, #60	; 0x3c
 80005f8:	4834      	ldr	r0, [pc, #208]	; (80006cc <main+0x108>)
 80005fa:	f002 fb8b 	bl	8002d14 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80005fe:	213c      	movs	r1, #60	; 0x3c
 8000600:	4833      	ldr	r0, [pc, #204]	; (80006d0 <main+0x10c>)
 8000602:	f002 fb87 	bl	8002d14 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000606:	213c      	movs	r1, #60	; 0x3c
 8000608:	4832      	ldr	r0, [pc, #200]	; (80006d4 <main+0x110>)
 800060a:	f002 fb83 	bl	8002d14 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 800060e:	213c      	movs	r1, #60	; 0x3c
 8000610:	4831      	ldr	r0, [pc, #196]	; (80006d8 <main+0x114>)
 8000612:	f002 fb7f 	bl	8002d14 <HAL_TIM_Encoder_Start_IT>

  // start DC motor PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000616:	2100      	movs	r1, #0
 8000618:	4830      	ldr	r0, [pc, #192]	; (80006dc <main+0x118>)
 800061a:	f002 f9b3 	bl	8002984 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800061e:	2104      	movs	r1, #4
 8000620:	482e      	ldr	r0, [pc, #184]	; (80006dc <main+0x118>)
 8000622:	f002 f9af 	bl	8002984 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000626:	2108      	movs	r1, #8
 8000628:	482c      	ldr	r0, [pc, #176]	; (80006dc <main+0x118>)
 800062a:	f002 f9ab 	bl	8002984 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800062e:	210c      	movs	r1, #12
 8000630:	482a      	ldr	r0, [pc, #168]	; (80006dc <main+0x118>)
 8000632:	f002 f9a7 	bl	8002984 <HAL_TIM_PWM_Start>

  // Servo PWM
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000636:	2104      	movs	r1, #4
 8000638:	4829      	ldr	r0, [pc, #164]	; (80006e0 <main+0x11c>)
 800063a:	f002 f9a3 	bl	8002984 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800063e:	2108      	movs	r1, #8
 8000640:	4827      	ldr	r0, [pc, #156]	; (80006e0 <main+0x11c>)
 8000642:	f002 f99f 	bl	8002984 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000646:	210c      	movs	r1, #12
 8000648:	4825      	ldr	r0, [pc, #148]	; (80006e0 <main+0x11c>)
 800064a:	f002 f99b 	bl	8002984 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 800064e:	2100      	movs	r1, #0
 8000650:	4824      	ldr	r0, [pc, #144]	; (80006e4 <main+0x120>)
 8000652:	f002 f997 	bl	8002984 <HAL_TIM_PWM_Start>
  htim8.Instance->CCR2 = 75;
 8000656:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <main+0x11c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	224b      	movs	r2, #75	; 0x4b
 800065c:	639a      	str	r2, [r3, #56]	; 0x38
  htim8.Instance->CCR3 = 75;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <main+0x11c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	224b      	movs	r2, #75	; 0x4b
 8000664:	63da      	str	r2, [r3, #60]	; 0x3c
  htim8.Instance->CCR4 = 75;
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <main+0x11c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	224b      	movs	r2, #75	; 0x4b
 800066c:	641a      	str	r2, [r3, #64]	; 0x40
  htim10.Instance->CCR1 = 75;
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <main+0x120>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	224b      	movs	r2, #75	; 0x4b
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(1000);
 8000676:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067a:	f001 f819 	bl	80016b0 <HAL_Delay>
	  /*htim1.Instance-> CCR1 = 80;
	  htim1.Instance-> CCR2 = 80;
	  htim1.Instance-> CCR3 = 80;
	  htim1.Instance-> CCR4 = 80;*/

 	  int i=0;
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 	  while(i<10)
 8000682:	e01e      	b.n	80006c2 <main+0xfe>
 	  {
 		  htim8.Instance->CCR2 = 32-i;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f1c3 0220 	rsb	r2, r3, #32
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <main+0x11c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	639a      	str	r2, [r3, #56]	; 0x38
 		  htim8.Instance->CCR3 = 37+i;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <main+0x11c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	63da      	str	r2, [r3, #60]	; 0x3c
 		  htim8.Instance->CCR4 = 44-i;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f1c3 022c 	rsb	r2, r3, #44	; 0x2c
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <main+0x11c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	641a      	str	r2, [r3, #64]	; 0x40
 		  htim10.Instance->CCR1 = 54+i;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f103 0236 	add.w	r2, r3, #54	; 0x36
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <main+0x120>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	635a      	str	r2, [r3, #52]	; 0x34
 		  i++;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3301      	adds	r3, #1
 80006b8:	607b      	str	r3, [r7, #4]
 		  HAL_Delay(1000);
 80006ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006be:	f000 fff7 	bl	80016b0 <HAL_Delay>
 	  while(i<10)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b09      	cmp	r3, #9
 80006c6:	dddd      	ble.n	8000684 <main+0xc0>
  {
 80006c8:	e7d9      	b.n	800067e <main+0xba>
 80006ca:	bf00      	nop
 80006cc:	20000070 	.word	0x20000070
 80006d0:	200000b8 	.word	0x200000b8
 80006d4:	20000100 	.word	0x20000100
 80006d8:	20000148 	.word	0x20000148
 80006dc:	20000028 	.word	0x20000028
 80006e0:	20000190 	.word	0x20000190
 80006e4:	200001d8 	.word	0x200001d8

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2234      	movs	r2, #52	; 0x34
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 fd4c 	bl	8004194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <SystemClock_Config+0xd0>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a28      	ldr	r2, [pc, #160]	; (80007b8 <SystemClock_Config+0xd0>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <SystemClock_Config+0xd0>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <SystemClock_Config+0xd4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000734:	4a21      	ldr	r2, [pc, #132]	; (80007bc <SystemClock_Config+0xd4>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <SystemClock_Config+0xd4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2310      	movs	r3, #16
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000758:	2300      	movs	r3, #0
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800075c:	2308      	movs	r3, #8
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000760:	235a      	movs	r3, #90	; 0x5a
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000768:	2302      	movs	r3, #2
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fdc9 	bl	800230c <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000780:	f000 fbe8 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2302      	movs	r3, #2
 800078a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000790:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000794:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	2102      	movs	r1, #2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fa69 	bl	8001c78 <HAL_RCC_ClockConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007ac:	f000 fbd2 	bl	8000f54 <Error_Handler>
  }
}
 80007b0:	bf00      	nop
 80007b2:	3750      	adds	r7, #80	; 0x50
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b096      	sub	sp, #88	; 0x58
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2220      	movs	r2, #32
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 fccb 	bl	8004194 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007fe:	4b55      	ldr	r3, [pc, #340]	; (8000954 <MX_TIM1_Init+0x194>)
 8000800:	4a55      	ldr	r2, [pc, #340]	; (8000958 <MX_TIM1_Init+0x198>)
 8000802:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000804:	4b53      	ldr	r3, [pc, #332]	; (8000954 <MX_TIM1_Init+0x194>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b52      	ldr	r3, [pc, #328]	; (8000954 <MX_TIM1_Init+0x194>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000810:	4b50      	ldr	r3, [pc, #320]	; (8000954 <MX_TIM1_Init+0x194>)
 8000812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000816:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b4e      	ldr	r3, [pc, #312]	; (8000954 <MX_TIM1_Init+0x194>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800081e:	4b4d      	ldr	r3, [pc, #308]	; (8000954 <MX_TIM1_Init+0x194>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b4b      	ldr	r3, [pc, #300]	; (8000954 <MX_TIM1_Init+0x194>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800082a:	484a      	ldr	r0, [pc, #296]	; (8000954 <MX_TIM1_Init+0x194>)
 800082c:	f002 f80c 	bl	8002848 <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000836:	f000 fb8d 	bl	8000f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000840:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000844:	4619      	mov	r1, r3
 8000846:	4843      	ldr	r0, [pc, #268]	; (8000954 <MX_TIM1_Init+0x194>)
 8000848:	f002 fcdc 	bl	8003204 <HAL_TIM_ConfigClockSource>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000852:	f000 fb7f 	bl	8000f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000856:	483f      	ldr	r0, [pc, #252]	; (8000954 <MX_TIM1_Init+0x194>)
 8000858:	f002 f845 	bl	80028e6 <HAL_TIM_PWM_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000862:	f000 fb77 	bl	8000f54 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000866:	2108      	movs	r1, #8
 8000868:	483a      	ldr	r0, [pc, #232]	; (8000954 <MX_TIM1_Init+0x194>)
 800086a:	f002 f953 	bl	8002b14 <HAL_TIM_OnePulse_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000874:	f000 fb6e 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000878:	2300      	movs	r3, #0
 800087a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000880:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000884:	4619      	mov	r1, r3
 8000886:	4833      	ldr	r0, [pc, #204]	; (8000954 <MX_TIM1_Init+0x194>)
 8000888:	f003 f8bc 	bl	8003a04 <HAL_TIMEx_MasterConfigSynchronization>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000892:	f000 fb5f 	bl	8000f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000896:	2360      	movs	r3, #96	; 0x60
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008a2:	2300      	movs	r3, #0
 80008a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	2200      	movs	r2, #0
 80008b8:	4619      	mov	r1, r3
 80008ba:	4826      	ldr	r0, [pc, #152]	; (8000954 <MX_TIM1_Init+0x194>)
 80008bc:	f002 fbe0 	bl	8003080 <HAL_TIM_PWM_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80008c6:	f000 fb45 	bl	8000f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	2204      	movs	r2, #4
 80008d0:	4619      	mov	r1, r3
 80008d2:	4820      	ldr	r0, [pc, #128]	; (8000954 <MX_TIM1_Init+0x194>)
 80008d4:	f002 fbd4 	bl	8003080 <HAL_TIM_PWM_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 80008de:	f000 fb39 	bl	8000f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	2208      	movs	r2, #8
 80008e8:	4619      	mov	r1, r3
 80008ea:	481a      	ldr	r0, [pc, #104]	; (8000954 <MX_TIM1_Init+0x194>)
 80008ec:	f002 fbc8 	bl	8003080 <HAL_TIM_PWM_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80008f6:	f000 fb2d 	bl	8000f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	220c      	movs	r2, #12
 8000900:	4619      	mov	r1, r3
 8000902:	4814      	ldr	r0, [pc, #80]	; (8000954 <MX_TIM1_Init+0x194>)
 8000904:	f002 fbbc 	bl	8003080 <HAL_TIM_PWM_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 800090e:	f000 fb21 	bl	8000f54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4619      	mov	r1, r3
 8000934:	4807      	ldr	r0, [pc, #28]	; (8000954 <MX_TIM1_Init+0x194>)
 8000936:	f003 f8e1 	bl	8003afc <HAL_TIMEx_ConfigBreakDeadTime>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8000940:	f000 fb08 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <MX_TIM1_Init+0x194>)
 8000946:	f000 fcc7 	bl	80012d8 <HAL_TIM_MspPostInit>

}
 800094a:	bf00      	nop
 800094c:	3758      	adds	r7, #88	; 0x58
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000028 	.word	0x20000028
 8000958:	40010000 	.word	0x40010000

0800095c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08c      	sub	sp, #48	; 0x30
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	2224      	movs	r2, #36	; 0x24
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f003 fc12 	bl	8004194 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000978:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <MX_TIM2_Init+0xa4>)
 800097a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800097e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000980:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <MX_TIM2_Init+0xa4>)
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <MX_TIM2_Init+0xa4>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <MX_TIM2_Init+0xa4>)
 800098e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000992:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_TIM2_Init+0xa4>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_TIM2_Init+0xa4>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009a0:	2303      	movs	r3, #3
 80009a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009a8:	2301      	movs	r3, #1
 80009aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009b8:	2301      	movs	r3, #1
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	4619      	mov	r1, r3
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_TIM2_Init+0xa4>)
 80009cc:	f002 f8fc 	bl	8002bc8 <HAL_TIM_Encoder_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80009d6:	f000 fabd 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	4619      	mov	r1, r3
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <MX_TIM2_Init+0xa4>)
 80009e8:	f003 f80c 	bl	8003a04 <HAL_TIMEx_MasterConfigSynchronization>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80009f2:	f000 faaf 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	3730      	adds	r7, #48	; 0x30
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000070 	.word	0x20000070

08000a04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	; 0x30
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2224      	movs	r2, #36	; 0x24
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f003 fbbe 	bl	8004194 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a20:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <MX_TIM3_Init+0xa0>)
 8000a22:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <MX_TIM3_Init+0xa4>)
 8000a24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_TIM3_Init+0xa0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_TIM3_Init+0xa0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_TIM3_Init+0xa0>)
 8000a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_TIM3_Init+0xa0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_TIM3_Init+0xa0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a46:	2303      	movs	r3, #3
 8000a48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <MX_TIM3_Init+0xa0>)
 8000a72:	f002 f8a9 	bl	8002bc8 <HAL_TIM_Encoder_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000a7c:	f000 fa6a 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_TIM3_Init+0xa0>)
 8000a8e:	f002 ffb9 	bl	8003a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a98:	f000 fa5c 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3730      	adds	r7, #48	; 0x30
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000b8 	.word	0x200000b8
 8000aa8:	40000400 	.word	0x40000400

08000aac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	; 0x30
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	2224      	movs	r2, #36	; 0x24
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f003 fb6a 	bl	8004194 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ac8:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <MX_TIM4_Init+0xa0>)
 8000aca:	4a21      	ldr	r2, [pc, #132]	; (8000b50 <MX_TIM4_Init+0xa4>)
 8000acc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <MX_TIM4_Init+0xa0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <MX_TIM4_Init+0xa0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <MX_TIM4_Init+0xa0>)
 8000adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_TIM4_Init+0xa0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_TIM4_Init+0xa0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000aee:	2303      	movs	r3, #3
 8000af0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b06:	2301      	movs	r3, #1
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4619      	mov	r1, r3
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <MX_TIM4_Init+0xa0>)
 8000b1a:	f002 f855 	bl	8002bc8 <HAL_TIM_Encoder_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000b24:	f000 fa16 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_TIM4_Init+0xa0>)
 8000b36:	f002 ff65 	bl	8003a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000b40:	f000 fa08 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3730      	adds	r7, #48	; 0x30
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000100 	.word	0x20000100
 8000b50:	40000800 	.word	0x40000800

08000b54 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	; 0x30
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	2224      	movs	r2, #36	; 0x24
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f003 fb16 	bl	8004194 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b70:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <MX_TIM5_Init+0xa0>)
 8000b72:	4a21      	ldr	r2, [pc, #132]	; (8000bf8 <MX_TIM5_Init+0xa4>)
 8000b74:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b76:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <MX_TIM5_Init+0xa0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <MX_TIM5_Init+0xa0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000b82:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <MX_TIM5_Init+0xa0>)
 8000b84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b88:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_TIM5_Init+0xa0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_TIM5_Init+0xa0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b96:	2303      	movs	r3, #3
 8000b98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000baa:	2302      	movs	r3, #2
 8000bac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <MX_TIM5_Init+0xa0>)
 8000bc2:	f002 f801 	bl	8002bc8 <HAL_TIM_Encoder_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000bcc:	f000 f9c2 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_TIM5_Init+0xa0>)
 8000bde:	f002 ff11 	bl	8003a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000be8:	f000 f9b4 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	3730      	adds	r7, #48	; 0x30
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000148 	.word	0x20000148
 8000bf8:	40000c00 	.word	0x40000c00

08000bfc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b092      	sub	sp, #72	; 0x48
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
 8000c1c:	615a      	str	r2, [r3, #20]
 8000c1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2220      	movs	r2, #32
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 fab4 	bl	8004194 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c2c:	4b3f      	ldr	r3, [pc, #252]	; (8000d2c <MX_TIM8_Init+0x130>)
 8000c2e:	4a40      	ldr	r2, [pc, #256]	; (8000d30 <MX_TIM8_Init+0x134>)
 8000c30:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c32:	4b3e      	ldr	r3, [pc, #248]	; (8000d2c <MX_TIM8_Init+0x130>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c38:	4b3c      	ldr	r3, [pc, #240]	; (8000d2c <MX_TIM8_Init+0x130>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000c3e:	4b3b      	ldr	r3, [pc, #236]	; (8000d2c <MX_TIM8_Init+0x130>)
 8000c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c44:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c46:	4b39      	ldr	r3, [pc, #228]	; (8000d2c <MX_TIM8_Init+0x130>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c4c:	4b37      	ldr	r3, [pc, #220]	; (8000d2c <MX_TIM8_Init+0x130>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <MX_TIM8_Init+0x130>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000c58:	4834      	ldr	r0, [pc, #208]	; (8000d2c <MX_TIM8_Init+0x130>)
 8000c5a:	f001 fe44 	bl	80028e6 <HAL_TIM_PWM_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000c64:	f000 f976 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c74:	4619      	mov	r1, r3
 8000c76:	482d      	ldr	r0, [pc, #180]	; (8000d2c <MX_TIM8_Init+0x130>)
 8000c78:	f002 fec4 	bl	8003a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000c82:	f000 f967 	bl	8000f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c86:	2360      	movs	r3, #96	; 0x60
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4820      	ldr	r0, [pc, #128]	; (8000d2c <MX_TIM8_Init+0x130>)
 8000cac:	f002 f9e8 	bl	8003080 <HAL_TIM_PWM_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000cb6:	f000 f94d 	bl	8000f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	481a      	ldr	r0, [pc, #104]	; (8000d2c <MX_TIM8_Init+0x130>)
 8000cc4:	f002 f9dc 	bl	8003080 <HAL_TIM_PWM_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8000cce:	f000 f941 	bl	8000f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4814      	ldr	r0, [pc, #80]	; (8000d2c <MX_TIM8_Init+0x130>)
 8000cdc:	f002 f9d0 	bl	8003080 <HAL_TIM_PWM_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8000ce6:	f000 f935 	bl	8000f54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <MX_TIM8_Init+0x130>)
 8000d0e:	f002 fef5 	bl	8003afc <HAL_TIMEx_ConfigBreakDeadTime>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8000d18:	f000 f91c 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <MX_TIM8_Init+0x130>)
 8000d1e:	f000 fadb 	bl	80012d8 <HAL_TIM_MspPostInit>

}
 8000d22:	bf00      	nop
 8000d24:	3748      	adds	r7, #72	; 0x48
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000190 	.word	0x20000190
 8000d30:	40010400 	.word	0x40010400

08000d34 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
 8000d48:	615a      	str	r2, [r3, #20]
 8000d4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <MX_TIM10_Init+0x94>)
 8000d4e:	4a1f      	ldr	r2, [pc, #124]	; (8000dcc <MX_TIM10_Init+0x98>)
 8000d50:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <MX_TIM10_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <MX_TIM10_Init+0x94>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MX_TIM10_Init+0x94>)
 8000d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d64:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MX_TIM10_Init+0x94>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <MX_TIM10_Init+0x94>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000d72:	4815      	ldr	r0, [pc, #84]	; (8000dc8 <MX_TIM10_Init+0x94>)
 8000d74:	f001 fd68 	bl	8002848 <HAL_TIM_Base_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000d7e:	f000 f8e9 	bl	8000f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000d82:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <MX_TIM10_Init+0x94>)
 8000d84:	f001 fdaf 	bl	80028e6 <HAL_TIM_PWM_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000d8e:	f000 f8e1 	bl	8000f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d92:	2360      	movs	r3, #96	; 0x60
 8000d94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2200      	movs	r2, #0
 8000da6:	4619      	mov	r1, r3
 8000da8:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <MX_TIM10_Init+0x94>)
 8000daa:	f002 f969 	bl	8003080 <HAL_TIM_PWM_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8000db4:	f000 f8ce 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <MX_TIM10_Init+0x94>)
 8000dba:	f000 fa8d 	bl	80012d8 <HAL_TIM_MspPostInit>

}
 8000dbe:	bf00      	nop
 8000dc0:	3720      	adds	r7, #32
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200001d8 	.word	0x200001d8
 8000dcc:	40014400 	.word	0x40014400

08000dd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <MX_USART2_UART_Init+0x50>)
 8000dd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000df6:	220c      	movs	r2, #12
 8000df8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000e08:	f002 fede 	bl	8003bc8 <HAL_UART_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e12:	f000 f89f 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000220 	.word	0x20000220
 8000e20:	40004400 	.word	0x40004400

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b41      	ldr	r3, [pc, #260]	; (8000f44 <MX_GPIO_Init+0x120>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a40      	ldr	r2, [pc, #256]	; (8000f44 <MX_GPIO_Init+0x120>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b3e      	ldr	r3, [pc, #248]	; (8000f44 <MX_GPIO_Init+0x120>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b3a      	ldr	r3, [pc, #232]	; (8000f44 <MX_GPIO_Init+0x120>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a39      	ldr	r2, [pc, #228]	; (8000f44 <MX_GPIO_Init+0x120>)
 8000e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b37      	ldr	r3, [pc, #220]	; (8000f44 <MX_GPIO_Init+0x120>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <MX_GPIO_Init+0x120>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a32      	ldr	r2, [pc, #200]	; (8000f44 <MX_GPIO_Init+0x120>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <MX_GPIO_Init+0x120>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <MX_GPIO_Init+0x120>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a2b      	ldr	r2, [pc, #172]	; (8000f44 <MX_GPIO_Init+0x120>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <MX_GPIO_Init+0x120>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DC3_1_Pin|DC3_2_Pin|DC1_1_Pin|DC1_2_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	210f      	movs	r1, #15
 8000eae:	4826      	ldr	r0, [pc, #152]	; (8000f48 <MX_GPIO_Init+0x124>)
 8000eb0:	f000 fec8 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2120      	movs	r1, #32
 8000eb8:	4824      	ldr	r0, [pc, #144]	; (8000f4c <MX_GPIO_Init+0x128>)
 8000eba:	f000 fec3 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC4_1_Pin|DC2_1_Pin|DC2_2_Pin|DC4_2_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ec4:	4822      	ldr	r0, [pc, #136]	; (8000f50 <MX_GPIO_Init+0x12c>)
 8000ec6:	f000 febd 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4819      	ldr	r0, [pc, #100]	; (8000f48 <MX_GPIO_Init+0x124>)
 8000ee2:	f000 fd1b 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pins : DC3_1_Pin DC3_2_Pin DC1_1_Pin DC1_2_Pin */
  GPIO_InitStruct.Pin = DC3_1_Pin|DC3_2_Pin|DC1_1_Pin|DC1_2_Pin;
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4812      	ldr	r0, [pc, #72]	; (8000f48 <MX_GPIO_Init+0x124>)
 8000efe:	f000 fd0d 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f02:	2320      	movs	r3, #32
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <MX_GPIO_Init+0x128>)
 8000f1a:	f000 fcff 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pins : DC4_1_Pin DC2_1_Pin DC2_2_Pin DC4_2_Pin */
  GPIO_InitStruct.Pin = DC4_1_Pin|DC2_1_Pin|DC2_2_Pin|DC4_2_Pin;
 8000f1e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <MX_GPIO_Init+0x12c>)
 8000f38:	f000 fcf0 	bl	800191c <HAL_GPIO_Init>

}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	; 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020800 	.word	0x40020800
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	40020400 	.word	0x40020400

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <Error_Handler+0x8>
	...

08000f60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <HAL_MspInit+0x4c>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_MspInit+0x4c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_MspInit+0x4c>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_MspInit+0x4c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f9e:	2007      	movs	r0, #7
 8000fa0:	f000 fc7a 	bl	8001898 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a20      	ldr	r2, [pc, #128]	; (8001040 <HAL_TIM_Base_MspInit+0x90>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d11e      	bne.n	8001000 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <HAL_TIM_Base_MspInit+0x94>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a1e      	ldr	r2, [pc, #120]	; (8001044 <HAL_TIM_Base_MspInit+0x94>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <HAL_TIM_Base_MspInit+0x94>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2018      	movs	r0, #24
 8000fe4:	f000 fc63 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000fe8:	2018      	movs	r0, #24
 8000fea:	f000 fc7c 	bl	80018e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2019      	movs	r0, #25
 8000ff4:	f000 fc5b 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ff8:	2019      	movs	r0, #25
 8000ffa:	f000 fc74 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000ffe:	e01a      	b.n	8001036 <HAL_TIM_Base_MspInit+0x86>
  else if(htim_base->Instance==TIM10)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a10      	ldr	r2, [pc, #64]	; (8001048 <HAL_TIM_Base_MspInit+0x98>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d115      	bne.n	8001036 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <HAL_TIM_Base_MspInit+0x94>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a0c      	ldr	r2, [pc, #48]	; (8001044 <HAL_TIM_Base_MspInit+0x94>)
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	6453      	str	r3, [r2, #68]	; 0x44
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_TIM_Base_MspInit+0x94>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2019      	movs	r0, #25
 800102c:	f000 fc3f 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001030:	2019      	movs	r0, #25
 8001032:	f000 fc58 	bl	80018e6 <HAL_NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40010000 	.word	0x40010000
 8001044:	40023800 	.word	0x40023800
 8001048:	40014400 	.word	0x40014400

0800104c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b090      	sub	sp, #64	; 0x40
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106c:	d154      	bne.n	8001118 <HAL_TIM_Encoder_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
 8001072:	4b82      	ldr	r3, [pc, #520]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a81      	ldr	r2, [pc, #516]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
 800107e:	4b7f      	ldr	r3, [pc, #508]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
 8001088:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
 800108e:	4b7b      	ldr	r3, [pc, #492]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a7a      	ldr	r2, [pc, #488]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b78      	ldr	r3, [pc, #480]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
 80010aa:	4b74      	ldr	r3, [pc, #464]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a73      	ldr	r2, [pc, #460]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b71      	ldr	r3, [pc, #452]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	623b      	str	r3, [r7, #32]
 80010c0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010d4:	2301      	movs	r3, #1
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010dc:	4619      	mov	r1, r3
 80010de:	4868      	ldr	r0, [pc, #416]	; (8001280 <HAL_TIM_Encoder_MspInit+0x234>)
 80010e0:	f000 fc1c 	bl	800191c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010f6:	2301      	movs	r3, #1
 80010f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fe:	4619      	mov	r1, r3
 8001100:	4860      	ldr	r0, [pc, #384]	; (8001284 <HAL_TIM_Encoder_MspInit+0x238>)
 8001102:	f000 fc0b 	bl	800191c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	201c      	movs	r0, #28
 800110c:	f000 fbcf 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001110:	201c      	movs	r0, #28
 8001112:	f000 fbe8 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001116:	e0ac      	b.n	8001272 <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM3)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a5a      	ldr	r2, [pc, #360]	; (8001288 <HAL_TIM_Encoder_MspInit+0x23c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d134      	bne.n	800118c <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	4b55      	ldr	r3, [pc, #340]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a54      	ldr	r2, [pc, #336]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	4b52      	ldr	r3, [pc, #328]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	61fb      	str	r3, [r7, #28]
 800113c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
 8001142:	4b4e      	ldr	r3, [pc, #312]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a4d      	ldr	r2, [pc, #308]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b4b      	ldr	r3, [pc, #300]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800115a:	23c0      	movs	r3, #192	; 0xc0
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800116a:	2302      	movs	r3, #2
 800116c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001172:	4619      	mov	r1, r3
 8001174:	4842      	ldr	r0, [pc, #264]	; (8001280 <HAL_TIM_Encoder_MspInit+0x234>)
 8001176:	f000 fbd1 	bl	800191c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	201d      	movs	r0, #29
 8001180:	f000 fb95 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001184:	201d      	movs	r0, #29
 8001186:	f000 fbae 	bl	80018e6 <HAL_NVIC_EnableIRQ>
}
 800118a:	e072      	b.n	8001272 <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM4)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a3e      	ldr	r2, [pc, #248]	; (800128c <HAL_TIM_Encoder_MspInit+0x240>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d134      	bne.n	8001200 <HAL_TIM_Encoder_MspInit+0x1b4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	4b38      	ldr	r3, [pc, #224]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a37      	ldr	r2, [pc, #220]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b35      	ldr	r3, [pc, #212]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b31      	ldr	r3, [pc, #196]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a30      	ldr	r2, [pc, #192]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b2e      	ldr	r3, [pc, #184]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ce:	23c0      	movs	r3, #192	; 0xc0
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011de:	2302      	movs	r3, #2
 80011e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e6:	4619      	mov	r1, r3
 80011e8:	4826      	ldr	r0, [pc, #152]	; (8001284 <HAL_TIM_Encoder_MspInit+0x238>)
 80011ea:	f000 fb97 	bl	800191c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	201e      	movs	r0, #30
 80011f4:	f000 fb5b 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011f8:	201e      	movs	r0, #30
 80011fa:	f000 fb74 	bl	80018e6 <HAL_NVIC_EnableIRQ>
}
 80011fe:	e038      	b.n	8001272 <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM5)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a22      	ldr	r2, [pc, #136]	; (8001290 <HAL_TIM_Encoder_MspInit+0x244>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d133      	bne.n	8001272 <HAL_TIM_Encoder_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a1a      	ldr	r2, [pc, #104]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a13      	ldr	r2, [pc, #76]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_TIM_Encoder_MspInit+0x230>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001242:	2303      	movs	r3, #3
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001252:	2302      	movs	r3, #2
 8001254:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800125a:	4619      	mov	r1, r3
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <HAL_TIM_Encoder_MspInit+0x234>)
 800125e:	f000 fb5d 	bl	800191c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2032      	movs	r0, #50	; 0x32
 8001268:	f000 fb21 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800126c:	2032      	movs	r0, #50	; 0x32
 800126e:	f000 fb3a 	bl	80018e6 <HAL_NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3740      	adds	r7, #64	; 0x40
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40020000 	.word	0x40020000
 8001284:	40020400 	.word	0x40020400
 8001288:	40000400 	.word	0x40000400
 800128c:	40000800 	.word	0x40000800
 8001290:	40000c00 	.word	0x40000c00

08001294 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d10d      	bne.n	80012c2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_TIM_PWM_MspInit+0x40>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <HAL_TIM_PWM_MspInit+0x40>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <HAL_TIM_PWM_MspInit+0x40>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40010400 	.word	0x40010400
 80012d4:	40023800 	.word	0x40023800

080012d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a37      	ldr	r2, [pc, #220]	; (80013d4 <HAL_TIM_MspPostInit+0xfc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d11f      	bne.n	800133a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <HAL_TIM_MspPostInit+0x100>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a35      	ldr	r2, [pc, #212]	; (80013d8 <HAL_TIM_MspPostInit+0x100>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <HAL_TIM_MspPostInit+0x100>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001316:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001328:	2301      	movs	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	482a      	ldr	r0, [pc, #168]	; (80013dc <HAL_TIM_MspPostInit+0x104>)
 8001334:	f000 faf2 	bl	800191c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001338:	e048      	b.n	80013cc <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM8)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a28      	ldr	r2, [pc, #160]	; (80013e0 <HAL_TIM_MspPostInit+0x108>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d11f      	bne.n	8001384 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <HAL_TIM_MspPostInit+0x100>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <HAL_TIM_MspPostInit+0x100>)
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6313      	str	r3, [r2, #48]	; 0x30
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_TIM_MspPostInit+0x100>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001360:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001372:	2303      	movs	r3, #3
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4819      	ldr	r0, [pc, #100]	; (80013e4 <HAL_TIM_MspPostInit+0x10c>)
 800137e:	f000 facd 	bl	800191c <HAL_GPIO_Init>
}
 8001382:	e023      	b.n	80013cc <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM10)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <HAL_TIM_MspPostInit+0x110>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d11e      	bne.n	80013cc <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_TIM_MspPostInit+0x100>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <HAL_TIM_MspPostInit+0x100>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_TIM_MspPostInit+0x100>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80013bc:	2303      	movs	r3, #3
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	4809      	ldr	r0, [pc, #36]	; (80013ec <HAL_TIM_MspPostInit+0x114>)
 80013c8:	f000 faa8 	bl	800191c <HAL_GPIO_Init>
}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	; 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40010000 	.word	0x40010000
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40010400 	.word	0x40010400
 80013e4:	40020800 	.word	0x40020800
 80013e8:	40014400 	.word	0x40014400
 80013ec:	40020400 	.word	0x40020400

080013f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a19      	ldr	r2, [pc, #100]	; (8001474 <HAL_UART_MspInit+0x84>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d12b      	bne.n	800146a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_UART_MspInit+0x88>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_UART_MspInit+0x88>)
 800141c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_UART_MspInit+0x88>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_UART_MspInit+0x88>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_UART_MspInit+0x88>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_UART_MspInit+0x88>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800144a:	230c      	movs	r3, #12
 800144c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800145a:	2307      	movs	r3, #7
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <HAL_UART_MspInit+0x8c>)
 8001466:	f000 fa59 	bl	800191c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800146a:	bf00      	nop
 800146c:	3728      	adds	r7, #40	; 0x28
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40004400 	.word	0x40004400
 8001478:	40023800 	.word	0x40023800
 800147c:	40020000 	.word	0x40020000

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014cc:	f000 f8d0 	bl	8001670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80014da:	f001 fcc9 	bl	8002e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000028 	.word	0x20000028

080014e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014ec:	4803      	ldr	r0, [pc, #12]	; (80014fc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80014ee:	f001 fcbf 	bl	8002e70 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80014f2:	4803      	ldr	r0, [pc, #12]	; (8001500 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80014f4:	f001 fcbc 	bl	8002e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000028 	.word	0x20000028
 8001500:	200001d8 	.word	0x200001d8

08001504 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <TIM2_IRQHandler+0x10>)
 800150a:	f001 fcb1 	bl	8002e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000070 	.word	0x20000070

08001518 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <TIM3_IRQHandler+0x10>)
 800151e:	f001 fca7 	bl	8002e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000b8 	.word	0x200000b8

0800152c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <TIM4_IRQHandler+0x10>)
 8001532:	f001 fc9d 	bl	8002e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000100 	.word	0x20000100

08001540 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <TIM5_IRQHandler+0x10>)
 8001546:	f001 fc93 	bl	8002e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000148 	.word	0x20000148

08001554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <SystemInit+0x20>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <SystemInit+0x20>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800157c:	480d      	ldr	r0, [pc, #52]	; (80015b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800157e:	490e      	ldr	r1, [pc, #56]	; (80015b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001580:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001584:	e002      	b.n	800158c <LoopCopyDataInit>

08001586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158a:	3304      	adds	r3, #4

0800158c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800158c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001590:	d3f9      	bcc.n	8001586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001594:	4c0b      	ldr	r4, [pc, #44]	; (80015c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001598:	e001      	b.n	800159e <LoopFillZerobss>

0800159a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800159c:	3204      	adds	r2, #4

0800159e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a0:	d3fb      	bcc.n	800159a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015a2:	f7ff ffd7 	bl	8001554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a6:	f002 fdd1 	bl	800414c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015aa:	f7ff f80b 	bl	80005c4 <main>
  bx  lr    
 80015ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015bc:	080041e4 	.word	0x080041e4
  ldr r2, =_sbss
 80015c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015c4:	20000280 	.word	0x20000280

080015c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC_IRQHandler>
	...

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <HAL_Init+0x40>)
 80015d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_Init+0x40>)
 80015e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_Init+0x40>)
 80015ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 f94f 	bl	8001898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 f808 	bl	8001610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001600:	f7ff fcae 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023c00 	.word	0x40023c00

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x54>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_InitTick+0x58>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001626:	fbb3 f3f1 	udiv	r3, r3, r1
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f967 	bl	8001902 <HAL_SYSTICK_Config>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00e      	b.n	800165c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d80a      	bhi.n	800165a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001644:	2200      	movs	r2, #0
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800164c:	f000 f92f 	bl	80018ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <HAL_InitTick+0x5c>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000000 	.word	0x20000000
 8001668:	20000008 	.word	0x20000008
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_IncTick+0x20>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_IncTick+0x24>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <HAL_IncTick+0x24>)
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000008 	.word	0x20000008
 8001694:	2000027c 	.word	0x2000027c

08001698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <HAL_GetTick+0x14>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	2000027c 	.word	0x2000027c

080016b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b8:	f7ff ffee 	bl	8001698 <HAL_GetTick>
 80016bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016c8:	d005      	beq.n	80016d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_Delay+0x44>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4413      	add	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016d6:	bf00      	nop
 80016d8:	f7ff ffde 	bl	8001698 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d8f7      	bhi.n	80016d8 <HAL_Delay+0x28>
  {
  }
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000008 	.word	0x20000008

080016f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001714:	4013      	ands	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172a:	4a04      	ldr	r2, [pc, #16]	; (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	60d3      	str	r3, [r2, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <__NVIC_GetPriorityGrouping+0x18>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	f003 0307 	and.w	r3, r3, #7
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	2b00      	cmp	r3, #0
 800176c:	db0b      	blt.n	8001786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	f003 021f 	and.w	r2, r3, #31
 8001774:	4907      	ldr	r1, [pc, #28]	; (8001794 <__NVIC_EnableIRQ+0x38>)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	2001      	movs	r0, #1
 800177e:	fa00 f202 	lsl.w	r2, r0, r2
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000e100 	.word	0xe000e100

08001798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db0a      	blt.n	80017c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	490c      	ldr	r1, [pc, #48]	; (80017e4 <__NVIC_SetPriority+0x4c>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	0112      	lsls	r2, r2, #4
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	440b      	add	r3, r1
 80017bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c0:	e00a      	b.n	80017d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4908      	ldr	r1, [pc, #32]	; (80017e8 <__NVIC_SetPriority+0x50>)
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	3b04      	subs	r3, #4
 80017d0:	0112      	lsls	r2, r2, #4
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	440b      	add	r3, r1
 80017d6:	761a      	strb	r2, [r3, #24]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000e100 	.word	0xe000e100
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	; 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f1c3 0307 	rsb	r3, r3, #7
 8001806:	2b04      	cmp	r3, #4
 8001808:	bf28      	it	cs
 800180a:	2304      	movcs	r3, #4
 800180c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3304      	adds	r3, #4
 8001812:	2b06      	cmp	r3, #6
 8001814:	d902      	bls.n	800181c <NVIC_EncodePriority+0x30>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3b03      	subs	r3, #3
 800181a:	e000      	b.n	800181e <NVIC_EncodePriority+0x32>
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43da      	mvns	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	401a      	ands	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43d9      	mvns	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	4313      	orrs	r3, r2
         );
}
 8001846:	4618      	mov	r0, r3
 8001848:	3724      	adds	r7, #36	; 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001864:	d301      	bcc.n	800186a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001866:	2301      	movs	r3, #1
 8001868:	e00f      	b.n	800188a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <SysTick_Config+0x40>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001872:	210f      	movs	r1, #15
 8001874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001878:	f7ff ff8e 	bl	8001798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <SysTick_Config+0x40>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <SysTick_Config+0x40>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	e000e010 	.word	0xe000e010

08001898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff29 	bl	80016f8 <__NVIC_SetPriorityGrouping>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c0:	f7ff ff3e 	bl	8001740 <__NVIC_GetPriorityGrouping>
 80018c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7ff ff8e 	bl	80017ec <NVIC_EncodePriority>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff5d 	bl	8001798 <__NVIC_SetPriority>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff31 	bl	800175c <__NVIC_EnableIRQ>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffa2 	bl	8001854 <SysTick_Config>
 8001910:	4603      	mov	r3, r0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	; 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	e165      	b.n	8001c04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001938:	2201      	movs	r2, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	429a      	cmp	r2, r3
 8001952:	f040 8154 	bne.w	8001bfe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b01      	cmp	r3, #1
 8001960:	d005      	beq.n	800196e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800196a:	2b02      	cmp	r3, #2
 800196c:	d130      	bne.n	80019d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	2203      	movs	r2, #3
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a4:	2201      	movs	r2, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 0201 	and.w	r2, r3, #1
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d017      	beq.n	8001a0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	2203      	movs	r2, #3
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d123      	bne.n	8001a60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	08da      	lsrs	r2, r3, #3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3208      	adds	r2, #8
 8001a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	08da      	lsrs	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3208      	adds	r2, #8
 8001a5a:	69b9      	ldr	r1, [r7, #24]
 8001a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0203 	and.w	r2, r3, #3
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80ae 	beq.w	8001bfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b5d      	ldr	r3, [pc, #372]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a5c      	ldr	r2, [pc, #368]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab2:	4b5a      	ldr	r3, [pc, #360]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001abe:	4a58      	ldr	r2, [pc, #352]	; (8001c20 <HAL_GPIO_Init+0x304>)
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	089b      	lsrs	r3, r3, #2
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4f      	ldr	r2, [pc, #316]	; (8001c24 <HAL_GPIO_Init+0x308>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d025      	beq.n	8001b36 <HAL_GPIO_Init+0x21a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4e      	ldr	r2, [pc, #312]	; (8001c28 <HAL_GPIO_Init+0x30c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d01f      	beq.n	8001b32 <HAL_GPIO_Init+0x216>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4d      	ldr	r2, [pc, #308]	; (8001c2c <HAL_GPIO_Init+0x310>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d019      	beq.n	8001b2e <HAL_GPIO_Init+0x212>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4c      	ldr	r2, [pc, #304]	; (8001c30 <HAL_GPIO_Init+0x314>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0x20e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4b      	ldr	r2, [pc, #300]	; (8001c34 <HAL_GPIO_Init+0x318>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00d      	beq.n	8001b26 <HAL_GPIO_Init+0x20a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4a      	ldr	r2, [pc, #296]	; (8001c38 <HAL_GPIO_Init+0x31c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <HAL_GPIO_Init+0x206>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a49      	ldr	r2, [pc, #292]	; (8001c3c <HAL_GPIO_Init+0x320>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_GPIO_Init+0x202>
 8001b1a:	2306      	movs	r3, #6
 8001b1c:	e00c      	b.n	8001b38 <HAL_GPIO_Init+0x21c>
 8001b1e:	2307      	movs	r3, #7
 8001b20:	e00a      	b.n	8001b38 <HAL_GPIO_Init+0x21c>
 8001b22:	2305      	movs	r3, #5
 8001b24:	e008      	b.n	8001b38 <HAL_GPIO_Init+0x21c>
 8001b26:	2304      	movs	r3, #4
 8001b28:	e006      	b.n	8001b38 <HAL_GPIO_Init+0x21c>
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e004      	b.n	8001b38 <HAL_GPIO_Init+0x21c>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e002      	b.n	8001b38 <HAL_GPIO_Init+0x21c>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_GPIO_Init+0x21c>
 8001b36:	2300      	movs	r3, #0
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	f002 0203 	and.w	r2, r2, #3
 8001b3e:	0092      	lsls	r2, r2, #2
 8001b40:	4093      	lsls	r3, r2
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b48:	4935      	ldr	r1, [pc, #212]	; (8001c20 <HAL_GPIO_Init+0x304>)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	3302      	adds	r3, #2
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b56:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <HAL_GPIO_Init+0x324>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7a:	4a31      	ldr	r2, [pc, #196]	; (8001c40 <HAL_GPIO_Init+0x324>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b80:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <HAL_GPIO_Init+0x324>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba4:	4a26      	ldr	r2, [pc, #152]	; (8001c40 <HAL_GPIO_Init+0x324>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001baa:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <HAL_GPIO_Init+0x324>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bce:	4a1c      	ldr	r2, [pc, #112]	; (8001c40 <HAL_GPIO_Init+0x324>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_GPIO_Init+0x324>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf8:	4a11      	ldr	r2, [pc, #68]	; (8001c40 <HAL_GPIO_Init+0x324>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3301      	adds	r3, #1
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b0f      	cmp	r3, #15
 8001c08:	f67f ae96 	bls.w	8001938 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3724      	adds	r7, #36	; 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40013800 	.word	0x40013800
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020c00 	.word	0x40020c00
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40021400 	.word	0x40021400
 8001c3c:	40021800 	.word	0x40021800
 8001c40:	40013c00 	.word	0x40013c00

08001c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
 8001c50:	4613      	mov	r3, r2
 8001c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c54:	787b      	ldrb	r3, [r7, #1]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c60:	e003      	b.n	8001c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	041a      	lsls	r2, r3, #16
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	619a      	str	r2, [r3, #24]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0cc      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b68      	ldr	r3, [pc, #416]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d90c      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b65      	ldr	r3, [pc, #404]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b63      	ldr	r3, [pc, #396]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0b8      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ccc:	4b59      	ldr	r3, [pc, #356]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a58      	ldr	r2, [pc, #352]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce4:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a52      	ldr	r2, [pc, #328]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	494d      	ldr	r1, [pc, #308]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d044      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d119      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e07f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d36:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e06f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d46:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e067      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d56:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f023 0203 	bic.w	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4934      	ldr	r1, [pc, #208]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d68:	f7ff fc96 	bl	8001698 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7ff fc92 	bl	8001698 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e04f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 020c 	and.w	r2, r3, #12
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d1eb      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d20c      	bcs.n	8001dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e032      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4916      	ldr	r1, [pc, #88]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	490e      	ldr	r1, [pc, #56]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dfe:	f000 f855 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001e02:	4602      	mov	r2, r0
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	490a      	ldr	r1, [pc, #40]	; (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	5ccb      	ldrb	r3, [r1, r3]
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fbf6 	bl	8001610 <HAL_InitTick>

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00
 8001e34:	40023800 	.word	0x40023800
 8001e38:	080041bc 	.word	0x080041bc
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000004 	.word	0x20000004

08001e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000000 	.word	0x20000000

08001e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e60:	f7ff fff0 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	0a9b      	lsrs	r3, r3, #10
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4903      	ldr	r1, [pc, #12]	; (8001e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	080041cc 	.word	0x080041cc

08001e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e88:	f7ff ffdc 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	0b5b      	lsrs	r3, r3, #13
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	4903      	ldr	r1, [pc, #12]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e9a:	5ccb      	ldrb	r3, [r1, r3]
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	080041cc 	.word	0x080041cc

08001eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eb0:	b0ae      	sub	sp, #184	; 0xb8
 8001eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ed2:	4bcb      	ldr	r3, [pc, #812]	; (8002200 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b0c      	cmp	r3, #12
 8001edc:	f200 8206 	bhi.w	80022ec <HAL_RCC_GetSysClockFreq+0x440>
 8001ee0:	a201      	add	r2, pc, #4	; (adr r2, 8001ee8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee6:	bf00      	nop
 8001ee8:	08001f1d 	.word	0x08001f1d
 8001eec:	080022ed 	.word	0x080022ed
 8001ef0:	080022ed 	.word	0x080022ed
 8001ef4:	080022ed 	.word	0x080022ed
 8001ef8:	08001f25 	.word	0x08001f25
 8001efc:	080022ed 	.word	0x080022ed
 8001f00:	080022ed 	.word	0x080022ed
 8001f04:	080022ed 	.word	0x080022ed
 8001f08:	08001f2d 	.word	0x08001f2d
 8001f0c:	080022ed 	.word	0x080022ed
 8001f10:	080022ed 	.word	0x080022ed
 8001f14:	080022ed 	.word	0x080022ed
 8001f18:	0800211d 	.word	0x0800211d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f1c:	4bb9      	ldr	r3, [pc, #740]	; (8002204 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001f22:	e1e7      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f24:	4bb8      	ldr	r3, [pc, #736]	; (8002208 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f2a:	e1e3      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f2c:	4bb4      	ldr	r3, [pc, #720]	; (8002200 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f38:	4bb1      	ldr	r3, [pc, #708]	; (8002200 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d071      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f44:	4bae      	ldr	r3, [pc, #696]	; (8002200 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	099b      	lsrs	r3, r3, #6
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f50:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001f6a:	4622      	mov	r2, r4
 8001f6c:	462b      	mov	r3, r5
 8001f6e:	f04f 0000 	mov.w	r0, #0
 8001f72:	f04f 0100 	mov.w	r1, #0
 8001f76:	0159      	lsls	r1, r3, #5
 8001f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f7c:	0150      	lsls	r0, r2, #5
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4621      	mov	r1, r4
 8001f84:	1a51      	subs	r1, r2, r1
 8001f86:	6439      	str	r1, [r7, #64]	; 0x40
 8001f88:	4629      	mov	r1, r5
 8001f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001f9c:	4649      	mov	r1, r9
 8001f9e:	018b      	lsls	r3, r1, #6
 8001fa0:	4641      	mov	r1, r8
 8001fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fa6:	4641      	mov	r1, r8
 8001fa8:	018a      	lsls	r2, r1, #6
 8001faa:	4641      	mov	r1, r8
 8001fac:	1a51      	subs	r1, r2, r1
 8001fae:	63b9      	str	r1, [r7, #56]	; 0x38
 8001fb0:	4649      	mov	r1, r9
 8001fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8001fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001fc4:	4649      	mov	r1, r9
 8001fc6:	00cb      	lsls	r3, r1, #3
 8001fc8:	4641      	mov	r1, r8
 8001fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fce:	4641      	mov	r1, r8
 8001fd0:	00ca      	lsls	r2, r1, #3
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4622      	mov	r2, r4
 8001fda:	189b      	adds	r3, r3, r2
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8001fde:	462b      	mov	r3, r5
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	eb42 0303 	adc.w	r3, r2, r3
 8001fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ff4:	4629      	mov	r1, r5
 8001ff6:	024b      	lsls	r3, r1, #9
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ffe:	4621      	mov	r1, r4
 8002000:	024a      	lsls	r2, r1, #9
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800200a:	2200      	movs	r2, #0
 800200c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002010:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002014:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002018:	f7fe f8f4 	bl	8000204 <__aeabi_uldivmod>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4613      	mov	r3, r2
 8002022:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002026:	e067      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002028:	4b75      	ldr	r3, [pc, #468]	; (8002200 <HAL_RCC_GetSysClockFreq+0x354>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	2200      	movs	r2, #0
 8002030:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002034:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002038:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800203c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002040:	67bb      	str	r3, [r7, #120]	; 0x78
 8002042:	2300      	movs	r3, #0
 8002044:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002046:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800204a:	4622      	mov	r2, r4
 800204c:	462b      	mov	r3, r5
 800204e:	f04f 0000 	mov.w	r0, #0
 8002052:	f04f 0100 	mov.w	r1, #0
 8002056:	0159      	lsls	r1, r3, #5
 8002058:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800205c:	0150      	lsls	r0, r2, #5
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4621      	mov	r1, r4
 8002064:	1a51      	subs	r1, r2, r1
 8002066:	62b9      	str	r1, [r7, #40]	; 0x28
 8002068:	4629      	mov	r1, r5
 800206a:	eb63 0301 	sbc.w	r3, r3, r1
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800207c:	4649      	mov	r1, r9
 800207e:	018b      	lsls	r3, r1, #6
 8002080:	4641      	mov	r1, r8
 8002082:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002086:	4641      	mov	r1, r8
 8002088:	018a      	lsls	r2, r1, #6
 800208a:	4641      	mov	r1, r8
 800208c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002090:	4649      	mov	r1, r9
 8002092:	eb63 0b01 	sbc.w	fp, r3, r1
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020aa:	4692      	mov	sl, r2
 80020ac:	469b      	mov	fp, r3
 80020ae:	4623      	mov	r3, r4
 80020b0:	eb1a 0303 	adds.w	r3, sl, r3
 80020b4:	623b      	str	r3, [r7, #32]
 80020b6:	462b      	mov	r3, r5
 80020b8:	eb4b 0303 	adc.w	r3, fp, r3
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80020ca:	4629      	mov	r1, r5
 80020cc:	028b      	lsls	r3, r1, #10
 80020ce:	4621      	mov	r1, r4
 80020d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020d4:	4621      	mov	r1, r4
 80020d6:	028a      	lsls	r2, r1, #10
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020e0:	2200      	movs	r2, #0
 80020e2:	673b      	str	r3, [r7, #112]	; 0x70
 80020e4:	677a      	str	r2, [r7, #116]	; 0x74
 80020e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80020ea:	f7fe f88b 	bl	8000204 <__aeabi_uldivmod>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4613      	mov	r3, r2
 80020f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020f8:	4b41      	ldr	r3, [pc, #260]	; (8002200 <HAL_RCC_GetSysClockFreq+0x354>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	0c1b      	lsrs	r3, r3, #16
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	3301      	adds	r3, #1
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800210a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800210e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800211a:	e0eb      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800211c:	4b38      	ldr	r3, [pc, #224]	; (8002200 <HAL_RCC_GetSysClockFreq+0x354>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002124:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002128:	4b35      	ldr	r3, [pc, #212]	; (8002200 <HAL_RCC_GetSysClockFreq+0x354>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d06b      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002134:	4b32      	ldr	r3, [pc, #200]	; (8002200 <HAL_RCC_GetSysClockFreq+0x354>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	099b      	lsrs	r3, r3, #6
 800213a:	2200      	movs	r2, #0
 800213c:	66bb      	str	r3, [r7, #104]	; 0x68
 800213e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002140:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002146:	663b      	str	r3, [r7, #96]	; 0x60
 8002148:	2300      	movs	r3, #0
 800214a:	667b      	str	r3, [r7, #100]	; 0x64
 800214c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002150:	4622      	mov	r2, r4
 8002152:	462b      	mov	r3, r5
 8002154:	f04f 0000 	mov.w	r0, #0
 8002158:	f04f 0100 	mov.w	r1, #0
 800215c:	0159      	lsls	r1, r3, #5
 800215e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002162:	0150      	lsls	r0, r2, #5
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4621      	mov	r1, r4
 800216a:	1a51      	subs	r1, r2, r1
 800216c:	61b9      	str	r1, [r7, #24]
 800216e:	4629      	mov	r1, r5
 8002170:	eb63 0301 	sbc.w	r3, r3, r1
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002182:	4659      	mov	r1, fp
 8002184:	018b      	lsls	r3, r1, #6
 8002186:	4651      	mov	r1, sl
 8002188:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800218c:	4651      	mov	r1, sl
 800218e:	018a      	lsls	r2, r1, #6
 8002190:	4651      	mov	r1, sl
 8002192:	ebb2 0801 	subs.w	r8, r2, r1
 8002196:	4659      	mov	r1, fp
 8002198:	eb63 0901 	sbc.w	r9, r3, r1
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021b0:	4690      	mov	r8, r2
 80021b2:	4699      	mov	r9, r3
 80021b4:	4623      	mov	r3, r4
 80021b6:	eb18 0303 	adds.w	r3, r8, r3
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	462b      	mov	r3, r5
 80021be:	eb49 0303 	adc.w	r3, r9, r3
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80021d0:	4629      	mov	r1, r5
 80021d2:	024b      	lsls	r3, r1, #9
 80021d4:	4621      	mov	r1, r4
 80021d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021da:	4621      	mov	r1, r4
 80021dc:	024a      	lsls	r2, r1, #9
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021e6:	2200      	movs	r2, #0
 80021e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80021ea:	65fa      	str	r2, [r7, #92]	; 0x5c
 80021ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021f0:	f7fe f808 	bl	8000204 <__aeabi_uldivmod>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4613      	mov	r3, r2
 80021fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021fe:	e065      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x420>
 8002200:	40023800 	.word	0x40023800
 8002204:	00f42400 	.word	0x00f42400
 8002208:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220c:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_RCC_GetSysClockFreq+0x458>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	2200      	movs	r2, #0
 8002214:	4618      	mov	r0, r3
 8002216:	4611      	mov	r1, r2
 8002218:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800221c:	653b      	str	r3, [r7, #80]	; 0x50
 800221e:	2300      	movs	r3, #0
 8002220:	657b      	str	r3, [r7, #84]	; 0x54
 8002222:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002226:	4642      	mov	r2, r8
 8002228:	464b      	mov	r3, r9
 800222a:	f04f 0000 	mov.w	r0, #0
 800222e:	f04f 0100 	mov.w	r1, #0
 8002232:	0159      	lsls	r1, r3, #5
 8002234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002238:	0150      	lsls	r0, r2, #5
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4641      	mov	r1, r8
 8002240:	1a51      	subs	r1, r2, r1
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	4649      	mov	r1, r9
 8002246:	eb63 0301 	sbc.w	r3, r3, r1
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002258:	4659      	mov	r1, fp
 800225a:	018b      	lsls	r3, r1, #6
 800225c:	4651      	mov	r1, sl
 800225e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002262:	4651      	mov	r1, sl
 8002264:	018a      	lsls	r2, r1, #6
 8002266:	4651      	mov	r1, sl
 8002268:	1a54      	subs	r4, r2, r1
 800226a:	4659      	mov	r1, fp
 800226c:	eb63 0501 	sbc.w	r5, r3, r1
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	00eb      	lsls	r3, r5, #3
 800227a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800227e:	00e2      	lsls	r2, r4, #3
 8002280:	4614      	mov	r4, r2
 8002282:	461d      	mov	r5, r3
 8002284:	4643      	mov	r3, r8
 8002286:	18e3      	adds	r3, r4, r3
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	464b      	mov	r3, r9
 800228c:	eb45 0303 	adc.w	r3, r5, r3
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800229e:	4629      	mov	r1, r5
 80022a0:	028b      	lsls	r3, r1, #10
 80022a2:	4621      	mov	r1, r4
 80022a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022a8:	4621      	mov	r1, r4
 80022aa:	028a      	lsls	r2, r1, #10
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022b4:	2200      	movs	r2, #0
 80022b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80022b8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80022ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022be:	f7fd ffa1 	bl	8000204 <__aeabi_uldivmod>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4613      	mov	r3, r2
 80022c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022cc:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <HAL_RCC_GetSysClockFreq+0x458>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	0f1b      	lsrs	r3, r3, #28
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80022da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80022de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022ea:	e003      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_RCC_GetSysClockFreq+0x45c>)
 80022ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	37b8      	adds	r7, #184	; 0xb8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	00f42400 	.word	0x00f42400

0800230c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e28d      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 8083 	beq.w	8002432 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800232c:	4b94      	ldr	r3, [pc, #592]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	2b04      	cmp	r3, #4
 8002336:	d019      	beq.n	800236c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002338:	4b91      	ldr	r3, [pc, #580]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002340:	2b08      	cmp	r3, #8
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002344:	4b8e      	ldr	r3, [pc, #568]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002350:	d00c      	beq.n	800236c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002352:	4b8b      	ldr	r3, [pc, #556]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800235a:	2b0c      	cmp	r3, #12
 800235c:	d112      	bne.n	8002384 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800235e:	4b88      	ldr	r3, [pc, #544]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800236a:	d10b      	bne.n	8002384 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	4b84      	ldr	r3, [pc, #528]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d05b      	beq.n	8002430 <HAL_RCC_OscConfig+0x124>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d157      	bne.n	8002430 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e25a      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d106      	bne.n	800239c <HAL_RCC_OscConfig+0x90>
 800238e:	4b7c      	ldr	r3, [pc, #496]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a7b      	ldr	r2, [pc, #492]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e01d      	b.n	80023d8 <HAL_RCC_OscConfig+0xcc>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0xb4>
 80023a6:	4b76      	ldr	r3, [pc, #472]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a75      	ldr	r2, [pc, #468]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b73      	ldr	r3, [pc, #460]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a72      	ldr	r2, [pc, #456]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0xcc>
 80023c0:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a6e      	ldr	r2, [pc, #440]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b6c      	ldr	r3, [pc, #432]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a6b      	ldr	r2, [pc, #428]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7ff f95a 	bl	8001698 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e8:	f7ff f956 	bl	8001698 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e21f      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	4b61      	ldr	r3, [pc, #388]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0xdc>
 8002406:	e014      	b.n	8002432 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7ff f946 	bl	8001698 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002410:	f7ff f942 	bl	8001698 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e20b      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002422:	4b57      	ldr	r3, [pc, #348]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x104>
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d06f      	beq.n	800251e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800243e:	4b50      	ldr	r3, [pc, #320]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b00      	cmp	r3, #0
 8002448:	d017      	beq.n	800247a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800244a:	4b4d      	ldr	r3, [pc, #308]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002452:	2b08      	cmp	r3, #8
 8002454:	d105      	bne.n	8002462 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002456:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002462:	4b47      	ldr	r3, [pc, #284]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800246a:	2b0c      	cmp	r3, #12
 800246c:	d11c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800246e:	4b44      	ldr	r3, [pc, #272]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d116      	bne.n	80024a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247a:	4b41      	ldr	r3, [pc, #260]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_RCC_OscConfig+0x186>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e1d3      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4937      	ldr	r1, [pc, #220]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a6:	e03a      	b.n	800251e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d020      	beq.n	80024f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b0:	4b34      	ldr	r3, [pc, #208]	; (8002584 <HAL_RCC_OscConfig+0x278>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b6:	f7ff f8ef 	bl	8001698 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024be:	f7ff f8eb 	bl	8001698 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e1b4      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024dc:	4b28      	ldr	r3, [pc, #160]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4925      	ldr	r1, [pc, #148]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]
 80024f0:	e015      	b.n	800251e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_OscConfig+0x278>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7ff f8ce 	bl	8001698 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002500:	f7ff f8ca 	bl	8001698 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e193      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d036      	beq.n	8002598 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d016      	beq.n	8002560 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <HAL_RCC_OscConfig+0x27c>)
 8002534:	2201      	movs	r2, #1
 8002536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7ff f8ae 	bl	8001698 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002540:	f7ff f8aa 	bl	8001698 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e173      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 8002554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x234>
 800255e:	e01b      	b.n	8002598 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCC_OscConfig+0x27c>)
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002566:	f7ff f897 	bl	8001698 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256c:	e00e      	b.n	800258c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800256e:	f7ff f893 	bl	8001698 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d907      	bls.n	800258c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e15c      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
 8002580:	40023800 	.word	0x40023800
 8002584:	42470000 	.word	0x42470000
 8002588:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800258c:	4b8a      	ldr	r3, [pc, #552]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 800258e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1ea      	bne.n	800256e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8097 	beq.w	80026d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025aa:	4b83      	ldr	r3, [pc, #524]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	4b7f      	ldr	r3, [pc, #508]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a7e      	ldr	r2, [pc, #504]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80025c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	4b7c      	ldr	r3, [pc, #496]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d2:	2301      	movs	r3, #1
 80025d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d6:	4b79      	ldr	r3, [pc, #484]	; (80027bc <HAL_RCC_OscConfig+0x4b0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d118      	bne.n	8002614 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e2:	4b76      	ldr	r3, [pc, #472]	; (80027bc <HAL_RCC_OscConfig+0x4b0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a75      	ldr	r2, [pc, #468]	; (80027bc <HAL_RCC_OscConfig+0x4b0>)
 80025e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ee:	f7ff f853 	bl	8001698 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f6:	f7ff f84f 	bl	8001698 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e118      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	4b6c      	ldr	r3, [pc, #432]	; (80027bc <HAL_RCC_OscConfig+0x4b0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d106      	bne.n	800262a <HAL_RCC_OscConfig+0x31e>
 800261c:	4b66      	ldr	r3, [pc, #408]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	4a65      	ldr	r2, [pc, #404]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6713      	str	r3, [r2, #112]	; 0x70
 8002628:	e01c      	b.n	8002664 <HAL_RCC_OscConfig+0x358>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b05      	cmp	r3, #5
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0x340>
 8002632:	4b61      	ldr	r3, [pc, #388]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	4a60      	ldr	r2, [pc, #384]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	6713      	str	r3, [r2, #112]	; 0x70
 800263e:	4b5e      	ldr	r3, [pc, #376]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	4a5d      	ldr	r2, [pc, #372]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6713      	str	r3, [r2, #112]	; 0x70
 800264a:	e00b      	b.n	8002664 <HAL_RCC_OscConfig+0x358>
 800264c:	4b5a      	ldr	r3, [pc, #360]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	4a59      	ldr	r2, [pc, #356]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	6713      	str	r3, [r2, #112]	; 0x70
 8002658:	4b57      	ldr	r3, [pc, #348]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	4a56      	ldr	r2, [pc, #344]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 800265e:	f023 0304 	bic.w	r3, r3, #4
 8002662:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d015      	beq.n	8002698 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7ff f814 	bl	8001698 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002672:	e00a      	b.n	800268a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002674:	f7ff f810 	bl	8001698 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e0d7      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268a:	4b4b      	ldr	r3, [pc, #300]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0ee      	beq.n	8002674 <HAL_RCC_OscConfig+0x368>
 8002696:	e014      	b.n	80026c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7fe fffe 	bl	8001698 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a0:	f7fe fffa 	bl	8001698 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e0c1      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b6:	4b40      	ldr	r3, [pc, #256]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1ee      	bne.n	80026a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d105      	bne.n	80026d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c8:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	4a3a      	ldr	r2, [pc, #232]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80026ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80ad 	beq.w	8002838 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026de:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d060      	beq.n	80027ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d145      	bne.n	800277e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f2:	4b33      	ldr	r3, [pc, #204]	; (80027c0 <HAL_RCC_OscConfig+0x4b4>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7fe ffce 	bl	8001698 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002700:	f7fe ffca 	bl	8001698 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e093      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002712:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69da      	ldr	r2, [r3, #28]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	019b      	lsls	r3, r3, #6
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	085b      	lsrs	r3, r3, #1
 8002736:	3b01      	subs	r3, #1
 8002738:	041b      	lsls	r3, r3, #16
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	071b      	lsls	r3, r3, #28
 800274a:	491b      	ldr	r1, [pc, #108]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_RCC_OscConfig+0x4b4>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7fe ff9f 	bl	8001698 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275e:	f7fe ff9b 	bl	8001698 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e064      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x452>
 800277c:	e05c      	b.n	8002838 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <HAL_RCC_OscConfig+0x4b4>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe ff88 	bl	8001698 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278c:	f7fe ff84 	bl	8001698 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e04d      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x480>
 80027aa:	e045      	b.n	8002838 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e040      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40007000 	.word	0x40007000
 80027c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027c4:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <HAL_RCC_OscConfig+0x538>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d030      	beq.n	8002834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d129      	bne.n	8002834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d122      	bne.n	8002834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027f4:	4013      	ands	r3, r2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d119      	bne.n	8002834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	3b01      	subs	r3, #1
 800280e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d10f      	bne.n	8002834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d107      	bne.n	8002834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800

08002848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e041      	b.n	80028de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fe fb9e 	bl	8000fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3304      	adds	r3, #4
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f000 fdac 	bl	80033e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e041      	b.n	800297c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7fe fcc1 	bl	8001294 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2202      	movs	r2, #2
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	4619      	mov	r1, r3
 8002924:	4610      	mov	r0, r2
 8002926:	f000 fd5d 	bl	80033e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d109      	bne.n	80029a8 <HAL_TIM_PWM_Start+0x24>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e022      	b.n	80029ee <HAL_TIM_PWM_Start+0x6a>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d109      	bne.n	80029c2 <HAL_TIM_PWM_Start+0x3e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	bf14      	ite	ne
 80029ba:	2301      	movne	r3, #1
 80029bc:	2300      	moveq	r3, #0
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	e015      	b.n	80029ee <HAL_TIM_PWM_Start+0x6a>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d109      	bne.n	80029dc <HAL_TIM_PWM_Start+0x58>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	bf14      	ite	ne
 80029d4:	2301      	movne	r3, #1
 80029d6:	2300      	moveq	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	e008      	b.n	80029ee <HAL_TIM_PWM_Start+0x6a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	bf14      	ite	ne
 80029e8:	2301      	movne	r3, #1
 80029ea:	2300      	moveq	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e07c      	b.n	8002af0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <HAL_TIM_PWM_Start+0x82>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a04:	e013      	b.n	8002a2e <HAL_TIM_PWM_Start+0xaa>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d104      	bne.n	8002a16 <HAL_TIM_PWM_Start+0x92>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a14:	e00b      	b.n	8002a2e <HAL_TIM_PWM_Start+0xaa>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d104      	bne.n	8002a26 <HAL_TIM_PWM_Start+0xa2>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a24:	e003      	b.n	8002a2e <HAL_TIM_PWM_Start+0xaa>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2201      	movs	r2, #1
 8002a34:	6839      	ldr	r1, [r7, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 ffbe 	bl	80039b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a2d      	ldr	r2, [pc, #180]	; (8002af8 <HAL_TIM_PWM_Start+0x174>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d004      	beq.n	8002a50 <HAL_TIM_PWM_Start+0xcc>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a2c      	ldr	r2, [pc, #176]	; (8002afc <HAL_TIM_PWM_Start+0x178>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d101      	bne.n	8002a54 <HAL_TIM_PWM_Start+0xd0>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <HAL_TIM_PWM_Start+0xd2>
 8002a54:	2300      	movs	r3, #0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a22      	ldr	r2, [pc, #136]	; (8002af8 <HAL_TIM_PWM_Start+0x174>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d022      	beq.n	8002aba <HAL_TIM_PWM_Start+0x136>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7c:	d01d      	beq.n	8002aba <HAL_TIM_PWM_Start+0x136>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <HAL_TIM_PWM_Start+0x17c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d018      	beq.n	8002aba <HAL_TIM_PWM_Start+0x136>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <HAL_TIM_PWM_Start+0x180>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <HAL_TIM_PWM_Start+0x136>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1c      	ldr	r2, [pc, #112]	; (8002b08 <HAL_TIM_PWM_Start+0x184>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00e      	beq.n	8002aba <HAL_TIM_PWM_Start+0x136>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a16      	ldr	r2, [pc, #88]	; (8002afc <HAL_TIM_PWM_Start+0x178>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d009      	beq.n	8002aba <HAL_TIM_PWM_Start+0x136>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a18      	ldr	r2, [pc, #96]	; (8002b0c <HAL_TIM_PWM_Start+0x188>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <HAL_TIM_PWM_Start+0x136>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <HAL_TIM_PWM_Start+0x18c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d111      	bne.n	8002ade <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b06      	cmp	r3, #6
 8002aca:	d010      	beq.n	8002aee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002adc:	e007      	b.n	8002aee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0201 	orr.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40010000 	.word	0x40010000
 8002afc:	40010400 	.word	0x40010400
 8002b00:	40000400 	.word	0x40000400
 8002b04:	40000800 	.word	0x40000800
 8002b08:	40000c00 	.word	0x40000c00
 8002b0c:	40014000 	.word	0x40014000
 8002b10:	40001800 	.word	0x40001800

08002b14 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e041      	b.n	8002bac <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d106      	bne.n	8002b42 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f839 	bl	8002bb4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2202      	movs	r2, #2
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3304      	adds	r3, #4
 8002b52:	4619      	mov	r1, r3
 8002b54:	4610      	mov	r0, r2
 8002b56:	f000 fc45 	bl	80033e4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0208 	bic.w	r2, r2, #8
 8002b68:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e097      	b.n	8002d0c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7fe fa2b 	bl	800104c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c0c:	f023 0307 	bic.w	r3, r3, #7
 8002c10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	f000 fbe1 	bl	80033e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c4a:	f023 0303 	bic.w	r3, r3, #3
 8002c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c68:	f023 030c 	bic.w	r3, r3, #12
 8002c6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	021b      	lsls	r3, r3, #8
 8002c84:	4313      	orrs	r3, r2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	011a      	lsls	r2, r3, #4
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	031b      	lsls	r3, r3, #12
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002ca6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002cae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d24:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d2c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d34:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d3c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d110      	bne.n	8002d66 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d102      	bne.n	8002d50 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d4a:	7b7b      	ldrb	r3, [r7, #13]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d001      	beq.n	8002d54 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e089      	b.n	8002e68 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d64:	e031      	b.n	8002dca <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d110      	bne.n	8002d8e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d6c:	7bbb      	ldrb	r3, [r7, #14]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d102      	bne.n	8002d78 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d72:	7b3b      	ldrb	r3, [r7, #12]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d001      	beq.n	8002d7c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e075      	b.n	8002e68 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d8c:	e01d      	b.n	8002dca <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d108      	bne.n	8002da6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d94:	7bbb      	ldrb	r3, [r7, #14]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d105      	bne.n	8002da6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d9a:	7b7b      	ldrb	r3, [r7, #13]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d102      	bne.n	8002da6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002da0:	7b3b      	ldrb	r3, [r7, #12]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d001      	beq.n	8002daa <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e05e      	b.n	8002e68 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d010      	beq.n	8002df8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002dd6:	e01f      	b.n	8002e18 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fde9 	bl	80039b8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0202 	orr.w	r2, r2, #2
 8002df4:	60da      	str	r2, [r3, #12]
      break;
 8002df6:	e02e      	b.n	8002e56 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	2104      	movs	r1, #4
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fdd9 	bl	80039b8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0204 	orr.w	r2, r2, #4
 8002e14:	60da      	str	r2, [r3, #12]
      break;
 8002e16:	e01e      	b.n	8002e56 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fdc9 	bl	80039b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	2104      	movs	r1, #4
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fdc2 	bl	80039b8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0202 	orr.w	r2, r2, #2
 8002e42:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0204 	orr.w	r2, r2, #4
 8002e52:	60da      	str	r2, [r3, #12]
      break;
 8002e54:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0201 	orr.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d122      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d11b      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0202 	mvn.w	r2, #2
 8002e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fd fb28 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8002eb8:	e005      	b.n	8002ec6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fa73 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fa7a 	bl	80033ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d122      	bne.n	8002f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d11b      	bne.n	8002f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0204 	mvn.w	r2, #4
 8002ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fd fafe 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8002f0c:	e005      	b.n	8002f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fa49 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fa50 	bl	80033ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d122      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d11b      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0208 	mvn.w	r2, #8
 8002f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2204      	movs	r2, #4
 8002f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fd fad4 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8002f60:	e005      	b.n	8002f6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fa1f 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 fa26 	bl	80033ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d122      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0210 	mvn.w	r2, #16
 8002f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fd faaa 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e005      	b.n	8002fc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f9f5 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f9fc 	bl	80033ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d10e      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d107      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0201 	mvn.w	r2, #1
 8002fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f9cf 	bl	8003392 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffe:	2b80      	cmp	r3, #128	; 0x80
 8003000:	d10e      	bne.n	8003020 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300c:	2b80      	cmp	r3, #128	; 0x80
 800300e:	d107      	bne.n	8003020 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fdca 	bl	8003bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d10e      	bne.n	800304c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d107      	bne.n	800304c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f9c1 	bl	80033ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b20      	cmp	r3, #32
 8003058:	d10e      	bne.n	8003078 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	2b20      	cmp	r3, #32
 8003066:	d107      	bne.n	8003078 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0220 	mvn.w	r2, #32
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fd94 	bl	8003ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800309a:	2302      	movs	r3, #2
 800309c:	e0ae      	b.n	80031fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	f200 809f 	bhi.w	80031ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030ae:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b4:	080030e9 	.word	0x080030e9
 80030b8:	080031ed 	.word	0x080031ed
 80030bc:	080031ed 	.word	0x080031ed
 80030c0:	080031ed 	.word	0x080031ed
 80030c4:	08003129 	.word	0x08003129
 80030c8:	080031ed 	.word	0x080031ed
 80030cc:	080031ed 	.word	0x080031ed
 80030d0:	080031ed 	.word	0x080031ed
 80030d4:	0800316b 	.word	0x0800316b
 80030d8:	080031ed 	.word	0x080031ed
 80030dc:	080031ed 	.word	0x080031ed
 80030e0:	080031ed 	.word	0x080031ed
 80030e4:	080031ab 	.word	0x080031ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fa18 	bl	8003524 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0208 	orr.w	r2, r2, #8
 8003102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0204 	bic.w	r2, r2, #4
 8003112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6999      	ldr	r1, [r3, #24]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	619a      	str	r2, [r3, #24]
      break;
 8003126:	e064      	b.n	80031f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fa68 	bl	8003604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6999      	ldr	r1, [r3, #24]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	021a      	lsls	r2, r3, #8
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	619a      	str	r2, [r3, #24]
      break;
 8003168:	e043      	b.n	80031f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fabd 	bl	80036f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0208 	orr.w	r2, r2, #8
 8003184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69da      	ldr	r2, [r3, #28]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0204 	bic.w	r2, r2, #4
 8003194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69d9      	ldr	r1, [r3, #28]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	61da      	str	r2, [r3, #28]
      break;
 80031a8:	e023      	b.n	80031f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fb11 	bl	80037d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69da      	ldr	r2, [r3, #28]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69d9      	ldr	r1, [r3, #28]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	021a      	lsls	r2, r3, #8
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	61da      	str	r2, [r3, #28]
      break;
 80031ea:	e002      	b.n	80031f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	75fb      	strb	r3, [r7, #23]
      break;
 80031f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_TIM_ConfigClockSource+0x1c>
 800321c:	2302      	movs	r3, #2
 800321e:	e0b4      	b.n	800338a <HAL_TIM_ConfigClockSource+0x186>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800323e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003246:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003258:	d03e      	beq.n	80032d8 <HAL_TIM_ConfigClockSource+0xd4>
 800325a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325e:	f200 8087 	bhi.w	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003266:	f000 8086 	beq.w	8003376 <HAL_TIM_ConfigClockSource+0x172>
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326e:	d87f      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b70      	cmp	r3, #112	; 0x70
 8003272:	d01a      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0xa6>
 8003274:	2b70      	cmp	r3, #112	; 0x70
 8003276:	d87b      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003278:	2b60      	cmp	r3, #96	; 0x60
 800327a:	d050      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x11a>
 800327c:	2b60      	cmp	r3, #96	; 0x60
 800327e:	d877      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b50      	cmp	r3, #80	; 0x50
 8003282:	d03c      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0xfa>
 8003284:	2b50      	cmp	r3, #80	; 0x50
 8003286:	d873      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d058      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x13a>
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	d86f      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003290:	2b30      	cmp	r3, #48	; 0x30
 8003292:	d064      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x15a>
 8003294:	2b30      	cmp	r3, #48	; 0x30
 8003296:	d86b      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003298:	2b20      	cmp	r3, #32
 800329a:	d060      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x15a>
 800329c:	2b20      	cmp	r3, #32
 800329e:	d867      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d05c      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x15a>
 80032a4:	2b10      	cmp	r3, #16
 80032a6:	d05a      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x15a>
 80032a8:	e062      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6899      	ldr	r1, [r3, #8]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f000 fb5d 	bl	8003978 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	609a      	str	r2, [r3, #8]
      break;
 80032d6:	e04f      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	6899      	ldr	r1, [r3, #8]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f000 fb46 	bl	8003978 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032fa:	609a      	str	r2, [r3, #8]
      break;
 80032fc:	e03c      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	461a      	mov	r2, r3
 800330c:	f000 faba 	bl	8003884 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2150      	movs	r1, #80	; 0x50
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fb13 	bl	8003942 <TIM_ITRx_SetConfig>
      break;
 800331c:	e02c      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6859      	ldr	r1, [r3, #4]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	461a      	mov	r2, r3
 800332c:	f000 fad9 	bl	80038e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2160      	movs	r1, #96	; 0x60
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fb03 	bl	8003942 <TIM_ITRx_SetConfig>
      break;
 800333c:	e01c      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	461a      	mov	r2, r3
 800334c:	f000 fa9a 	bl	8003884 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2140      	movs	r1, #64	; 0x40
 8003356:	4618      	mov	r0, r3
 8003358:	f000 faf3 	bl	8003942 <TIM_ITRx_SetConfig>
      break;
 800335c:	e00c      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f000 faea 	bl	8003942 <TIM_ITRx_SetConfig>
      break;
 800336e:	e003      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
      break;
 8003374:	e000      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003376:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a40      	ldr	r2, [pc, #256]	; (80034f8 <TIM_Base_SetConfig+0x114>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d013      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003402:	d00f      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a3d      	ldr	r2, [pc, #244]	; (80034fc <TIM_Base_SetConfig+0x118>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00b      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a3c      	ldr	r2, [pc, #240]	; (8003500 <TIM_Base_SetConfig+0x11c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d007      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a3b      	ldr	r2, [pc, #236]	; (8003504 <TIM_Base_SetConfig+0x120>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d003      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a3a      	ldr	r2, [pc, #232]	; (8003508 <TIM_Base_SetConfig+0x124>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d108      	bne.n	8003436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a2f      	ldr	r2, [pc, #188]	; (80034f8 <TIM_Base_SetConfig+0x114>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d02b      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003444:	d027      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a2c      	ldr	r2, [pc, #176]	; (80034fc <TIM_Base_SetConfig+0x118>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d023      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a2b      	ldr	r2, [pc, #172]	; (8003500 <TIM_Base_SetConfig+0x11c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d01f      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a2a      	ldr	r2, [pc, #168]	; (8003504 <TIM_Base_SetConfig+0x120>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01b      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a29      	ldr	r2, [pc, #164]	; (8003508 <TIM_Base_SetConfig+0x124>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d017      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a28      	ldr	r2, [pc, #160]	; (800350c <TIM_Base_SetConfig+0x128>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a27      	ldr	r2, [pc, #156]	; (8003510 <TIM_Base_SetConfig+0x12c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00f      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a26      	ldr	r2, [pc, #152]	; (8003514 <TIM_Base_SetConfig+0x130>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00b      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a25      	ldr	r2, [pc, #148]	; (8003518 <TIM_Base_SetConfig+0x134>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d007      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a24      	ldr	r2, [pc, #144]	; (800351c <TIM_Base_SetConfig+0x138>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d003      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a23      	ldr	r2, [pc, #140]	; (8003520 <TIM_Base_SetConfig+0x13c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d108      	bne.n	80034a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800349c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <TIM_Base_SetConfig+0x114>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <TIM_Base_SetConfig+0xf8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a0c      	ldr	r2, [pc, #48]	; (8003508 <TIM_Base_SetConfig+0x124>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d103      	bne.n	80034e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	615a      	str	r2, [r3, #20]
}
 80034ea:	bf00      	nop
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40010000 	.word	0x40010000
 80034fc:	40000400 	.word	0x40000400
 8003500:	40000800 	.word	0x40000800
 8003504:	40000c00 	.word	0x40000c00
 8003508:	40010400 	.word	0x40010400
 800350c:	40014000 	.word	0x40014000
 8003510:	40014400 	.word	0x40014400
 8003514:	40014800 	.word	0x40014800
 8003518:	40001800 	.word	0x40001800
 800351c:	40001c00 	.word	0x40001c00
 8003520:	40002000 	.word	0x40002000

08003524 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f023 0201 	bic.w	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0303 	bic.w	r3, r3, #3
 800355a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f023 0302 	bic.w	r3, r3, #2
 800356c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a20      	ldr	r2, [pc, #128]	; (80035fc <TIM_OC1_SetConfig+0xd8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d003      	beq.n	8003588 <TIM_OC1_SetConfig+0x64>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a1f      	ldr	r2, [pc, #124]	; (8003600 <TIM_OC1_SetConfig+0xdc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d10c      	bne.n	80035a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f023 0308 	bic.w	r3, r3, #8
 800358e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f023 0304 	bic.w	r3, r3, #4
 80035a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a15      	ldr	r2, [pc, #84]	; (80035fc <TIM_OC1_SetConfig+0xd8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d003      	beq.n	80035b2 <TIM_OC1_SetConfig+0x8e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a14      	ldr	r2, [pc, #80]	; (8003600 <TIM_OC1_SetConfig+0xdc>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d111      	bne.n	80035d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	621a      	str	r2, [r3, #32]
}
 80035f0:	bf00      	nop
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	40010000 	.word	0x40010000
 8003600:	40010400 	.word	0x40010400

08003604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f023 0210 	bic.w	r2, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f023 0320 	bic.w	r3, r3, #32
 800364e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a22      	ldr	r2, [pc, #136]	; (80036e8 <TIM_OC2_SetConfig+0xe4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_OC2_SetConfig+0x68>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a21      	ldr	r2, [pc, #132]	; (80036ec <TIM_OC2_SetConfig+0xe8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d10d      	bne.n	8003688 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003686:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a17      	ldr	r2, [pc, #92]	; (80036e8 <TIM_OC2_SetConfig+0xe4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d003      	beq.n	8003698 <TIM_OC2_SetConfig+0x94>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a16      	ldr	r2, [pc, #88]	; (80036ec <TIM_OC2_SetConfig+0xe8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d113      	bne.n	80036c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800369e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	621a      	str	r2, [r3, #32]
}
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40010000 	.word	0x40010000
 80036ec:	40010400 	.word	0x40010400

080036f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0303 	bic.w	r3, r3, #3
 8003726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <TIM_OC3_SetConfig+0xe0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_OC3_SetConfig+0x66>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a20      	ldr	r2, [pc, #128]	; (80037d4 <TIM_OC3_SetConfig+0xe4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d10d      	bne.n	8003772 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800375c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a16      	ldr	r2, [pc, #88]	; (80037d0 <TIM_OC3_SetConfig+0xe0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d003      	beq.n	8003782 <TIM_OC3_SetConfig+0x92>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <TIM_OC3_SetConfig+0xe4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d113      	bne.n	80037aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	621a      	str	r2, [r3, #32]
}
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	40010000 	.word	0x40010000
 80037d4:	40010400 	.word	0x40010400

080037d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	031b      	lsls	r3, r3, #12
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a12      	ldr	r2, [pc, #72]	; (800387c <TIM_OC4_SetConfig+0xa4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d003      	beq.n	8003840 <TIM_OC4_SetConfig+0x68>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a11      	ldr	r2, [pc, #68]	; (8003880 <TIM_OC4_SetConfig+0xa8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d109      	bne.n	8003854 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	019b      	lsls	r3, r3, #6
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	621a      	str	r2, [r3, #32]
}
 800386e:	bf00      	nop
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40010000 	.word	0x40010000
 8003880:	40010400 	.word	0x40010400

08003884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f023 0201 	bic.w	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f023 030a 	bic.w	r3, r3, #10
 80038c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	621a      	str	r2, [r3, #32]
}
 80038d6:	bf00      	nop
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b087      	sub	sp, #28
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f023 0210 	bic.w	r2, r3, #16
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800390c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	031b      	lsls	r3, r3, #12
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4313      	orrs	r3, r2
 8003916:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800391e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	621a      	str	r2, [r3, #32]
}
 8003936:	bf00      	nop
 8003938:	371c      	adds	r7, #28
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003958:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	f043 0307 	orr.w	r3, r3, #7
 8003964:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	609a      	str	r2, [r3, #8]
}
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	021a      	lsls	r2, r3, #8
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	431a      	orrs	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4313      	orrs	r3, r2
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	609a      	str	r2, [r3, #8]
}
 80039ac:	bf00      	nop
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	2201      	movs	r2, #1
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a1a      	ldr	r2, [r3, #32]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	43db      	mvns	r3, r3
 80039da:	401a      	ands	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a1a      	ldr	r2, [r3, #32]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e05a      	b.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a21      	ldr	r2, [pc, #132]	; (8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d022      	beq.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a68:	d01d      	beq.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d018      	beq.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1a      	ldr	r2, [pc, #104]	; (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00e      	beq.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d009      	beq.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a17      	ldr	r2, [pc, #92]	; (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a15      	ldr	r2, [pc, #84]	; (8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40000800 	.word	0x40000800
 8003aec:	40000c00 	.word	0x40000c00
 8003af0:	40010400 	.word	0x40010400
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40001800 	.word	0x40001800

08003afc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e03d      	b.n	8003b94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e03f      	b.n	8003c5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fd fbfe 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2224      	movs	r2, #36	; 0x24
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f829 	bl	8003c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c68:	b0c0      	sub	sp, #256	; 0x100
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c80:	68d9      	ldr	r1, [r3, #12]
 8003c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	ea40 0301 	orr.w	r3, r0, r1
 8003c8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003cbc:	f021 010c 	bic.w	r1, r1, #12
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cde:	6999      	ldr	r1, [r3, #24]
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	ea40 0301 	orr.w	r3, r0, r1
 8003cea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b8f      	ldr	r3, [pc, #572]	; (8003f30 <UART_SetConfig+0x2cc>)
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d005      	beq.n	8003d04 <UART_SetConfig+0xa0>
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4b8d      	ldr	r3, [pc, #564]	; (8003f34 <UART_SetConfig+0x2d0>)
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d104      	bne.n	8003d0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d04:	f7fe f8be 	bl	8001e84 <HAL_RCC_GetPCLK2Freq>
 8003d08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d0c:	e003      	b.n	8003d16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d0e:	f7fe f8a5 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 8003d12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d20:	f040 810c 	bne.w	8003f3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d36:	4622      	mov	r2, r4
 8003d38:	462b      	mov	r3, r5
 8003d3a:	1891      	adds	r1, r2, r2
 8003d3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d3e:	415b      	adcs	r3, r3
 8003d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d46:	4621      	mov	r1, r4
 8003d48:	eb12 0801 	adds.w	r8, r2, r1
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	eb43 0901 	adc.w	r9, r3, r1
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d66:	4690      	mov	r8, r2
 8003d68:	4699      	mov	r9, r3
 8003d6a:	4623      	mov	r3, r4
 8003d6c:	eb18 0303 	adds.w	r3, r8, r3
 8003d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d74:	462b      	mov	r3, r5
 8003d76:	eb49 0303 	adc.w	r3, r9, r3
 8003d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d92:	460b      	mov	r3, r1
 8003d94:	18db      	adds	r3, r3, r3
 8003d96:	653b      	str	r3, [r7, #80]	; 0x50
 8003d98:	4613      	mov	r3, r2
 8003d9a:	eb42 0303 	adc.w	r3, r2, r3
 8003d9e:	657b      	str	r3, [r7, #84]	; 0x54
 8003da0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003da4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003da8:	f7fc fa2c 	bl	8000204 <__aeabi_uldivmod>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4b61      	ldr	r3, [pc, #388]	; (8003f38 <UART_SetConfig+0x2d4>)
 8003db2:	fba3 2302 	umull	r2, r3, r3, r2
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	011c      	lsls	r4, r3, #4
 8003dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003dc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003dcc:	4642      	mov	r2, r8
 8003dce:	464b      	mov	r3, r9
 8003dd0:	1891      	adds	r1, r2, r2
 8003dd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003dd4:	415b      	adcs	r3, r3
 8003dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ddc:	4641      	mov	r1, r8
 8003dde:	eb12 0a01 	adds.w	sl, r2, r1
 8003de2:	4649      	mov	r1, r9
 8003de4:	eb43 0b01 	adc.w	fp, r3, r1
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003df4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dfc:	4692      	mov	sl, r2
 8003dfe:	469b      	mov	fp, r3
 8003e00:	4643      	mov	r3, r8
 8003e02:	eb1a 0303 	adds.w	r3, sl, r3
 8003e06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	18db      	adds	r3, r3, r3
 8003e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e2e:	4613      	mov	r3, r2
 8003e30:	eb42 0303 	adc.w	r3, r2, r3
 8003e34:	647b      	str	r3, [r7, #68]	; 0x44
 8003e36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e3e:	f7fc f9e1 	bl	8000204 <__aeabi_uldivmod>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	4b3b      	ldr	r3, [pc, #236]	; (8003f38 <UART_SetConfig+0x2d4>)
 8003e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	2264      	movs	r2, #100	; 0x64
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	1acb      	subs	r3, r1, r3
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e5e:	4b36      	ldr	r3, [pc, #216]	; (8003f38 <UART_SetConfig+0x2d4>)
 8003e60:	fba3 2302 	umull	r2, r3, r3, r2
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e6c:	441c      	add	r4, r3
 8003e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e80:	4642      	mov	r2, r8
 8003e82:	464b      	mov	r3, r9
 8003e84:	1891      	adds	r1, r2, r2
 8003e86:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e88:	415b      	adcs	r3, r3
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e90:	4641      	mov	r1, r8
 8003e92:	1851      	adds	r1, r2, r1
 8003e94:	6339      	str	r1, [r7, #48]	; 0x30
 8003e96:	4649      	mov	r1, r9
 8003e98:	414b      	adcs	r3, r1
 8003e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ea8:	4659      	mov	r1, fp
 8003eaa:	00cb      	lsls	r3, r1, #3
 8003eac:	4651      	mov	r1, sl
 8003eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	00ca      	lsls	r2, r1, #3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4642      	mov	r2, r8
 8003ebe:	189b      	adds	r3, r3, r2
 8003ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	460a      	mov	r2, r1
 8003ec8:	eb42 0303 	adc.w	r3, r2, r3
 8003ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003edc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ee0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	18db      	adds	r3, r3, r3
 8003ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eea:	4613      	mov	r3, r2
 8003eec:	eb42 0303 	adc.w	r3, r2, r3
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ef6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003efa:	f7fc f983 	bl	8000204 <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <UART_SetConfig+0x2d4>)
 8003f04:	fba3 1302 	umull	r1, r3, r3, r2
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	2164      	movs	r1, #100	; 0x64
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	3332      	adds	r3, #50	; 0x32
 8003f16:	4a08      	ldr	r2, [pc, #32]	; (8003f38 <UART_SetConfig+0x2d4>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	f003 0207 	and.w	r2, r3, #7
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4422      	add	r2, r4
 8003f2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f2c:	e105      	b.n	800413a <UART_SetConfig+0x4d6>
 8003f2e:	bf00      	nop
 8003f30:	40011000 	.word	0x40011000
 8003f34:	40011400 	.word	0x40011400
 8003f38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f4e:	4642      	mov	r2, r8
 8003f50:	464b      	mov	r3, r9
 8003f52:	1891      	adds	r1, r2, r2
 8003f54:	6239      	str	r1, [r7, #32]
 8003f56:	415b      	adcs	r3, r3
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f5e:	4641      	mov	r1, r8
 8003f60:	1854      	adds	r4, r2, r1
 8003f62:	4649      	mov	r1, r9
 8003f64:	eb43 0501 	adc.w	r5, r3, r1
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	00eb      	lsls	r3, r5, #3
 8003f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f76:	00e2      	lsls	r2, r4, #3
 8003f78:	4614      	mov	r4, r2
 8003f7a:	461d      	mov	r5, r3
 8003f7c:	4643      	mov	r3, r8
 8003f7e:	18e3      	adds	r3, r4, r3
 8003f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f84:	464b      	mov	r3, r9
 8003f86:	eb45 0303 	adc.w	r3, r5, r3
 8003f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003faa:	4629      	mov	r1, r5
 8003fac:	008b      	lsls	r3, r1, #2
 8003fae:	4621      	mov	r1, r4
 8003fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	008a      	lsls	r2, r1, #2
 8003fb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fbc:	f7fc f922 	bl	8000204 <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4b60      	ldr	r3, [pc, #384]	; (8004148 <UART_SetConfig+0x4e4>)
 8003fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	011c      	lsls	r4, r3, #4
 8003fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	1891      	adds	r1, r2, r2
 8003fe6:	61b9      	str	r1, [r7, #24]
 8003fe8:	415b      	adcs	r3, r3
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	1851      	adds	r1, r2, r1
 8003ff4:	6139      	str	r1, [r7, #16]
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	414b      	adcs	r3, r1
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004008:	4659      	mov	r1, fp
 800400a:	00cb      	lsls	r3, r1, #3
 800400c:	4651      	mov	r1, sl
 800400e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004012:	4651      	mov	r1, sl
 8004014:	00ca      	lsls	r2, r1, #3
 8004016:	4610      	mov	r0, r2
 8004018:	4619      	mov	r1, r3
 800401a:	4603      	mov	r3, r0
 800401c:	4642      	mov	r2, r8
 800401e:	189b      	adds	r3, r3, r2
 8004020:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004024:	464b      	mov	r3, r9
 8004026:	460a      	mov	r2, r1
 8004028:	eb42 0303 	adc.w	r3, r2, r3
 800402c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	67bb      	str	r3, [r7, #120]	; 0x78
 800403a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004048:	4649      	mov	r1, r9
 800404a:	008b      	lsls	r3, r1, #2
 800404c:	4641      	mov	r1, r8
 800404e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004052:	4641      	mov	r1, r8
 8004054:	008a      	lsls	r2, r1, #2
 8004056:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800405a:	f7fc f8d3 	bl	8000204 <__aeabi_uldivmod>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4b39      	ldr	r3, [pc, #228]	; (8004148 <UART_SetConfig+0x4e4>)
 8004064:	fba3 1302 	umull	r1, r3, r3, r2
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	2164      	movs	r1, #100	; 0x64
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	3332      	adds	r3, #50	; 0x32
 8004076:	4a34      	ldr	r2, [pc, #208]	; (8004148 <UART_SetConfig+0x4e4>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004082:	441c      	add	r4, r3
 8004084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004088:	2200      	movs	r2, #0
 800408a:	673b      	str	r3, [r7, #112]	; 0x70
 800408c:	677a      	str	r2, [r7, #116]	; 0x74
 800408e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004092:	4642      	mov	r2, r8
 8004094:	464b      	mov	r3, r9
 8004096:	1891      	adds	r1, r2, r2
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	415b      	adcs	r3, r3
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040a2:	4641      	mov	r1, r8
 80040a4:	1851      	adds	r1, r2, r1
 80040a6:	6039      	str	r1, [r7, #0]
 80040a8:	4649      	mov	r1, r9
 80040aa:	414b      	adcs	r3, r1
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040ba:	4659      	mov	r1, fp
 80040bc:	00cb      	lsls	r3, r1, #3
 80040be:	4651      	mov	r1, sl
 80040c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c4:	4651      	mov	r1, sl
 80040c6:	00ca      	lsls	r2, r1, #3
 80040c8:	4610      	mov	r0, r2
 80040ca:	4619      	mov	r1, r3
 80040cc:	4603      	mov	r3, r0
 80040ce:	4642      	mov	r2, r8
 80040d0:	189b      	adds	r3, r3, r2
 80040d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80040d4:	464b      	mov	r3, r9
 80040d6:	460a      	mov	r2, r1
 80040d8:	eb42 0303 	adc.w	r3, r2, r3
 80040dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	663b      	str	r3, [r7, #96]	; 0x60
 80040e8:	667a      	str	r2, [r7, #100]	; 0x64
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040f6:	4649      	mov	r1, r9
 80040f8:	008b      	lsls	r3, r1, #2
 80040fa:	4641      	mov	r1, r8
 80040fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004100:	4641      	mov	r1, r8
 8004102:	008a      	lsls	r2, r1, #2
 8004104:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004108:	f7fc f87c 	bl	8000204 <__aeabi_uldivmod>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <UART_SetConfig+0x4e4>)
 8004112:	fba3 1302 	umull	r1, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2164      	movs	r1, #100	; 0x64
 800411a:	fb01 f303 	mul.w	r3, r1, r3
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	3332      	adds	r3, #50	; 0x32
 8004124:	4a08      	ldr	r2, [pc, #32]	; (8004148 <UART_SetConfig+0x4e4>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	f003 020f 	and.w	r2, r3, #15
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4422      	add	r2, r4
 8004138:	609a      	str	r2, [r3, #8]
}
 800413a:	bf00      	nop
 800413c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004140:	46bd      	mov	sp, r7
 8004142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004146:	bf00      	nop
 8004148:	51eb851f 	.word	0x51eb851f

0800414c <__libc_init_array>:
 800414c:	b570      	push	{r4, r5, r6, lr}
 800414e:	4d0d      	ldr	r5, [pc, #52]	; (8004184 <__libc_init_array+0x38>)
 8004150:	4c0d      	ldr	r4, [pc, #52]	; (8004188 <__libc_init_array+0x3c>)
 8004152:	1b64      	subs	r4, r4, r5
 8004154:	10a4      	asrs	r4, r4, #2
 8004156:	2600      	movs	r6, #0
 8004158:	42a6      	cmp	r6, r4
 800415a:	d109      	bne.n	8004170 <__libc_init_array+0x24>
 800415c:	4d0b      	ldr	r5, [pc, #44]	; (800418c <__libc_init_array+0x40>)
 800415e:	4c0c      	ldr	r4, [pc, #48]	; (8004190 <__libc_init_array+0x44>)
 8004160:	f000 f820 	bl	80041a4 <_init>
 8004164:	1b64      	subs	r4, r4, r5
 8004166:	10a4      	asrs	r4, r4, #2
 8004168:	2600      	movs	r6, #0
 800416a:	42a6      	cmp	r6, r4
 800416c:	d105      	bne.n	800417a <__libc_init_array+0x2e>
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	f855 3b04 	ldr.w	r3, [r5], #4
 8004174:	4798      	blx	r3
 8004176:	3601      	adds	r6, #1
 8004178:	e7ee      	b.n	8004158 <__libc_init_array+0xc>
 800417a:	f855 3b04 	ldr.w	r3, [r5], #4
 800417e:	4798      	blx	r3
 8004180:	3601      	adds	r6, #1
 8004182:	e7f2      	b.n	800416a <__libc_init_array+0x1e>
 8004184:	080041dc 	.word	0x080041dc
 8004188:	080041dc 	.word	0x080041dc
 800418c:	080041dc 	.word	0x080041dc
 8004190:	080041e0 	.word	0x080041e0

08004194 <memset>:
 8004194:	4402      	add	r2, r0
 8004196:	4603      	mov	r3, r0
 8004198:	4293      	cmp	r3, r2
 800419a:	d100      	bne.n	800419e <memset+0xa>
 800419c:	4770      	bx	lr
 800419e:	f803 1b01 	strb.w	r1, [r3], #1
 80041a2:	e7f9      	b.n	8004198 <memset+0x4>

080041a4 <_init>:
 80041a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a6:	bf00      	nop
 80041a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041aa:	bc08      	pop	{r3}
 80041ac:	469e      	mov	lr, r3
 80041ae:	4770      	bx	lr

080041b0 <_fini>:
 80041b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b2:	bf00      	nop
 80041b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b6:	bc08      	pop	{r3}
 80041b8:	469e      	mov	lr, r3
 80041ba:	4770      	bx	lr
