
Encoder_DCmotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004118  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080042dc  080042dc  000142dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f4  080042f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080042f4  080042f4  000142f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042fc  080042fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  2000000c  08004310  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08004310  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd94  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae2  00000000  00000000  0002ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  0002f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00030518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ede  00000000  00000000  000310e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e016  00000000  00000000  00051fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccadc  00000000  00000000  0005ffd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012cab0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003478  00000000  00000000  0012cb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080042c4 	.word	0x080042c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080042c4 	.word	0x080042c4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_TIM_IC_CaptureCallback>:
int16_t count5 = 0;

int dc=0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a20      	ldr	r2, [pc, #128]	; (8000594 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d10a      	bne.n	800052e <HAL_TIM_IC_CaptureCallback+0x26>
		counter2 = __HAL_TIM_GET_COUNTER(htim);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051e:	4a1e      	ldr	r2, [pc, #120]	; (8000598 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000520:	6013      	str	r3, [r2, #0]
		count2 = (int16_t)counter2;
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	b21a      	sxth	r2, r3
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <HAL_TIM_IC_CaptureCallback+0x94>)
 800052a:	801a      	strh	r2, [r3, #0]
	else if(htim == &htim5){
			counter5 = __HAL_TIM_GET_COUNTER(htim);
			count5 = (int16_t)counter5;
		}

}
 800052c:	e02b      	b.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
	else if(htim == &htim3){
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a1b      	ldr	r2, [pc, #108]	; (80005a0 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d10a      	bne.n	800054c <HAL_TIM_IC_CaptureCallback+0x44>
			counter3 = __HAL_TIM_GET_COUNTER(htim);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053c:	4a19      	ldr	r2, [pc, #100]	; (80005a4 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800053e:	6013      	str	r3, [r2, #0]
			count3 = (int16_t)counter3;
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	b21a      	sxth	r2, r3
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000548:	801a      	strh	r2, [r3, #0]
}
 800054a:	e01c      	b.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
	else if(htim == &htim4){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a17      	ldr	r2, [pc, #92]	; (80005ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d10a      	bne.n	800056a <HAL_TIM_IC_CaptureCallback+0x62>
			counter4 = __HAL_TIM_GET_COUNTER(htim);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055a:	4a15      	ldr	r2, [pc, #84]	; (80005b0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800055c:	6013      	str	r3, [r2, #0]
			count4 = (int16_t)counter4;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	b21a      	sxth	r2, r3
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000566:	801a      	strh	r2, [r3, #0]
}
 8000568:	e00d      	b.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
	else if(htim == &htim5){
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d109      	bne.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
			counter5 = __HAL_TIM_GET_COUNTER(htim);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000578:	4a10      	ldr	r2, [pc, #64]	; (80005bc <HAL_TIM_IC_CaptureCallback+0xb4>)
 800057a:	6013      	str	r3, [r2, #0]
			count5 = (int16_t)counter5;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_TIM_IC_CaptureCallback+0xb4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	b21a      	sxth	r2, r3
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000584:	801a      	strh	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000070 	.word	0x20000070
 8000598:	200002f4 	.word	0x200002f4
 800059c:	20000304 	.word	0x20000304
 80005a0:	200000b8 	.word	0x200000b8
 80005a4:	200002f8 	.word	0x200002f8
 80005a8:	20000306 	.word	0x20000306
 80005ac:	20000100 	.word	0x20000100
 80005b0:	200002fc 	.word	0x200002fc
 80005b4:	20000308 	.word	0x20000308
 80005b8:	20000148 	.word	0x20000148
 80005bc:	20000300 	.word	0x20000300
 80005c0:	2000030a 	.word	0x2000030a

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f001 f88f 	bl	80016ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f897 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 fc83 	bl	8000edc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 fc57 	bl	8000e88 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005da:	f000 f9c3 	bl	8000964 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005de:	f000 fa15 	bl	8000a0c <MX_TIM3_Init>
  MX_TIM4_Init();
 80005e2:	f000 fa67 	bl	8000ab4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80005e6:	f000 fab9 	bl	8000b5c <MX_TIM5_Init>
  MX_TIM10_Init();
 80005ea:	f000 fb0b 	bl	8000c04 <MX_TIM10_Init>
  MX_TIM12_Init();
 80005ee:	f000 fb5f 	bl	8000cb0 <MX_TIM12_Init>
  MX_TIM13_Init();
 80005f2:	f000 fbad 	bl	8000d50 <MX_TIM13_Init>
  MX_TIM14_Init();
 80005f6:	f000 fbf9 	bl	8000dec <MX_TIM14_Init>
  MX_TIM1_Init();
 80005fa:	f000 f8ef 	bl	80007dc <MX_TIM1_Init>
  // DC1: left front
  // DC2: right front
  // DC3: left back
  // DC4: right back

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80005fe:	213c      	movs	r1, #60	; 0x3c
 8000600:	4837      	ldr	r0, [pc, #220]	; (80006e0 <main+0x11c>)
 8000602:	f002 fc17 	bl	8002e34 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000606:	213c      	movs	r1, #60	; 0x3c
 8000608:	4836      	ldr	r0, [pc, #216]	; (80006e4 <main+0x120>)
 800060a:	f002 fc13 	bl	8002e34 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800060e:	213c      	movs	r1, #60	; 0x3c
 8000610:	4835      	ldr	r0, [pc, #212]	; (80006e8 <main+0x124>)
 8000612:	f002 fc0f 	bl	8002e34 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000616:	213c      	movs	r1, #60	; 0x3c
 8000618:	4834      	ldr	r0, [pc, #208]	; (80006ec <main+0x128>)
 800061a:	f002 fc0b 	bl	8002e34 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_ALL);
 800061e:	213c      	movs	r1, #60	; 0x3c
 8000620:	4833      	ldr	r0, [pc, #204]	; (80006f0 <main+0x12c>)
 8000622:	f002 fa3f 	bl	8002aa4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8000626:	2100      	movs	r1, #0
 8000628:	4832      	ldr	r0, [pc, #200]	; (80006f4 <main+0x130>)
 800062a:	f002 fa3b 	bl	8002aa4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  htim10.Instance-> CCR1 = 80;
 800062e:	4b31      	ldr	r3, [pc, #196]	; (80006f4 <main+0x130>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2250      	movs	r2, #80	; 0x50
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
	  htim1.Instance-> CCR1 = 80;
 8000636:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <main+0x12c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2250      	movs	r2, #80	; 0x50
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
	  htim1.Instance-> CCR2 = 80;
 800063e:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <main+0x12c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2250      	movs	r2, #80	; 0x50
 8000644:	639a      	str	r2, [r3, #56]	; 0x38
	  htim1.Instance-> CCR3 = 80;
 8000646:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <main+0x12c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2250      	movs	r2, #80	; 0x50
 800064c:	63da      	str	r2, [r3, #60]	; 0x3c
	  htim1.Instance-> CCR4 = 80;
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <main+0x12c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2250      	movs	r2, #80	; 0x50
 8000654:	641a      	str	r2, [r3, #64]	; 0x40

	  for(int i=0;i<4;i++){
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	e01d      	b.n	8000698 <main+0xd4>
	  	  		  int a=0;
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
	  	  		  int b=0;
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
	  	  		  HAL_GPIO_WritePin(GPIOC, DC1_1_Pin, a);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	2104      	movs	r1, #4
 800066c:	4822      	ldr	r0, [pc, #136]	; (80006f8 <main+0x134>)
 800066e:	f001 fb79 	bl	8001d64 <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOC, DC1_2_Pin, b);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	461a      	mov	r2, r3
 8000678:	2108      	movs	r1, #8
 800067a:	481f      	ldr	r0, [pc, #124]	; (80006f8 <main+0x134>)
 800067c:	f001 fb72 	bl	8001d64 <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOC, DC2_2_Pin, b);
	  	  		  HAL_GPIO_WritePin(GPIOC, DC3_1_Pin, a);
	  	  		  HAL_GPIO_WritePin(GPIOC, DC3_2_Pin, b);
	  	  		  HAL_GPIO_WritePin(GPIOC, DC4_1_Pin, a);
	  	  		  HAL_GPIO_WritePin(GPIOC, DC4_2_Pin, b);*/
	  	  		  dc++;
 8000680:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <main+0x138>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	4a1d      	ldr	r2, [pc, #116]	; (80006fc <main+0x138>)
 8000688:	6013      	str	r3, [r2, #0]
	  	  		  HAL_Delay(1000);
 800068a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068e:	f001 f89f 	bl	80017d0 <HAL_Delay>
	  for(int i=0;i<4;i++){
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	3301      	adds	r3, #1
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	2b03      	cmp	r3, #3
 800069c:	ddde      	ble.n	800065c <main+0x98>
	  }
	  for(int i=0;i<4;i++){
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	e018      	b.n	80006d6 <main+0x112>
				  int a=0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
				  int b=0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
				  HAL_GPIO_WritePin(GPIOC, DC1_1_Pin, a);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	2104      	movs	r1, #4
 80006b4:	4810      	ldr	r0, [pc, #64]	; (80006f8 <main+0x134>)
 80006b6:	f001 fb55 	bl	8001d64 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, DC1_2_Pin, b);
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	461a      	mov	r2, r3
 80006c0:	2108      	movs	r1, #8
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <main+0x134>)
 80006c4:	f001 fb4e 	bl	8001d64 <HAL_GPIO_WritePin>
				  HAL_Delay(1000);
 80006c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006cc:	f001 f880 	bl	80017d0 <HAL_Delay>
	  for(int i=0;i<4;i++){
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	3301      	adds	r3, #1
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	dde3      	ble.n	80006a4 <main+0xe0>
	  htim10.Instance-> CCR1 = 80;
 80006dc:	e7a7      	b.n	800062e <main+0x6a>
 80006de:	bf00      	nop
 80006e0:	20000070 	.word	0x20000070
 80006e4:	200000b8 	.word	0x200000b8
 80006e8:	20000100 	.word	0x20000100
 80006ec:	20000148 	.word	0x20000148
 80006f0:	20000028 	.word	0x20000028
 80006f4:	20000190 	.word	0x20000190
 80006f8:	40020800 	.word	0x40020800
 80006fc:	2000030c 	.word	0x2000030c

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2234      	movs	r2, #52	; 0x34
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f003 fdd0 	bl	80042b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <SystemClock_Config+0xd4>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a29      	ldr	r2, [pc, #164]	; (80007d4 <SystemClock_Config+0xd4>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <SystemClock_Config+0xd4>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <SystemClock_Config+0xd8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074c:	4a22      	ldr	r2, [pc, #136]	; (80007d8 <SystemClock_Config+0xd8>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <SystemClock_Config+0xd8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000774:	2310      	movs	r3, #16
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000778:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800077c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800077e:	2304      	movs	r3, #4
 8000780:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000786:	2302      	movs	r3, #2
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fe4c 	bl	800242c <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800079a:	f000 fc21 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2102      	movs	r1, #2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 faec 	bl	8001d98 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007c6:	f000 fc0b 	bl	8000fe0 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	; 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b096      	sub	sp, #88	; 0x58
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2220      	movs	r2, #32
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f003 fd4d 	bl	80042b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800081a:	4b50      	ldr	r3, [pc, #320]	; (800095c <MX_TIM1_Init+0x180>)
 800081c:	4a50      	ldr	r2, [pc, #320]	; (8000960 <MX_TIM1_Init+0x184>)
 800081e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000820:	4b4e      	ldr	r3, [pc, #312]	; (800095c <MX_TIM1_Init+0x180>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b4d      	ldr	r3, [pc, #308]	; (800095c <MX_TIM1_Init+0x180>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800082c:	4b4b      	ldr	r3, [pc, #300]	; (800095c <MX_TIM1_Init+0x180>)
 800082e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000832:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b49      	ldr	r3, [pc, #292]	; (800095c <MX_TIM1_Init+0x180>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800083a:	4b48      	ldr	r3, [pc, #288]	; (800095c <MX_TIM1_Init+0x180>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b46      	ldr	r3, [pc, #280]	; (800095c <MX_TIM1_Init+0x180>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000846:	4845      	ldr	r0, [pc, #276]	; (800095c <MX_TIM1_Init+0x180>)
 8000848:	f002 f88e 	bl	8002968 <HAL_TIM_Base_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000852:	f000 fbc5 	bl	8000fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800085c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000860:	4619      	mov	r1, r3
 8000862:	483e      	ldr	r0, [pc, #248]	; (800095c <MX_TIM1_Init+0x180>)
 8000864:	f002 fd5e 	bl	8003324 <HAL_TIM_ConfigClockSource>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800086e:	f000 fbb7 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000872:	483a      	ldr	r0, [pc, #232]	; (800095c <MX_TIM1_Init+0x180>)
 8000874:	f002 f8c7 	bl	8002a06 <HAL_TIM_PWM_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800087e:	f000 fbaf 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800088a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800088e:	4619      	mov	r1, r3
 8000890:	4832      	ldr	r0, [pc, #200]	; (800095c <MX_TIM1_Init+0x180>)
 8000892:	f003 f947 	bl	8003b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800089c:	f000 fba0 	bl	8000fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a0:	2360      	movs	r3, #96	; 0x60
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008b4:	2300      	movs	r3, #0
 80008b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	2200      	movs	r2, #0
 80008c2:	4619      	mov	r1, r3
 80008c4:	4825      	ldr	r0, [pc, #148]	; (800095c <MX_TIM1_Init+0x180>)
 80008c6:	f002 fc6b 	bl	80031a0 <HAL_TIM_PWM_ConfigChannel>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80008d0:	f000 fb86 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	2204      	movs	r2, #4
 80008da:	4619      	mov	r1, r3
 80008dc:	481f      	ldr	r0, [pc, #124]	; (800095c <MX_TIM1_Init+0x180>)
 80008de:	f002 fc5f 	bl	80031a0 <HAL_TIM_PWM_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80008e8:	f000 fb7a 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	2208      	movs	r2, #8
 80008f2:	4619      	mov	r1, r3
 80008f4:	4819      	ldr	r0, [pc, #100]	; (800095c <MX_TIM1_Init+0x180>)
 80008f6:	f002 fc53 	bl	80031a0 <HAL_TIM_PWM_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000900:	f000 fb6e 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000908:	220c      	movs	r2, #12
 800090a:	4619      	mov	r1, r3
 800090c:	4813      	ldr	r0, [pc, #76]	; (800095c <MX_TIM1_Init+0x180>)
 800090e:	f002 fc47 	bl	80031a0 <HAL_TIM_PWM_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000918:	f000 fb62 	bl	8000fe0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000934:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4619      	mov	r1, r3
 800093e:	4807      	ldr	r0, [pc, #28]	; (800095c <MX_TIM1_Init+0x180>)
 8000940:	f003 f96c 	bl	8003c1c <HAL_TIMEx_ConfigBreakDeadTime>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800094a:	f000 fb49 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800094e:	4803      	ldr	r0, [pc, #12]	; (800095c <MX_TIM1_Init+0x180>)
 8000950:	f000 fd20 	bl	8001394 <HAL_TIM_MspPostInit>

}
 8000954:	bf00      	nop
 8000956:	3758      	adds	r7, #88	; 0x58
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000028 	.word	0x20000028
 8000960:	40010000 	.word	0x40010000

08000964 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	; 0x30
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2224      	movs	r2, #36	; 0x24
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f003 fc9e 	bl	80042b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000980:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_TIM2_Init+0xa4>)
 8000982:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000986:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_TIM2_Init+0xa4>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098e:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_TIM2_Init+0xa4>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000994:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_TIM2_Init+0xa4>)
 8000996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800099a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_TIM2_Init+0xa4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_TIM2_Init+0xa4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009a8:	2303      	movs	r3, #3
 80009aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009b0:	2301      	movs	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009c0:	2301      	movs	r3, #1
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4619      	mov	r1, r3
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_TIM2_Init+0xa4>)
 80009d4:	f002 f988 	bl	8002ce8 <HAL_TIM_Encoder_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80009de:	f000 faff 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <MX_TIM2_Init+0xa4>)
 80009f0:	f003 f898 	bl	8003b24 <HAL_TIMEx_MasterConfigSynchronization>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80009fa:	f000 faf1 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3730      	adds	r7, #48	; 0x30
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000070 	.word	0x20000070

08000a0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	2224      	movs	r2, #36	; 0x24
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f003 fc4a 	bl	80042b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <MX_TIM3_Init+0xa0>)
 8000a2a:	4a21      	ldr	r2, [pc, #132]	; (8000ab0 <MX_TIM3_Init+0xa4>)
 8000a2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_TIM3_Init+0xa0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_TIM3_Init+0xa0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_TIM3_Init+0xa0>)
 8000a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_TIM3_Init+0xa0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_TIM3_Init+0xa0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000a52:	2302      	movs	r3, #2
 8000a54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a56:	2301      	movs	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000a62:	2302      	movs	r3, #2
 8000a64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a66:	2301      	movs	r3, #1
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <MX_TIM3_Init+0xa0>)
 8000a7a:	f002 f935 	bl	8002ce8 <HAL_TIM_Encoder_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000a84:	f000 faac 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_TIM3_Init+0xa0>)
 8000a96:	f003 f845 	bl	8003b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000aa0:	f000 fa9e 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	3730      	adds	r7, #48	; 0x30
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200000b8 	.word	0x200000b8
 8000ab0:	40000400 	.word	0x40000400

08000ab4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	; 0x30
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	2224      	movs	r2, #36	; 0x24
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f003 fbf6 	bl	80042b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ad0:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <MX_TIM4_Init+0xa0>)
 8000ad2:	4a21      	ldr	r2, [pc, #132]	; (8000b58 <MX_TIM4_Init+0xa4>)
 8000ad4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_TIM4_Init+0xa0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_TIM4_Init+0xa0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_TIM4_Init+0xa0>)
 8000ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_TIM4_Init+0xa0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_TIM4_Init+0xa0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000af6:	2303      	movs	r3, #3
 8000af8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000afe:	2301      	movs	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480c      	ldr	r0, [pc, #48]	; (8000b54 <MX_TIM4_Init+0xa0>)
 8000b22:	f002 f8e1 	bl	8002ce8 <HAL_TIM_Encoder_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000b2c:	f000 fa58 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_TIM4_Init+0xa0>)
 8000b3e:	f002 fff1 	bl	8003b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000b48:	f000 fa4a 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	3730      	adds	r7, #48	; 0x30
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000100 	.word	0x20000100
 8000b58:	40000800 	.word	0x40000800

08000b5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	; 0x30
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	2224      	movs	r2, #36	; 0x24
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f003 fba2 	bl	80042b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <MX_TIM5_Init+0xa0>)
 8000b7a:	4a21      	ldr	r2, [pc, #132]	; (8000c00 <MX_TIM5_Init+0xa4>)
 8000b7c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_TIM5_Init+0xa0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_TIM5_Init+0xa0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_TIM5_Init+0xa0>)
 8000b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b90:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_TIM5_Init+0xa0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_TIM5_Init+0xa0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <MX_TIM5_Init+0xa0>)
 8000bca:	f002 f88d 	bl	8002ce8 <HAL_TIM_Encoder_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000bd4:	f000 fa04 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_TIM5_Init+0xa0>)
 8000be6:	f002 ff9d 	bl	8003b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000bf0:	f000 f9f6 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	3730      	adds	r7, #48	; 0x30
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000148 	.word	0x20000148
 8000c00:	40000c00 	.word	0x40000c00

08000c04 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	615a      	str	r2, [r3, #20]
 8000c1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000c1c:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <MX_TIM10_Init+0xa4>)
 8000c1e:	4a23      	ldr	r2, [pc, #140]	; (8000cac <MX_TIM10_Init+0xa8>)
 8000c20:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <MX_TIM10_Init+0xa4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_TIM10_Init+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_TIM10_Init+0xa4>)
 8000c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c34:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_TIM10_Init+0xa4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_TIM10_Init+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c42:	4819      	ldr	r0, [pc, #100]	; (8000ca8 <MX_TIM10_Init+0xa4>)
 8000c44:	f001 fe90 	bl	8002968 <HAL_TIM_Base_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000c4e:	f000 f9c7 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000c52:	4815      	ldr	r0, [pc, #84]	; (8000ca8 <MX_TIM10_Init+0xa4>)
 8000c54:	f001 fed7 	bl	8002a06 <HAL_TIM_PWM_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000c5e:	f000 f9bf 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim10, TIM_OPMODE_SINGLE) != HAL_OK)
 8000c62:	2108      	movs	r1, #8
 8000c64:	4810      	ldr	r0, [pc, #64]	; (8000ca8 <MX_TIM10_Init+0xa4>)
 8000c66:	f001 ffe5 	bl	8002c34 <HAL_TIM_OnePulse_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM10_Init+0x70>
  {
    Error_Handler();
 8000c70:	f000 f9b6 	bl	8000fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c74:	2360      	movs	r3, #96	; 0x60
 8000c76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2200      	movs	r2, #0
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <MX_TIM10_Init+0xa4>)
 8000c8c:	f002 fa88 	bl	80031a0 <HAL_TIM_PWM_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM10_Init+0x96>
  {
    Error_Handler();
 8000c96:	f000 f9a3 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000c9a:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <MX_TIM10_Init+0xa4>)
 8000c9c:	f000 fb7a 	bl	8001394 <HAL_TIM_MspPostInit>

}
 8000ca0:	bf00      	nop
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000190 	.word	0x20000190
 8000cac:	40014400 	.word	0x40014400

08000cb0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	615a      	str	r2, [r3, #20]
 8000cc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_TIM12_Init+0x98>)
 8000cca:	4a20      	ldr	r2, [pc, #128]	; (8000d4c <MX_TIM12_Init+0x9c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <MX_TIM12_Init+0x98>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_TIM12_Init+0x98>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <MX_TIM12_Init+0x98>)
 8000cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_TIM12_Init+0x98>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_TIM12_Init+0x98>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000cee:	4816      	ldr	r0, [pc, #88]	; (8000d48 <MX_TIM12_Init+0x98>)
 8000cf0:	f001 fe89 	bl	8002a06 <HAL_TIM_PWM_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000cfa:	f000 f971 	bl	8000fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cfe:	2360      	movs	r3, #96	; 0x60
 8000d00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <MX_TIM12_Init+0x98>)
 8000d16:	f002 fa43 	bl	80031a0 <HAL_TIM_PWM_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000d20:	f000 f95e 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2204      	movs	r2, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <MX_TIM12_Init+0x98>)
 8000d2c:	f002 fa38 	bl	80031a0 <HAL_TIM_PWM_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8000d36:	f000 f953 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000d3a:	4803      	ldr	r0, [pc, #12]	; (8000d48 <MX_TIM12_Init+0x98>)
 8000d3c:	f000 fb2a 	bl	8001394 <HAL_TIM_MspPostInit>

}
 8000d40:	bf00      	nop
 8000d42:	3720      	adds	r7, #32
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200001d8 	.word	0x200001d8
 8000d4c:	40001800 	.word	0x40001800

08000d50 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
 8000d64:	615a      	str	r2, [r3, #20]
 8000d66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <MX_TIM13_Init+0x94>)
 8000d6a:	4a1f      	ldr	r2, [pc, #124]	; (8000de8 <MX_TIM13_Init+0x98>)
 8000d6c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_TIM13_Init+0x94>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <MX_TIM13_Init+0x94>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_TIM13_Init+0x94>)
 8000d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d80:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_TIM13_Init+0x94>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_TIM13_Init+0x94>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000d8e:	4815      	ldr	r0, [pc, #84]	; (8000de4 <MX_TIM13_Init+0x94>)
 8000d90:	f001 fdea 	bl	8002968 <HAL_TIM_Base_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8000d9a:	f000 f921 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <MX_TIM13_Init+0x94>)
 8000da0:	f001 fe31 	bl	8002a06 <HAL_TIM_PWM_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000daa:	f000 f919 	bl	8000fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dae:	2360      	movs	r3, #96	; 0x60
 8000db0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <MX_TIM13_Init+0x94>)
 8000dc6:	f002 f9eb 	bl	80031a0 <HAL_TIM_PWM_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8000dd0:	f000 f906 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <MX_TIM13_Init+0x94>)
 8000dd6:	f000 fadd 	bl	8001394 <HAL_TIM_MspPostInit>

}
 8000dda:	bf00      	nop
 8000ddc:	3720      	adds	r7, #32
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000220 	.word	0x20000220
 8000de8:	40001c00 	.word	0x40001c00

08000dec <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	615a      	str	r2, [r3, #20]
 8000e02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <MX_TIM14_Init+0x94>)
 8000e06:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <MX_TIM14_Init+0x98>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <MX_TIM14_Init+0x94>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <MX_TIM14_Init+0x94>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_TIM14_Init+0x94>)
 8000e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e1c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <MX_TIM14_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_TIM14_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000e2a:	4815      	ldr	r0, [pc, #84]	; (8000e80 <MX_TIM14_Init+0x94>)
 8000e2c:	f001 fd9c 	bl	8002968 <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000e36:	f000 f8d3 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000e3a:	4811      	ldr	r0, [pc, #68]	; (8000e80 <MX_TIM14_Init+0x94>)
 8000e3c:	f001 fde3 	bl	8002a06 <HAL_TIM_PWM_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000e46:	f000 f8cb 	bl	8000fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4a:	2360      	movs	r3, #96	; 0x60
 8000e4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4807      	ldr	r0, [pc, #28]	; (8000e80 <MX_TIM14_Init+0x94>)
 8000e62:	f002 f99d 	bl	80031a0 <HAL_TIM_PWM_ConfigChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000e6c:	f000 f8b8 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000e70:	4803      	ldr	r0, [pc, #12]	; (8000e80 <MX_TIM14_Init+0x94>)
 8000e72:	f000 fa8f 	bl	8001394 <HAL_TIM_MspPostInit>

}
 8000e76:	bf00      	nop
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000268 	.word	0x20000268
 8000e84:	40002000 	.word	0x40002000

08000e88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <MX_USART2_UART_Init+0x50>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	f002 ff12 	bl	8003ce8 <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eca:	f000 f889 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200002b0 	.word	0x200002b0
 8000ed8:	40004400 	.word	0x40004400

08000edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <MX_GPIO_Init+0xf8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a36      	ldr	r2, [pc, #216]	; (8000fd4 <MX_GPIO_Init+0xf8>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <MX_GPIO_Init+0xf8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <MX_GPIO_Init+0xf8>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a2f      	ldr	r2, [pc, #188]	; (8000fd4 <MX_GPIO_Init+0xf8>)
 8000f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <MX_GPIO_Init+0xf8>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <MX_GPIO_Init+0xf8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a28      	ldr	r2, [pc, #160]	; (8000fd4 <MX_GPIO_Init+0xf8>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <MX_GPIO_Init+0xf8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <MX_GPIO_Init+0xf8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a21      	ldr	r2, [pc, #132]	; (8000fd4 <MX_GPIO_Init+0xf8>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <MX_GPIO_Init+0xf8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DC1_1_Pin|DC1_2_Pin, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	210c      	movs	r1, #12
 8000f66:	481c      	ldr	r0, [pc, #112]	; (8000fd8 <MX_GPIO_Init+0xfc>)
 8000f68:	f000 fefc 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2120      	movs	r1, #32
 8000f70:	481a      	ldr	r0, [pc, #104]	; (8000fdc <MX_GPIO_Init+0x100>)
 8000f72:	f000 fef7 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f7c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4812      	ldr	r0, [pc, #72]	; (8000fd8 <MX_GPIO_Init+0xfc>)
 8000f8e:	f000 fd55 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : DC1_1_Pin DC1_2_Pin */
  GPIO_InitStruct.Pin = DC1_1_Pin|DC1_2_Pin;
 8000f92:	230c      	movs	r3, #12
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <MX_GPIO_Init+0xfc>)
 8000faa:	f000 fd47 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fae:	2320      	movs	r3, #32
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_GPIO_Init+0x100>)
 8000fc6:	f000 fd39 	bl	8001a3c <HAL_GPIO_Init>

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <Error_Handler+0x8>
	...

08000fec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_MspInit+0x4c>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <HAL_MspInit+0x4c>)
 8000ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_MspInit+0x4c>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_MspInit+0x4c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_MspInit+0x4c>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	6413      	str	r3, [r2, #64]	; 0x40
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_MspInit+0x4c>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800102a:	2007      	movs	r0, #7
 800102c:	f000 fcc4 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40023800 	.word	0x40023800

0800103c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a29      	ldr	r2, [pc, #164]	; (80010f0 <HAL_TIM_Base_MspInit+0xb4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d10e      	bne.n	800106c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <HAL_TIM_Base_MspInit+0xb8>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <HAL_TIM_Base_MspInit+0xb8>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <HAL_TIM_Base_MspInit+0xb8>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800106a:	e03a      	b.n	80010e2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM10)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <HAL_TIM_Base_MspInit+0xbc>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d10e      	bne.n	8001094 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <HAL_TIM_Base_MspInit+0xb8>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a1d      	ldr	r2, [pc, #116]	; (80010f4 <HAL_TIM_Base_MspInit+0xb8>)
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_TIM_Base_MspInit+0xb8>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
}
 8001092:	e026      	b.n	80010e2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM13)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a18      	ldr	r2, [pc, #96]	; (80010fc <HAL_TIM_Base_MspInit+0xc0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d10e      	bne.n	80010bc <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <HAL_TIM_Base_MspInit+0xb8>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a13      	ldr	r2, [pc, #76]	; (80010f4 <HAL_TIM_Base_MspInit+0xb8>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <HAL_TIM_Base_MspInit+0xb8>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
}
 80010ba:	e012      	b.n	80010e2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <HAL_TIM_Base_MspInit+0xc4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10d      	bne.n	80010e2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_TIM_Base_MspInit+0xb8>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <HAL_TIM_Base_MspInit+0xb8>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <HAL_TIM_Base_MspInit+0xb8>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
}
 80010e2:	bf00      	nop
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40010000 	.word	0x40010000
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40014400 	.word	0x40014400
 80010fc:	40001c00 	.word	0x40001c00
 8001100:	40002000 	.word	0x40002000

08001104 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b090      	sub	sp, #64	; 0x40
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001124:	d154      	bne.n	80011d0 <HAL_TIM_Encoder_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
 800112a:	4b82      	ldr	r3, [pc, #520]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	4a81      	ldr	r2, [pc, #516]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6413      	str	r3, [r2, #64]	; 0x40
 8001136:	4b7f      	ldr	r3, [pc, #508]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001140:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
 8001146:	4b7b      	ldr	r3, [pc, #492]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a7a      	ldr	r2, [pc, #488]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b78      	ldr	r3, [pc, #480]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
 800115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
 8001162:	4b74      	ldr	r3, [pc, #464]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a73      	ldr	r2, [pc, #460]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b71      	ldr	r3, [pc, #452]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	623b      	str	r3, [r7, #32]
 8001178:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800117a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800118c:	2301      	movs	r3, #1
 800118e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001194:	4619      	mov	r1, r3
 8001196:	4868      	ldr	r0, [pc, #416]	; (8001338 <HAL_TIM_Encoder_MspInit+0x234>)
 8001198:	f000 fc50 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800119c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011ae:	2301      	movs	r3, #1
 80011b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b6:	4619      	mov	r1, r3
 80011b8:	4860      	ldr	r0, [pc, #384]	; (800133c <HAL_TIM_Encoder_MspInit+0x238>)
 80011ba:	f000 fc3f 	bl	8001a3c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	201c      	movs	r0, #28
 80011c4:	f000 fc03 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011c8:	201c      	movs	r0, #28
 80011ca:	f000 fc1c 	bl	8001a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80011ce:	e0ac      	b.n	800132a <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM3)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a5a      	ldr	r2, [pc, #360]	; (8001340 <HAL_TIM_Encoder_MspInit+0x23c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d134      	bne.n	8001244 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
 80011de:	4b55      	ldr	r3, [pc, #340]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a54      	ldr	r2, [pc, #336]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b52      	ldr	r3, [pc, #328]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	4b4e      	ldr	r3, [pc, #312]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a4d      	ldr	r2, [pc, #308]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	61bb      	str	r3, [r7, #24]
 8001210:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001212:	23c0      	movs	r3, #192	; 0xc0
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001222:	2302      	movs	r3, #2
 8001224:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001226:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800122a:	4619      	mov	r1, r3
 800122c:	4845      	ldr	r0, [pc, #276]	; (8001344 <HAL_TIM_Encoder_MspInit+0x240>)
 800122e:	f000 fc05 	bl	8001a3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	201d      	movs	r0, #29
 8001238:	f000 fbc9 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800123c:	201d      	movs	r0, #29
 800123e:	f000 fbe2 	bl	8001a06 <HAL_NVIC_EnableIRQ>
}
 8001242:	e072      	b.n	800132a <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM4)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a3f      	ldr	r2, [pc, #252]	; (8001348 <HAL_TIM_Encoder_MspInit+0x244>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d134      	bne.n	80012b8 <HAL_TIM_Encoder_MspInit+0x1b4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	4b38      	ldr	r3, [pc, #224]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a37      	ldr	r2, [pc, #220]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b35      	ldr	r3, [pc, #212]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b31      	ldr	r3, [pc, #196]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a30      	ldr	r2, [pc, #192]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001286:	23c0      	movs	r3, #192	; 0xc0
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001296:	2302      	movs	r3, #2
 8001298:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800129e:	4619      	mov	r1, r3
 80012a0:	4826      	ldr	r0, [pc, #152]	; (800133c <HAL_TIM_Encoder_MspInit+0x238>)
 80012a2:	f000 fbcb 	bl	8001a3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	201e      	movs	r0, #30
 80012ac:	f000 fb8f 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012b0:	201e      	movs	r0, #30
 80012b2:	f000 fba8 	bl	8001a06 <HAL_NVIC_EnableIRQ>
}
 80012b6:	e038      	b.n	800132a <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM5)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a23      	ldr	r2, [pc, #140]	; (800134c <HAL_TIM_Encoder_MspInit+0x248>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d133      	bne.n	800132a <HAL_TIM_Encoder_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a13      	ldr	r2, [pc, #76]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_TIM_Encoder_MspInit+0x230>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012fa:	2303      	movs	r3, #3
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800130a:	2302      	movs	r3, #2
 800130c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001312:	4619      	mov	r1, r3
 8001314:	4808      	ldr	r0, [pc, #32]	; (8001338 <HAL_TIM_Encoder_MspInit+0x234>)
 8001316:	f000 fb91 	bl	8001a3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2032      	movs	r0, #50	; 0x32
 8001320:	f000 fb55 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001324:	2032      	movs	r0, #50	; 0x32
 8001326:	f000 fb6e 	bl	8001a06 <HAL_NVIC_EnableIRQ>
}
 800132a:	bf00      	nop
 800132c:	3740      	adds	r7, #64	; 0x40
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000
 800133c:	40020400 	.word	0x40020400
 8001340:	40000400 	.word	0x40000400
 8001344:	40020800 	.word	0x40020800
 8001348:	40000800 	.word	0x40000800
 800134c:	40000c00 	.word	0x40000c00

08001350 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0b      	ldr	r2, [pc, #44]	; (800138c <HAL_TIM_PWM_MspInit+0x3c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d10d      	bne.n	800137e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_TIM_PWM_MspInit+0x40>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a09      	ldr	r2, [pc, #36]	; (8001390 <HAL_TIM_PWM_MspInit+0x40>)
 800136c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <HAL_TIM_PWM_MspInit+0x40>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40001800 	.word	0x40001800
 8001390:	40023800 	.word	0x40023800

08001394 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08c      	sub	sp, #48	; 0x30
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a5b      	ldr	r2, [pc, #364]	; (8001520 <HAL_TIM_MspPostInit+0x18c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d11f      	bne.n	80013f6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
 80013ba:	4b5a      	ldr	r3, [pc, #360]	; (8001524 <HAL_TIM_MspPostInit+0x190>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a59      	ldr	r2, [pc, #356]	; (8001524 <HAL_TIM_MspPostInit+0x190>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b57      	ldr	r3, [pc, #348]	; (8001524 <HAL_TIM_MspPostInit+0x190>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80013d2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013e4:	2301      	movs	r3, #1
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	484e      	ldr	r0, [pc, #312]	; (8001528 <HAL_TIM_MspPostInit+0x194>)
 80013f0:	f000 fb24 	bl	8001a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80013f4:	e090      	b.n	8001518 <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM10)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a4c      	ldr	r2, [pc, #304]	; (800152c <HAL_TIM_MspPostInit+0x198>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d11f      	bne.n	8001440 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	4b47      	ldr	r3, [pc, #284]	; (8001524 <HAL_TIM_MspPostInit+0x190>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001408:	4a46      	ldr	r2, [pc, #280]	; (8001524 <HAL_TIM_MspPostInit+0x190>)
 800140a:	f043 0302 	orr.w	r3, r3, #2
 800140e:	6313      	str	r3, [r2, #48]	; 0x30
 8001410:	4b44      	ldr	r3, [pc, #272]	; (8001524 <HAL_TIM_MspPostInit+0x190>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800141c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800142e:	2303      	movs	r3, #3
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	483d      	ldr	r0, [pc, #244]	; (8001530 <HAL_TIM_MspPostInit+0x19c>)
 800143a:	f000 faff 	bl	8001a3c <HAL_GPIO_Init>
}
 800143e:	e06b      	b.n	8001518 <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM12)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a3b      	ldr	r2, [pc, #236]	; (8001534 <HAL_TIM_MspPostInit+0x1a0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d11f      	bne.n	800148a <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b35      	ldr	r3, [pc, #212]	; (8001524 <HAL_TIM_MspPostInit+0x190>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a34      	ldr	r2, [pc, #208]	; (8001524 <HAL_TIM_MspPostInit+0x190>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b32      	ldr	r3, [pc, #200]	; (8001524 <HAL_TIM_MspPostInit+0x190>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001466:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800146a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001478:	2309      	movs	r3, #9
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	482b      	ldr	r0, [pc, #172]	; (8001530 <HAL_TIM_MspPostInit+0x19c>)
 8001484:	f000 fada 	bl	8001a3c <HAL_GPIO_Init>
}
 8001488:	e046      	b.n	8001518 <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM13)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a2a      	ldr	r2, [pc, #168]	; (8001538 <HAL_TIM_MspPostInit+0x1a4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d11e      	bne.n	80014d2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	4b22      	ldr	r3, [pc, #136]	; (8001524 <HAL_TIM_MspPostInit+0x190>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	4a21      	ldr	r2, [pc, #132]	; (8001524 <HAL_TIM_MspPostInit+0x190>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6313      	str	r3, [r2, #48]	; 0x30
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <HAL_TIM_MspPostInit+0x190>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014b0:	2340      	movs	r3, #64	; 0x40
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80014c0:	2309      	movs	r3, #9
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	4817      	ldr	r0, [pc, #92]	; (8001528 <HAL_TIM_MspPostInit+0x194>)
 80014cc:	f000 fab6 	bl	8001a3c <HAL_GPIO_Init>
}
 80014d0:	e022      	b.n	8001518 <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM14)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a19      	ldr	r2, [pc, #100]	; (800153c <HAL_TIM_MspPostInit+0x1a8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d11d      	bne.n	8001518 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_TIM_MspPostInit+0x190>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <HAL_TIM_MspPostInit+0x190>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6313      	str	r3, [r2, #48]	; 0x30
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_TIM_MspPostInit+0x190>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001508:	2309      	movs	r3, #9
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	4619      	mov	r1, r3
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <HAL_TIM_MspPostInit+0x194>)
 8001514:	f000 fa92 	bl	8001a3c <HAL_GPIO_Init>
}
 8001518:	bf00      	nop
 800151a:	3730      	adds	r7, #48	; 0x30
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40010000 	.word	0x40010000
 8001524:	40023800 	.word	0x40023800
 8001528:	40020000 	.word	0x40020000
 800152c:	40014400 	.word	0x40014400
 8001530:	40020400 	.word	0x40020400
 8001534:	40001800 	.word	0x40001800
 8001538:	40001c00 	.word	0x40001c00
 800153c:	40002000 	.word	0x40002000

08001540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a19      	ldr	r2, [pc, #100]	; (80015c4 <HAL_UART_MspInit+0x84>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d12b      	bne.n	80015ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HAL_UART_MspInit+0x88>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a17      	ldr	r2, [pc, #92]	; (80015c8 <HAL_UART_MspInit+0x88>)
 800156c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_UART_MspInit+0x88>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_UART_MspInit+0x88>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <HAL_UART_MspInit+0x88>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <HAL_UART_MspInit+0x88>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800159a:	230c      	movs	r3, #12
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015aa:	2307      	movs	r3, #7
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <HAL_UART_MspInit+0x8c>)
 80015b6:	f000 fa41 	bl	8001a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	; 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40004400 	.word	0x40004400
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020000 	.word	0x40020000

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161c:	f000 f8b8 	bl	8001790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <TIM2_IRQHandler+0x10>)
 800162a:	f001 fcb1 	bl	8002f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000070 	.word	0x20000070

08001638 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <TIM3_IRQHandler+0x10>)
 800163e:	f001 fca7 	bl	8002f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200000b8 	.word	0x200000b8

0800164c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <TIM4_IRQHandler+0x10>)
 8001652:	f001 fc9d 	bl	8002f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000100 	.word	0x20000100

08001660 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <TIM5_IRQHandler+0x10>)
 8001666:	f001 fc93 	bl	8002f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000148 	.word	0x20000148

08001674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <SystemInit+0x20>)
 800167a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <SystemInit+0x20>)
 8001680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800169c:	480d      	ldr	r0, [pc, #52]	; (80016d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800169e:	490e      	ldr	r1, [pc, #56]	; (80016d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016a0:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016b4:	4c0b      	ldr	r4, [pc, #44]	; (80016e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016c2:	f7ff ffd7 	bl	8001674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c6:	f002 fdd1 	bl	800426c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ca:	f7fe ff7b 	bl	80005c4 <main>
  bx  lr    
 80016ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016dc:	08004304 	.word	0x08004304
  ldr r2, =_sbss
 80016e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016e4:	20000314 	.word	0x20000314

080016e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <ADC_IRQHandler>
	...

080016ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0d      	ldr	r2, [pc, #52]	; (800172c <HAL_Init+0x40>)
 80016f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0a      	ldr	r2, [pc, #40]	; (800172c <HAL_Init+0x40>)
 8001702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001706:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_Init+0x40>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a07      	ldr	r2, [pc, #28]	; (800172c <HAL_Init+0x40>)
 800170e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001712:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001714:	2003      	movs	r0, #3
 8001716:	f000 f94f 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171a:	2000      	movs	r0, #0
 800171c:	f000 f808 	bl	8001730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001720:	f7ff fc64 	bl	8000fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023c00 	.word	0x40023c00

08001730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_InitTick+0x54>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x58>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001746:	fbb3 f3f1 	udiv	r3, r3, r1
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f967 	bl	8001a22 <HAL_SYSTICK_Config>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e00e      	b.n	800177c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	d80a      	bhi.n	800177a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001764:	2200      	movs	r2, #0
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800176c:	f000 f92f 	bl	80019ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001770:	4a06      	ldr	r2, [pc, #24]	; (800178c <HAL_InitTick+0x5c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	e000      	b.n	800177c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000000 	.word	0x20000000
 8001788:	20000008 	.word	0x20000008
 800178c:	20000004 	.word	0x20000004

08001790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x20>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x24>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_IncTick+0x24>)
 80017a2:	6013      	str	r3, [r2, #0]
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000008 	.word	0x20000008
 80017b4:	20000310 	.word	0x20000310

080017b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return uwTick;
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <HAL_GetTick+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000310 	.word	0x20000310

080017d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d8:	f7ff ffee 	bl	80017b8 <HAL_GetTick>
 80017dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017e8:	d005      	beq.n	80017f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_Delay+0x44>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4413      	add	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017f6:	bf00      	nop
 80017f8:	f7ff ffde 	bl	80017b8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	429a      	cmp	r2, r3
 8001806:	d8f7      	bhi.n	80017f8 <HAL_Delay+0x28>
  {
  }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000008 	.word	0x20000008

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184a:	4a04      	ldr	r2, [pc, #16]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	60d3      	str	r3, [r2, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db0b      	blt.n	80018a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	4907      	ldr	r1, [pc, #28]	; (80018b4 <__NVIC_EnableIRQ+0x38>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2001      	movs	r0, #1
 800189e:	fa00 f202 	lsl.w	r2, r0, r2
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
         );
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	; 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001998:	f7ff ff8e 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff29 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e0:	f7ff ff3e 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	6978      	ldr	r0, [r7, #20]
 80019ec:	f7ff ff8e 	bl	800190c <NVIC_EncodePriority>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff5d 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff31 	bl	800187c <__NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ffa2 	bl	8001974 <SysTick_Config>
 8001a30:	4603      	mov	r3, r0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	e165      	b.n	8001d24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f040 8154 	bne.w	8001d1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d005      	beq.n	8001a8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d130      	bne.n	8001af0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 0201 	and.w	r2, r3, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d017      	beq.n	8001b2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d123      	bne.n	8001b80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	220f      	movs	r2, #15
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	08da      	lsrs	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3208      	adds	r2, #8
 8001b7a:	69b9      	ldr	r1, [r7, #24]
 8001b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80ae 	beq.w	8001d1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b5d      	ldr	r3, [pc, #372]	; (8001d3c <HAL_GPIO_Init+0x300>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	4a5c      	ldr	r2, [pc, #368]	; (8001d3c <HAL_GPIO_Init+0x300>)
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd2:	4b5a      	ldr	r3, [pc, #360]	; (8001d3c <HAL_GPIO_Init+0x300>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bde:	4a58      	ldr	r2, [pc, #352]	; (8001d40 <HAL_GPIO_Init+0x304>)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	3302      	adds	r3, #2
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4f      	ldr	r2, [pc, #316]	; (8001d44 <HAL_GPIO_Init+0x308>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d025      	beq.n	8001c56 <HAL_GPIO_Init+0x21a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4e      	ldr	r2, [pc, #312]	; (8001d48 <HAL_GPIO_Init+0x30c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01f      	beq.n	8001c52 <HAL_GPIO_Init+0x216>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4d      	ldr	r2, [pc, #308]	; (8001d4c <HAL_GPIO_Init+0x310>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d019      	beq.n	8001c4e <HAL_GPIO_Init+0x212>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4c      	ldr	r2, [pc, #304]	; (8001d50 <HAL_GPIO_Init+0x314>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_GPIO_Init+0x20e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4b      	ldr	r2, [pc, #300]	; (8001d54 <HAL_GPIO_Init+0x318>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00d      	beq.n	8001c46 <HAL_GPIO_Init+0x20a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4a      	ldr	r2, [pc, #296]	; (8001d58 <HAL_GPIO_Init+0x31c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d007      	beq.n	8001c42 <HAL_GPIO_Init+0x206>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a49      	ldr	r2, [pc, #292]	; (8001d5c <HAL_GPIO_Init+0x320>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d101      	bne.n	8001c3e <HAL_GPIO_Init+0x202>
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	e00c      	b.n	8001c58 <HAL_GPIO_Init+0x21c>
 8001c3e:	2307      	movs	r3, #7
 8001c40:	e00a      	b.n	8001c58 <HAL_GPIO_Init+0x21c>
 8001c42:	2305      	movs	r3, #5
 8001c44:	e008      	b.n	8001c58 <HAL_GPIO_Init+0x21c>
 8001c46:	2304      	movs	r3, #4
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x21c>
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e004      	b.n	8001c58 <HAL_GPIO_Init+0x21c>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e002      	b.n	8001c58 <HAL_GPIO_Init+0x21c>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_GPIO_Init+0x21c>
 8001c56:	2300      	movs	r3, #0
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	f002 0203 	and.w	r2, r2, #3
 8001c5e:	0092      	lsls	r2, r2, #2
 8001c60:	4093      	lsls	r3, r2
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c68:	4935      	ldr	r1, [pc, #212]	; (8001d40 <HAL_GPIO_Init+0x304>)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	3302      	adds	r3, #2
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c76:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9a:	4a31      	ldr	r2, [pc, #196]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc4:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cca:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cee:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d18:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3301      	adds	r3, #1
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	2b0f      	cmp	r3, #15
 8001d28:	f67f ae96 	bls.w	8001a58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3724      	adds	r7, #36	; 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40013800 	.word	0x40013800
 8001d44:	40020000 	.word	0x40020000
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020c00 	.word	0x40020c00
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40021400 	.word	0x40021400
 8001d5c:	40021800 	.word	0x40021800
 8001d60:	40013c00 	.word	0x40013c00

08001d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
 8001d70:	4613      	mov	r3, r2
 8001d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d74:	787b      	ldrb	r3, [r7, #1]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d80:	e003      	b.n	8001d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	041a      	lsls	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	619a      	str	r2, [r3, #24]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0cc      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dac:	4b68      	ldr	r3, [pc, #416]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d90c      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b65      	ldr	r3, [pc, #404]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b63      	ldr	r3, [pc, #396]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0b8      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d020      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dec:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	4a58      	ldr	r2, [pc, #352]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001df6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e04:	4b53      	ldr	r3, [pc, #332]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4a52      	ldr	r2, [pc, #328]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e10:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	494d      	ldr	r1, [pc, #308]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d044      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d107      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e36:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d119      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e07f      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d003      	beq.n	8001e56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e56:	4b3f      	ldr	r3, [pc, #252]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e06f      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e66:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e067      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e76:	4b37      	ldr	r3, [pc, #220]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f023 0203 	bic.w	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4934      	ldr	r1, [pc, #208]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e88:	f7ff fc96 	bl	80017b8 <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e90:	f7ff fc92 	bl	80017b8 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e04f      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea6:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 020c 	and.w	r2, r3, #12
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d1eb      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d20c      	bcs.n	8001ee0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e032      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4916      	ldr	r1, [pc, #88]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	490e      	ldr	r1, [pc, #56]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f1e:	f000 f855 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	490a      	ldr	r1, [pc, #40]	; (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	5ccb      	ldrb	r3, [r1, r3]
 8001f32:	fa22 f303 	lsr.w	r3, r2, r3
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fbf6 	bl	8001730 <HAL_InitTick>

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023c00 	.word	0x40023c00
 8001f54:	40023800 	.word	0x40023800
 8001f58:	080042dc 	.word	0x080042dc
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000004 	.word	0x20000004

08001f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000000 	.word	0x20000000

08001f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f80:	f7ff fff0 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	0a9b      	lsrs	r3, r3, #10
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	4903      	ldr	r1, [pc, #12]	; (8001fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	080042ec 	.word	0x080042ec

08001fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fa8:	f7ff ffdc 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	0b5b      	lsrs	r3, r3, #13
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4903      	ldr	r1, [pc, #12]	; (8001fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	080042ec 	.word	0x080042ec

08001fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fd0:	b0ae      	sub	sp, #184	; 0xb8
 8001fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ff2:	4bcb      	ldr	r3, [pc, #812]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	f200 8206 	bhi.w	800240c <HAL_RCC_GetSysClockFreq+0x440>
 8002000:	a201      	add	r2, pc, #4	; (adr r2, 8002008 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002006:	bf00      	nop
 8002008:	0800203d 	.word	0x0800203d
 800200c:	0800240d 	.word	0x0800240d
 8002010:	0800240d 	.word	0x0800240d
 8002014:	0800240d 	.word	0x0800240d
 8002018:	08002045 	.word	0x08002045
 800201c:	0800240d 	.word	0x0800240d
 8002020:	0800240d 	.word	0x0800240d
 8002024:	0800240d 	.word	0x0800240d
 8002028:	0800204d 	.word	0x0800204d
 800202c:	0800240d 	.word	0x0800240d
 8002030:	0800240d 	.word	0x0800240d
 8002034:	0800240d 	.word	0x0800240d
 8002038:	0800223d 	.word	0x0800223d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800203c:	4bb9      	ldr	r3, [pc, #740]	; (8002324 <HAL_RCC_GetSysClockFreq+0x358>)
 800203e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002042:	e1e7      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002044:	4bb8      	ldr	r3, [pc, #736]	; (8002328 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800204a:	e1e3      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800204c:	4bb4      	ldr	r3, [pc, #720]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002054:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002058:	4bb1      	ldr	r3, [pc, #708]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d071      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002064:	4bae      	ldr	r3, [pc, #696]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	099b      	lsrs	r3, r3, #6
 800206a:	2200      	movs	r2, #0
 800206c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002070:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800207c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800208a:	4622      	mov	r2, r4
 800208c:	462b      	mov	r3, r5
 800208e:	f04f 0000 	mov.w	r0, #0
 8002092:	f04f 0100 	mov.w	r1, #0
 8002096:	0159      	lsls	r1, r3, #5
 8002098:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800209c:	0150      	lsls	r0, r2, #5
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4621      	mov	r1, r4
 80020a4:	1a51      	subs	r1, r2, r1
 80020a6:	6439      	str	r1, [r7, #64]	; 0x40
 80020a8:	4629      	mov	r1, r5
 80020aa:	eb63 0301 	sbc.w	r3, r3, r1
 80020ae:	647b      	str	r3, [r7, #68]	; 0x44
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80020bc:	4649      	mov	r1, r9
 80020be:	018b      	lsls	r3, r1, #6
 80020c0:	4641      	mov	r1, r8
 80020c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020c6:	4641      	mov	r1, r8
 80020c8:	018a      	lsls	r2, r1, #6
 80020ca:	4641      	mov	r1, r8
 80020cc:	1a51      	subs	r1, r2, r1
 80020ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80020d0:	4649      	mov	r1, r9
 80020d2:	eb63 0301 	sbc.w	r3, r3, r1
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80020e4:	4649      	mov	r1, r9
 80020e6:	00cb      	lsls	r3, r1, #3
 80020e8:	4641      	mov	r1, r8
 80020ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020ee:	4641      	mov	r1, r8
 80020f0:	00ca      	lsls	r2, r1, #3
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	4603      	mov	r3, r0
 80020f8:	4622      	mov	r2, r4
 80020fa:	189b      	adds	r3, r3, r2
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
 80020fe:	462b      	mov	r3, r5
 8002100:	460a      	mov	r2, r1
 8002102:	eb42 0303 	adc.w	r3, r2, r3
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002114:	4629      	mov	r1, r5
 8002116:	024b      	lsls	r3, r1, #9
 8002118:	4621      	mov	r1, r4
 800211a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800211e:	4621      	mov	r1, r4
 8002120:	024a      	lsls	r2, r1, #9
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800212a:	2200      	movs	r2, #0
 800212c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002130:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002134:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002138:	f7fe f864 	bl	8000204 <__aeabi_uldivmod>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4613      	mov	r3, r2
 8002142:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002146:	e067      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002148:	4b75      	ldr	r3, [pc, #468]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	2200      	movs	r2, #0
 8002150:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002154:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002158:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800215c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002160:	67bb      	str	r3, [r7, #120]	; 0x78
 8002162:	2300      	movs	r3, #0
 8002164:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002166:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800216a:	4622      	mov	r2, r4
 800216c:	462b      	mov	r3, r5
 800216e:	f04f 0000 	mov.w	r0, #0
 8002172:	f04f 0100 	mov.w	r1, #0
 8002176:	0159      	lsls	r1, r3, #5
 8002178:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800217c:	0150      	lsls	r0, r2, #5
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4621      	mov	r1, r4
 8002184:	1a51      	subs	r1, r2, r1
 8002186:	62b9      	str	r1, [r7, #40]	; 0x28
 8002188:	4629      	mov	r1, r5
 800218a:	eb63 0301 	sbc.w	r3, r3, r1
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800219c:	4649      	mov	r1, r9
 800219e:	018b      	lsls	r3, r1, #6
 80021a0:	4641      	mov	r1, r8
 80021a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021a6:	4641      	mov	r1, r8
 80021a8:	018a      	lsls	r2, r1, #6
 80021aa:	4641      	mov	r1, r8
 80021ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80021b0:	4649      	mov	r1, r9
 80021b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021ca:	4692      	mov	sl, r2
 80021cc:	469b      	mov	fp, r3
 80021ce:	4623      	mov	r3, r4
 80021d0:	eb1a 0303 	adds.w	r3, sl, r3
 80021d4:	623b      	str	r3, [r7, #32]
 80021d6:	462b      	mov	r3, r5
 80021d8:	eb4b 0303 	adc.w	r3, fp, r3
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80021ea:	4629      	mov	r1, r5
 80021ec:	028b      	lsls	r3, r1, #10
 80021ee:	4621      	mov	r1, r4
 80021f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021f4:	4621      	mov	r1, r4
 80021f6:	028a      	lsls	r2, r1, #10
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002200:	2200      	movs	r2, #0
 8002202:	673b      	str	r3, [r7, #112]	; 0x70
 8002204:	677a      	str	r2, [r7, #116]	; 0x74
 8002206:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800220a:	f7fd fffb 	bl	8000204 <__aeabi_uldivmod>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4613      	mov	r3, r2
 8002214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002218:	4b41      	ldr	r3, [pc, #260]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	0c1b      	lsrs	r3, r3, #16
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	3301      	adds	r3, #1
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800222a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800222e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800223a:	e0eb      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800223c:	4b38      	ldr	r3, [pc, #224]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002244:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d06b      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002254:	4b32      	ldr	r3, [pc, #200]	; (8002320 <HAL_RCC_GetSysClockFreq+0x354>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	099b      	lsrs	r3, r3, #6
 800225a:	2200      	movs	r2, #0
 800225c:	66bb      	str	r3, [r7, #104]	; 0x68
 800225e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002266:	663b      	str	r3, [r7, #96]	; 0x60
 8002268:	2300      	movs	r3, #0
 800226a:	667b      	str	r3, [r7, #100]	; 0x64
 800226c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002270:	4622      	mov	r2, r4
 8002272:	462b      	mov	r3, r5
 8002274:	f04f 0000 	mov.w	r0, #0
 8002278:	f04f 0100 	mov.w	r1, #0
 800227c:	0159      	lsls	r1, r3, #5
 800227e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002282:	0150      	lsls	r0, r2, #5
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4621      	mov	r1, r4
 800228a:	1a51      	subs	r1, r2, r1
 800228c:	61b9      	str	r1, [r7, #24]
 800228e:	4629      	mov	r1, r5
 8002290:	eb63 0301 	sbc.w	r3, r3, r1
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80022a2:	4659      	mov	r1, fp
 80022a4:	018b      	lsls	r3, r1, #6
 80022a6:	4651      	mov	r1, sl
 80022a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ac:	4651      	mov	r1, sl
 80022ae:	018a      	lsls	r2, r1, #6
 80022b0:	4651      	mov	r1, sl
 80022b2:	ebb2 0801 	subs.w	r8, r2, r1
 80022b6:	4659      	mov	r1, fp
 80022b8:	eb63 0901 	sbc.w	r9, r3, r1
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022d0:	4690      	mov	r8, r2
 80022d2:	4699      	mov	r9, r3
 80022d4:	4623      	mov	r3, r4
 80022d6:	eb18 0303 	adds.w	r3, r8, r3
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	462b      	mov	r3, r5
 80022de:	eb49 0303 	adc.w	r3, r9, r3
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80022f0:	4629      	mov	r1, r5
 80022f2:	024b      	lsls	r3, r1, #9
 80022f4:	4621      	mov	r1, r4
 80022f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022fa:	4621      	mov	r1, r4
 80022fc:	024a      	lsls	r2, r1, #9
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002306:	2200      	movs	r2, #0
 8002308:	65bb      	str	r3, [r7, #88]	; 0x58
 800230a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800230c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002310:	f7fd ff78 	bl	8000204 <__aeabi_uldivmod>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4613      	mov	r3, r2
 800231a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800231e:	e065      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x420>
 8002320:	40023800 	.word	0x40023800
 8002324:	00f42400 	.word	0x00f42400
 8002328:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800232c:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCC_GetSysClockFreq+0x458>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	099b      	lsrs	r3, r3, #6
 8002332:	2200      	movs	r2, #0
 8002334:	4618      	mov	r0, r3
 8002336:	4611      	mov	r1, r2
 8002338:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800233c:	653b      	str	r3, [r7, #80]	; 0x50
 800233e:	2300      	movs	r3, #0
 8002340:	657b      	str	r3, [r7, #84]	; 0x54
 8002342:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002346:	4642      	mov	r2, r8
 8002348:	464b      	mov	r3, r9
 800234a:	f04f 0000 	mov.w	r0, #0
 800234e:	f04f 0100 	mov.w	r1, #0
 8002352:	0159      	lsls	r1, r3, #5
 8002354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002358:	0150      	lsls	r0, r2, #5
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4641      	mov	r1, r8
 8002360:	1a51      	subs	r1, r2, r1
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	4649      	mov	r1, r9
 8002366:	eb63 0301 	sbc.w	r3, r3, r1
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002378:	4659      	mov	r1, fp
 800237a:	018b      	lsls	r3, r1, #6
 800237c:	4651      	mov	r1, sl
 800237e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002382:	4651      	mov	r1, sl
 8002384:	018a      	lsls	r2, r1, #6
 8002386:	4651      	mov	r1, sl
 8002388:	1a54      	subs	r4, r2, r1
 800238a:	4659      	mov	r1, fp
 800238c:	eb63 0501 	sbc.w	r5, r3, r1
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	00eb      	lsls	r3, r5, #3
 800239a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800239e:	00e2      	lsls	r2, r4, #3
 80023a0:	4614      	mov	r4, r2
 80023a2:	461d      	mov	r5, r3
 80023a4:	4643      	mov	r3, r8
 80023a6:	18e3      	adds	r3, r4, r3
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	464b      	mov	r3, r9
 80023ac:	eb45 0303 	adc.w	r3, r5, r3
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023be:	4629      	mov	r1, r5
 80023c0:	028b      	lsls	r3, r1, #10
 80023c2:	4621      	mov	r1, r4
 80023c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c8:	4621      	mov	r1, r4
 80023ca:	028a      	lsls	r2, r1, #10
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023d4:	2200      	movs	r2, #0
 80023d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80023d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80023da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023de:	f7fd ff11 	bl	8000204 <__aeabi_uldivmod>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4613      	mov	r3, r2
 80023e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_RCC_GetSysClockFreq+0x458>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	0f1b      	lsrs	r3, r3, #28
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80023fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80023fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800240a:	e003      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCC_GetSysClockFreq+0x45c>)
 800240e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002412:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002414:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002418:	4618      	mov	r0, r3
 800241a:	37b8      	adds	r7, #184	; 0xb8
 800241c:	46bd      	mov	sp, r7
 800241e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	00f42400 	.word	0x00f42400

0800242c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e28d      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8083 	beq.w	8002552 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800244c:	4b94      	ldr	r3, [pc, #592]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b04      	cmp	r3, #4
 8002456:	d019      	beq.n	800248c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002458:	4b91      	ldr	r3, [pc, #580]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002460:	2b08      	cmp	r3, #8
 8002462:	d106      	bne.n	8002472 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002464:	4b8e      	ldr	r3, [pc, #568]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002470:	d00c      	beq.n	800248c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002472:	4b8b      	ldr	r3, [pc, #556]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d112      	bne.n	80024a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247e:	4b88      	ldr	r3, [pc, #544]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800248a:	d10b      	bne.n	80024a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	4b84      	ldr	r3, [pc, #528]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d05b      	beq.n	8002550 <HAL_RCC_OscConfig+0x124>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d157      	bne.n	8002550 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e25a      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ac:	d106      	bne.n	80024bc <HAL_RCC_OscConfig+0x90>
 80024ae:	4b7c      	ldr	r3, [pc, #496]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a7b      	ldr	r2, [pc, #492]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e01d      	b.n	80024f8 <HAL_RCC_OscConfig+0xcc>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0xb4>
 80024c6:	4b76      	ldr	r3, [pc, #472]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a75      	ldr	r2, [pc, #468]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b73      	ldr	r3, [pc, #460]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a72      	ldr	r2, [pc, #456]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0xcc>
 80024e0:	4b6f      	ldr	r3, [pc, #444]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a6e      	ldr	r2, [pc, #440]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b6c      	ldr	r3, [pc, #432]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a6b      	ldr	r2, [pc, #428]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80024f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7ff f95a 	bl	80017b8 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002508:	f7ff f956 	bl	80017b8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e21f      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b61      	ldr	r3, [pc, #388]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0xdc>
 8002526:	e014      	b.n	8002552 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7ff f946 	bl	80017b8 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002530:	f7ff f942 	bl	80017b8 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e20b      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	4b57      	ldr	r3, [pc, #348]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x104>
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d06f      	beq.n	800263e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800255e:	4b50      	ldr	r3, [pc, #320]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b00      	cmp	r3, #0
 8002568:	d017      	beq.n	800259a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800256a:	4b4d      	ldr	r3, [pc, #308]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002572:	2b08      	cmp	r3, #8
 8002574:	d105      	bne.n	8002582 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002576:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002582:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800258a:	2b0c      	cmp	r3, #12
 800258c:	d11c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800258e:	4b44      	ldr	r3, [pc, #272]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d116      	bne.n	80025c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	4b41      	ldr	r3, [pc, #260]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_RCC_OscConfig+0x186>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e1d3      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b2:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4937      	ldr	r1, [pc, #220]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c6:	e03a      	b.n	800263e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d020      	beq.n	8002612 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d0:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <HAL_RCC_OscConfig+0x278>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7ff f8ef 	bl	80017b8 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025de:	f7ff f8eb 	bl	80017b8 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e1b4      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f0:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4925      	ldr	r1, [pc, #148]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]
 8002610:	e015      	b.n	800263e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002612:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCC_OscConfig+0x278>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7ff f8ce 	bl	80017b8 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002620:	f7ff f8ca 	bl	80017b8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e193      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002632:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d036      	beq.n	80026b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d016      	beq.n	8002680 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_RCC_OscConfig+0x27c>)
 8002654:	2201      	movs	r2, #1
 8002656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7ff f8ae 	bl	80017b8 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002660:	f7ff f8aa 	bl	80017b8 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e173      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0x234>
 800267e:	e01b      	b.n	80026b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_OscConfig+0x27c>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002686:	f7ff f897 	bl	80017b8 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268c:	e00e      	b.n	80026ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800268e:	f7ff f893 	bl	80017b8 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d907      	bls.n	80026ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e15c      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
 80026a0:	40023800 	.word	0x40023800
 80026a4:	42470000 	.word	0x42470000
 80026a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ac:	4b8a      	ldr	r3, [pc, #552]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80026ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1ea      	bne.n	800268e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8097 	beq.w	80027f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c6:	2300      	movs	r3, #0
 80026c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ca:	4b83      	ldr	r3, [pc, #524]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10f      	bne.n	80026f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	4b7f      	ldr	r3, [pc, #508]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a7e      	ldr	r2, [pc, #504]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80026e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
 80026e6:	4b7c      	ldr	r3, [pc, #496]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f2:	2301      	movs	r3, #1
 80026f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f6:	4b79      	ldr	r3, [pc, #484]	; (80028dc <HAL_RCC_OscConfig+0x4b0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d118      	bne.n	8002734 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002702:	4b76      	ldr	r3, [pc, #472]	; (80028dc <HAL_RCC_OscConfig+0x4b0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a75      	ldr	r2, [pc, #468]	; (80028dc <HAL_RCC_OscConfig+0x4b0>)
 8002708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270e:	f7ff f853 	bl	80017b8 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002716:	f7ff f84f 	bl	80017b8 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e118      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002728:	4b6c      	ldr	r3, [pc, #432]	; (80028dc <HAL_RCC_OscConfig+0x4b0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d106      	bne.n	800274a <HAL_RCC_OscConfig+0x31e>
 800273c:	4b66      	ldr	r3, [pc, #408]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	4a65      	ldr	r2, [pc, #404]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6713      	str	r3, [r2, #112]	; 0x70
 8002748:	e01c      	b.n	8002784 <HAL_RCC_OscConfig+0x358>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b05      	cmp	r3, #5
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0x340>
 8002752:	4b61      	ldr	r3, [pc, #388]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a60      	ldr	r2, [pc, #384]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002758:	f043 0304 	orr.w	r3, r3, #4
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
 800275e:	4b5e      	ldr	r3, [pc, #376]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a5d      	ldr	r2, [pc, #372]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
 800276a:	e00b      	b.n	8002784 <HAL_RCC_OscConfig+0x358>
 800276c:	4b5a      	ldr	r3, [pc, #360]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	4a59      	ldr	r2, [pc, #356]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	6713      	str	r3, [r2, #112]	; 0x70
 8002778:	4b57      	ldr	r3, [pc, #348]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	4a56      	ldr	r2, [pc, #344]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 800277e:	f023 0304 	bic.w	r3, r3, #4
 8002782:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d015      	beq.n	80027b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7ff f814 	bl	80017b8 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002792:	e00a      	b.n	80027aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002794:	f7ff f810 	bl	80017b8 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e0d7      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027aa:	4b4b      	ldr	r3, [pc, #300]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0ee      	beq.n	8002794 <HAL_RCC_OscConfig+0x368>
 80027b6:	e014      	b.n	80027e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b8:	f7fe fffe 	bl	80017b8 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c0:	f7fe fffa 	bl	80017b8 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e0c1      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d6:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1ee      	bne.n	80027c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d105      	bne.n	80027f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e8:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	4a3a      	ldr	r2, [pc, #232]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80027ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80ad 	beq.w	8002958 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027fe:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b08      	cmp	r3, #8
 8002808:	d060      	beq.n	80028cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d145      	bne.n	800289e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002812:	4b33      	ldr	r3, [pc, #204]	; (80028e0 <HAL_RCC_OscConfig+0x4b4>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe ffce 	bl	80017b8 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002820:	f7fe ffca 	bl	80017b8 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e093      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002832:	4b29      	ldr	r3, [pc, #164]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	019b      	lsls	r3, r3, #6
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	3b01      	subs	r3, #1
 8002858:	041b      	lsls	r3, r3, #16
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	071b      	lsls	r3, r3, #28
 800286a:	491b      	ldr	r1, [pc, #108]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_RCC_OscConfig+0x4b4>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe ff9f 	bl	80017b8 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe ff9b 	bl	80017b8 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e064      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x452>
 800289c:	e05c      	b.n	8002958 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_RCC_OscConfig+0x4b4>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe ff88 	bl	80017b8 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe ff84 	bl	80017b8 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e04d      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_RCC_OscConfig+0x4ac>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x480>
 80028ca:	e045      	b.n	8002958 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e040      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40007000 	.word	0x40007000
 80028e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028e4:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <HAL_RCC_OscConfig+0x538>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d030      	beq.n	8002954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d129      	bne.n	8002954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d122      	bne.n	8002954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002914:	4013      	ands	r3, r2
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800291a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800291c:	4293      	cmp	r3, r2
 800291e:	d119      	bne.n	8002954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	3b01      	subs	r3, #1
 800292e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d10f      	bne.n	8002954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d107      	bne.n	8002954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800

08002968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e041      	b.n	80029fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fb54 	bl	800103c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f000 fdac 	bl	8003504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e041      	b.n	8002a9c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d106      	bne.n	8002a32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7fe fc8f 	bl	8001350 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2202      	movs	r2, #2
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	4619      	mov	r1, r3
 8002a44:	4610      	mov	r0, r2
 8002a46:	f000 fd5d 	bl	8003504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <HAL_TIM_PWM_Start+0x24>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	bf14      	ite	ne
 8002ac0:	2301      	movne	r3, #1
 8002ac2:	2300      	moveq	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	e022      	b.n	8002b0e <HAL_TIM_PWM_Start+0x6a>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d109      	bne.n	8002ae2 <HAL_TIM_PWM_Start+0x3e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	bf14      	ite	ne
 8002ada:	2301      	movne	r3, #1
 8002adc:	2300      	moveq	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	e015      	b.n	8002b0e <HAL_TIM_PWM_Start+0x6a>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d109      	bne.n	8002afc <HAL_TIM_PWM_Start+0x58>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	bf14      	ite	ne
 8002af4:	2301      	movne	r3, #1
 8002af6:	2300      	moveq	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	e008      	b.n	8002b0e <HAL_TIM_PWM_Start+0x6a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e07c      	b.n	8002c10 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d104      	bne.n	8002b26 <HAL_TIM_PWM_Start+0x82>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b24:	e013      	b.n	8002b4e <HAL_TIM_PWM_Start+0xaa>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d104      	bne.n	8002b36 <HAL_TIM_PWM_Start+0x92>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b34:	e00b      	b.n	8002b4e <HAL_TIM_PWM_Start+0xaa>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d104      	bne.n	8002b46 <HAL_TIM_PWM_Start+0xa2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b44:	e003      	b.n	8002b4e <HAL_TIM_PWM_Start+0xaa>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2201      	movs	r2, #1
 8002b54:	6839      	ldr	r1, [r7, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 ffbe 	bl	8003ad8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a2d      	ldr	r2, [pc, #180]	; (8002c18 <HAL_TIM_PWM_Start+0x174>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d004      	beq.n	8002b70 <HAL_TIM_PWM_Start+0xcc>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a2c      	ldr	r2, [pc, #176]	; (8002c1c <HAL_TIM_PWM_Start+0x178>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d101      	bne.n	8002b74 <HAL_TIM_PWM_Start+0xd0>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <HAL_TIM_PWM_Start+0xd2>
 8002b74:	2300      	movs	r3, #0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a22      	ldr	r2, [pc, #136]	; (8002c18 <HAL_TIM_PWM_Start+0x174>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d022      	beq.n	8002bda <HAL_TIM_PWM_Start+0x136>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9c:	d01d      	beq.n	8002bda <HAL_TIM_PWM_Start+0x136>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a1f      	ldr	r2, [pc, #124]	; (8002c20 <HAL_TIM_PWM_Start+0x17c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d018      	beq.n	8002bda <HAL_TIM_PWM_Start+0x136>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a1d      	ldr	r2, [pc, #116]	; (8002c24 <HAL_TIM_PWM_Start+0x180>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d013      	beq.n	8002bda <HAL_TIM_PWM_Start+0x136>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <HAL_TIM_PWM_Start+0x184>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00e      	beq.n	8002bda <HAL_TIM_PWM_Start+0x136>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <HAL_TIM_PWM_Start+0x178>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d009      	beq.n	8002bda <HAL_TIM_PWM_Start+0x136>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <HAL_TIM_PWM_Start+0x188>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <HAL_TIM_PWM_Start+0x136>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a16      	ldr	r2, [pc, #88]	; (8002c30 <HAL_TIM_PWM_Start+0x18c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d111      	bne.n	8002bfe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b06      	cmp	r3, #6
 8002bea:	d010      	beq.n	8002c0e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfc:	e007      	b.n	8002c0e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 0201 	orr.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	40010400 	.word	0x40010400
 8002c20:	40000400 	.word	0x40000400
 8002c24:	40000800 	.word	0x40000800
 8002c28:	40000c00 	.word	0x40000c00
 8002c2c:	40014000 	.word	0x40014000
 8002c30:	40001800 	.word	0x40001800

08002c34 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e041      	b.n	8002ccc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d106      	bne.n	8002c62 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f839 	bl	8002cd4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2202      	movs	r2, #2
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3304      	adds	r3, #4
 8002c72:	4619      	mov	r1, r3
 8002c74:	4610      	mov	r0, r2
 8002c76:	f000 fc45 	bl	8003504 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0208 	bic.w	r2, r2, #8
 8002c88:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6819      	ldr	r1, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e097      	b.n	8002e2c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d106      	bne.n	8002d16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7fe f9f7 	bl	8001104 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d2c:	f023 0307 	bic.w	r3, r3, #7
 8002d30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f000 fbe1 	bl	8003504 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d6a:	f023 0303 	bic.w	r3, r3, #3
 8002d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002d88:	f023 030c 	bic.w	r3, r3, #12
 8002d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	4313      	orrs	r3, r2
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	011a      	lsls	r2, r3, #4
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	031b      	lsls	r3, r3, #12
 8002db8:	4313      	orrs	r3, r2
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002dc6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002dce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d110      	bne.n	8002e86 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d102      	bne.n	8002e70 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e6a:	7b7b      	ldrb	r3, [r7, #13]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d001      	beq.n	8002e74 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e089      	b.n	8002f88 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e84:	e031      	b.n	8002eea <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d110      	bne.n	8002eae <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e8c:	7bbb      	ldrb	r3, [r7, #14]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d102      	bne.n	8002e98 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e92:	7b3b      	ldrb	r3, [r7, #12]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d001      	beq.n	8002e9c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e075      	b.n	8002f88 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eac:	e01d      	b.n	8002eea <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d108      	bne.n	8002ec6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002eb4:	7bbb      	ldrb	r3, [r7, #14]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d105      	bne.n	8002ec6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002eba:	7b7b      	ldrb	r3, [r7, #13]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d102      	bne.n	8002ec6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ec0:	7b3b      	ldrb	r3, [r7, #12]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d001      	beq.n	8002eca <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e05e      	b.n	8002f88 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2202      	movs	r2, #2
 8002ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d010      	beq.n	8002f18 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002ef6:	e01f      	b.n	8002f38 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2201      	movs	r2, #1
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fde9 	bl	8003ad8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0202 	orr.w	r2, r2, #2
 8002f14:	60da      	str	r2, [r3, #12]
      break;
 8002f16:	e02e      	b.n	8002f76 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	2104      	movs	r1, #4
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fdd9 	bl	8003ad8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0204 	orr.w	r2, r2, #4
 8002f34:	60da      	str	r2, [r3, #12]
      break;
 8002f36:	e01e      	b.n	8002f76 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fdc9 	bl	8003ad8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	2104      	movs	r1, #4
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fdc2 	bl	8003ad8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0202 	orr.w	r2, r2, #2
 8002f62:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0204 	orr.w	r2, r2, #4
 8002f72:	60da      	str	r2, [r3, #12]
      break;
 8002f74:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0201 	orr.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d122      	bne.n	8002fec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d11b      	bne.n	8002fec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0202 	mvn.w	r2, #2
 8002fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fd fa98 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8002fd8:	e005      	b.n	8002fe6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fa73 	bl	80034c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fa7a 	bl	80034da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d122      	bne.n	8003040 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b04      	cmp	r3, #4
 8003006:	d11b      	bne.n	8003040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0204 	mvn.w	r2, #4
 8003010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fd fa6e 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 800302c:	e005      	b.n	800303a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fa49 	bl	80034c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fa50 	bl	80034da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b08      	cmp	r3, #8
 800304c:	d122      	bne.n	8003094 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b08      	cmp	r3, #8
 800305a:	d11b      	bne.n	8003094 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0208 	mvn.w	r2, #8
 8003064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2204      	movs	r2, #4
 800306a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fd fa44 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8003080:	e005      	b.n	800308e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fa1f 	bl	80034c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fa26 	bl	80034da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b10      	cmp	r3, #16
 80030a0:	d122      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d11b      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0210 	mvn.w	r2, #16
 80030b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2208      	movs	r2, #8
 80030be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fd fa1a 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 80030d4:	e005      	b.n	80030e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f9f5 	bl	80034c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f9fc 	bl	80034da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d10e      	bne.n	8003114 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b01      	cmp	r3, #1
 8003102:	d107      	bne.n	8003114 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0201 	mvn.w	r2, #1
 800310c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f9cf 	bl	80034b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311e:	2b80      	cmp	r3, #128	; 0x80
 8003120:	d10e      	bne.n	8003140 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312c:	2b80      	cmp	r3, #128	; 0x80
 800312e:	d107      	bne.n	8003140 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fdca 	bl	8003cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314a:	2b40      	cmp	r3, #64	; 0x40
 800314c:	d10e      	bne.n	800316c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d107      	bne.n	800316c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f9c1 	bl	80034ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b20      	cmp	r3, #32
 8003178:	d10e      	bne.n	8003198 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b20      	cmp	r3, #32
 8003186:	d107      	bne.n	8003198 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0220 	mvn.w	r2, #32
 8003190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fd94 	bl	8003cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003198:	bf00      	nop
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e0ae      	b.n	800331c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b0c      	cmp	r3, #12
 80031ca:	f200 809f 	bhi.w	800330c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031ce:	a201      	add	r2, pc, #4	; (adr r2, 80031d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d4:	08003209 	.word	0x08003209
 80031d8:	0800330d 	.word	0x0800330d
 80031dc:	0800330d 	.word	0x0800330d
 80031e0:	0800330d 	.word	0x0800330d
 80031e4:	08003249 	.word	0x08003249
 80031e8:	0800330d 	.word	0x0800330d
 80031ec:	0800330d 	.word	0x0800330d
 80031f0:	0800330d 	.word	0x0800330d
 80031f4:	0800328b 	.word	0x0800328b
 80031f8:	0800330d 	.word	0x0800330d
 80031fc:	0800330d 	.word	0x0800330d
 8003200:	0800330d 	.word	0x0800330d
 8003204:	080032cb 	.word	0x080032cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fa18 	bl	8003644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0208 	orr.w	r2, r2, #8
 8003222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0204 	bic.w	r2, r2, #4
 8003232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6999      	ldr	r1, [r3, #24]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	619a      	str	r2, [r3, #24]
      break;
 8003246:	e064      	b.n	8003312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fa68 	bl	8003724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6999      	ldr	r1, [r3, #24]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	021a      	lsls	r2, r3, #8
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	619a      	str	r2, [r3, #24]
      break;
 8003288:	e043      	b.n	8003312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fabd 	bl	8003810 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0208 	orr.w	r2, r2, #8
 80032a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0204 	bic.w	r2, r2, #4
 80032b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69d9      	ldr	r1, [r3, #28]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	61da      	str	r2, [r3, #28]
      break;
 80032c8:	e023      	b.n	8003312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fb11 	bl	80038f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69d9      	ldr	r1, [r3, #28]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	021a      	lsls	r2, r3, #8
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	61da      	str	r2, [r3, #28]
      break;
 800330a:	e002      	b.n	8003312 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	75fb      	strb	r3, [r7, #23]
      break;
 8003310:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800331a:	7dfb      	ldrb	r3, [r7, #23]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_TIM_ConfigClockSource+0x1c>
 800333c:	2302      	movs	r3, #2
 800333e:	e0b4      	b.n	80034aa <HAL_TIM_ConfigClockSource+0x186>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800335e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003378:	d03e      	beq.n	80033f8 <HAL_TIM_ConfigClockSource+0xd4>
 800337a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337e:	f200 8087 	bhi.w	8003490 <HAL_TIM_ConfigClockSource+0x16c>
 8003382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003386:	f000 8086 	beq.w	8003496 <HAL_TIM_ConfigClockSource+0x172>
 800338a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338e:	d87f      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x16c>
 8003390:	2b70      	cmp	r3, #112	; 0x70
 8003392:	d01a      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0xa6>
 8003394:	2b70      	cmp	r3, #112	; 0x70
 8003396:	d87b      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x16c>
 8003398:	2b60      	cmp	r3, #96	; 0x60
 800339a:	d050      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x11a>
 800339c:	2b60      	cmp	r3, #96	; 0x60
 800339e:	d877      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x16c>
 80033a0:	2b50      	cmp	r3, #80	; 0x50
 80033a2:	d03c      	beq.n	800341e <HAL_TIM_ConfigClockSource+0xfa>
 80033a4:	2b50      	cmp	r3, #80	; 0x50
 80033a6:	d873      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x16c>
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d058      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x13a>
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d86f      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x16c>
 80033b0:	2b30      	cmp	r3, #48	; 0x30
 80033b2:	d064      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x15a>
 80033b4:	2b30      	cmp	r3, #48	; 0x30
 80033b6:	d86b      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x16c>
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d060      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x15a>
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d867      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x16c>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05c      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x15a>
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	d05a      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x15a>
 80033c8:	e062      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6899      	ldr	r1, [r3, #8]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f000 fb5d 	bl	8003a98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	609a      	str	r2, [r3, #8]
      break;
 80033f6:	e04f      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6899      	ldr	r1, [r3, #8]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f000 fb46 	bl	8003a98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800341a:	609a      	str	r2, [r3, #8]
      break;
 800341c:	e03c      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6859      	ldr	r1, [r3, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	461a      	mov	r2, r3
 800342c:	f000 faba 	bl	80039a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2150      	movs	r1, #80	; 0x50
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fb13 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 800343c:	e02c      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	461a      	mov	r2, r3
 800344c:	f000 fad9 	bl	8003a02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2160      	movs	r1, #96	; 0x60
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fb03 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 800345c:	e01c      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	461a      	mov	r2, r3
 800346c:	f000 fa9a 	bl	80039a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2140      	movs	r1, #64	; 0x40
 8003476:	4618      	mov	r0, r3
 8003478:	f000 faf3 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 800347c:	e00c      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4619      	mov	r1, r3
 8003488:	4610      	mov	r0, r2
 800348a:	f000 faea 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 800348e:	e003      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
      break;
 8003494:	e000      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a40      	ldr	r2, [pc, #256]	; (8003618 <TIM_Base_SetConfig+0x114>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d013      	beq.n	8003544 <TIM_Base_SetConfig+0x40>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003522:	d00f      	beq.n	8003544 <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3d      	ldr	r2, [pc, #244]	; (800361c <TIM_Base_SetConfig+0x118>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00b      	beq.n	8003544 <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a3c      	ldr	r2, [pc, #240]	; (8003620 <TIM_Base_SetConfig+0x11c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d007      	beq.n	8003544 <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a3b      	ldr	r2, [pc, #236]	; (8003624 <TIM_Base_SetConfig+0x120>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d003      	beq.n	8003544 <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3a      	ldr	r2, [pc, #232]	; (8003628 <TIM_Base_SetConfig+0x124>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d108      	bne.n	8003556 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a2f      	ldr	r2, [pc, #188]	; (8003618 <TIM_Base_SetConfig+0x114>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d02b      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003564:	d027      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2c      	ldr	r2, [pc, #176]	; (800361c <TIM_Base_SetConfig+0x118>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d023      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a2b      	ldr	r2, [pc, #172]	; (8003620 <TIM_Base_SetConfig+0x11c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d01f      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2a      	ldr	r2, [pc, #168]	; (8003624 <TIM_Base_SetConfig+0x120>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01b      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a29      	ldr	r2, [pc, #164]	; (8003628 <TIM_Base_SetConfig+0x124>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d017      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a28      	ldr	r2, [pc, #160]	; (800362c <TIM_Base_SetConfig+0x128>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d013      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a27      	ldr	r2, [pc, #156]	; (8003630 <TIM_Base_SetConfig+0x12c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00f      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a26      	ldr	r2, [pc, #152]	; (8003634 <TIM_Base_SetConfig+0x130>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00b      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a25      	ldr	r2, [pc, #148]	; (8003638 <TIM_Base_SetConfig+0x134>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d007      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a24      	ldr	r2, [pc, #144]	; (800363c <TIM_Base_SetConfig+0x138>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d003      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a23      	ldr	r2, [pc, #140]	; (8003640 <TIM_Base_SetConfig+0x13c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d108      	bne.n	80035c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a0a      	ldr	r2, [pc, #40]	; (8003618 <TIM_Base_SetConfig+0x114>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d003      	beq.n	80035fc <TIM_Base_SetConfig+0xf8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a0c      	ldr	r2, [pc, #48]	; (8003628 <TIM_Base_SetConfig+0x124>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d103      	bne.n	8003604 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	615a      	str	r2, [r3, #20]
}
 800360a:	bf00      	nop
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40010000 	.word	0x40010000
 800361c:	40000400 	.word	0x40000400
 8003620:	40000800 	.word	0x40000800
 8003624:	40000c00 	.word	0x40000c00
 8003628:	40010400 	.word	0x40010400
 800362c:	40014000 	.word	0x40014000
 8003630:	40014400 	.word	0x40014400
 8003634:	40014800 	.word	0x40014800
 8003638:	40001800 	.word	0x40001800
 800363c:	40001c00 	.word	0x40001c00
 8003640:	40002000 	.word	0x40002000

08003644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0201 	bic.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0303 	bic.w	r3, r3, #3
 800367a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 0302 	bic.w	r3, r3, #2
 800368c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a20      	ldr	r2, [pc, #128]	; (800371c <TIM_OC1_SetConfig+0xd8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_OC1_SetConfig+0x64>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1f      	ldr	r2, [pc, #124]	; (8003720 <TIM_OC1_SetConfig+0xdc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d10c      	bne.n	80036c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0308 	bic.w	r3, r3, #8
 80036ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a15      	ldr	r2, [pc, #84]	; (800371c <TIM_OC1_SetConfig+0xd8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d003      	beq.n	80036d2 <TIM_OC1_SetConfig+0x8e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a14      	ldr	r2, [pc, #80]	; (8003720 <TIM_OC1_SetConfig+0xdc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d111      	bne.n	80036f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	621a      	str	r2, [r3, #32]
}
 8003710:	bf00      	nop
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	40010000 	.word	0x40010000
 8003720:	40010400 	.word	0x40010400

08003724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f023 0210 	bic.w	r2, r3, #16
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0320 	bic.w	r3, r3, #32
 800376e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a22      	ldr	r2, [pc, #136]	; (8003808 <TIM_OC2_SetConfig+0xe4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <TIM_OC2_SetConfig+0x68>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a21      	ldr	r2, [pc, #132]	; (800380c <TIM_OC2_SetConfig+0xe8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d10d      	bne.n	80037a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a17      	ldr	r2, [pc, #92]	; (8003808 <TIM_OC2_SetConfig+0xe4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d003      	beq.n	80037b8 <TIM_OC2_SetConfig+0x94>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a16      	ldr	r2, [pc, #88]	; (800380c <TIM_OC2_SetConfig+0xe8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d113      	bne.n	80037e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	621a      	str	r2, [r3, #32]
}
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40010000 	.word	0x40010000
 800380c:	40010400 	.word	0x40010400

08003810 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0303 	bic.w	r3, r3, #3
 8003846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a21      	ldr	r2, [pc, #132]	; (80038f0 <TIM_OC3_SetConfig+0xe0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d003      	beq.n	8003876 <TIM_OC3_SetConfig+0x66>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a20      	ldr	r2, [pc, #128]	; (80038f4 <TIM_OC3_SetConfig+0xe4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d10d      	bne.n	8003892 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800387c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <TIM_OC3_SetConfig+0xe0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d003      	beq.n	80038a2 <TIM_OC3_SetConfig+0x92>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a15      	ldr	r2, [pc, #84]	; (80038f4 <TIM_OC3_SetConfig+0xe4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d113      	bne.n	80038ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	621a      	str	r2, [r3, #32]
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40010000 	.word	0x40010000
 80038f4:	40010400 	.word	0x40010400

080038f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	031b      	lsls	r3, r3, #12
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a12      	ldr	r2, [pc, #72]	; (800399c <TIM_OC4_SetConfig+0xa4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d003      	beq.n	8003960 <TIM_OC4_SetConfig+0x68>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a11      	ldr	r2, [pc, #68]	; (80039a0 <TIM_OC4_SetConfig+0xa8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d109      	bne.n	8003974 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	019b      	lsls	r3, r3, #6
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	621a      	str	r2, [r3, #32]
}
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40010000 	.word	0x40010000
 80039a0:	40010400 	.word	0x40010400

080039a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f023 0201 	bic.w	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f023 030a 	bic.w	r3, r3, #10
 80039e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b087      	sub	sp, #28
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f023 0210 	bic.w	r2, r3, #16
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	031b      	lsls	r3, r3, #12
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	621a      	str	r2, [r3, #32]
}
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b085      	sub	sp, #20
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f043 0307 	orr.w	r3, r3, #7
 8003a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	609a      	str	r2, [r3, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	021a      	lsls	r2, r3, #8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	609a      	str	r2, [r3, #8]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	2201      	movs	r2, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a1a      	ldr	r2, [r3, #32]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	43db      	mvns	r3, r3
 8003afa:	401a      	ands	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a1a      	ldr	r2, [r3, #32]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 031f 	and.w	r3, r3, #31
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	621a      	str	r2, [r3, #32]
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e05a      	b.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d022      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b88:	d01d      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d018      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d013      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d009      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a17      	ldr	r2, [pc, #92]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d004      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a15      	ldr	r2, [pc, #84]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d10c      	bne.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40010000 	.word	0x40010000
 8003c04:	40000400 	.word	0x40000400
 8003c08:	40000800 	.word	0x40000800
 8003c0c:	40000c00 	.word	0x40000c00
 8003c10:	40010400 	.word	0x40010400
 8003c14:	40014000 	.word	0x40014000
 8003c18:	40001800 	.word	0x40001800

08003c1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e03d      	b.n	8003cb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e03f      	b.n	8003d7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fd fc16 	bl	8001540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2224      	movs	r2, #36	; 0x24
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f829 	bl	8003d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d88:	b0c0      	sub	sp, #256	; 0x100
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da0:	68d9      	ldr	r1, [r3, #12]
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	ea40 0301 	orr.w	r3, r0, r1
 8003dac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ddc:	f021 010c 	bic.w	r1, r1, #12
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dea:	430b      	orrs	r3, r1
 8003dec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfe:	6999      	ldr	r1, [r3, #24]
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	ea40 0301 	orr.w	r3, r0, r1
 8003e0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	4b8f      	ldr	r3, [pc, #572]	; (8004050 <UART_SetConfig+0x2cc>)
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d005      	beq.n	8003e24 <UART_SetConfig+0xa0>
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4b8d      	ldr	r3, [pc, #564]	; (8004054 <UART_SetConfig+0x2d0>)
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d104      	bne.n	8003e2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e24:	f7fe f8be 	bl	8001fa4 <HAL_RCC_GetPCLK2Freq>
 8003e28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e2c:	e003      	b.n	8003e36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e2e:	f7fe f8a5 	bl	8001f7c <HAL_RCC_GetPCLK1Freq>
 8003e32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e40:	f040 810c 	bne.w	800405c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e56:	4622      	mov	r2, r4
 8003e58:	462b      	mov	r3, r5
 8003e5a:	1891      	adds	r1, r2, r2
 8003e5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e5e:	415b      	adcs	r3, r3
 8003e60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e66:	4621      	mov	r1, r4
 8003e68:	eb12 0801 	adds.w	r8, r2, r1
 8003e6c:	4629      	mov	r1, r5
 8003e6e:	eb43 0901 	adc.w	r9, r3, r1
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e86:	4690      	mov	r8, r2
 8003e88:	4699      	mov	r9, r3
 8003e8a:	4623      	mov	r3, r4
 8003e8c:	eb18 0303 	adds.w	r3, r8, r3
 8003e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e94:	462b      	mov	r3, r5
 8003e96:	eb49 0303 	adc.w	r3, r9, r3
 8003e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003eaa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003eae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	18db      	adds	r3, r3, r3
 8003eb6:	653b      	str	r3, [r7, #80]	; 0x50
 8003eb8:	4613      	mov	r3, r2
 8003eba:	eb42 0303 	adc.w	r3, r2, r3
 8003ebe:	657b      	str	r3, [r7, #84]	; 0x54
 8003ec0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ec4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ec8:	f7fc f99c 	bl	8000204 <__aeabi_uldivmod>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4b61      	ldr	r3, [pc, #388]	; (8004058 <UART_SetConfig+0x2d4>)
 8003ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	011c      	lsls	r4, r3, #4
 8003eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ee4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ee8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003eec:	4642      	mov	r2, r8
 8003eee:	464b      	mov	r3, r9
 8003ef0:	1891      	adds	r1, r2, r2
 8003ef2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ef4:	415b      	adcs	r3, r3
 8003ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003efc:	4641      	mov	r1, r8
 8003efe:	eb12 0a01 	adds.w	sl, r2, r1
 8003f02:	4649      	mov	r1, r9
 8003f04:	eb43 0b01 	adc.w	fp, r3, r1
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f1c:	4692      	mov	sl, r2
 8003f1e:	469b      	mov	fp, r3
 8003f20:	4643      	mov	r3, r8
 8003f22:	eb1a 0303 	adds.w	r3, sl, r3
 8003f26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f2a:	464b      	mov	r3, r9
 8003f2c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	18db      	adds	r3, r3, r3
 8003f4c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f4e:	4613      	mov	r3, r2
 8003f50:	eb42 0303 	adc.w	r3, r2, r3
 8003f54:	647b      	str	r3, [r7, #68]	; 0x44
 8003f56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f5e:	f7fc f951 	bl	8000204 <__aeabi_uldivmod>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4611      	mov	r1, r2
 8003f68:	4b3b      	ldr	r3, [pc, #236]	; (8004058 <UART_SetConfig+0x2d4>)
 8003f6a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	2264      	movs	r2, #100	; 0x64
 8003f72:	fb02 f303 	mul.w	r3, r2, r3
 8003f76:	1acb      	subs	r3, r1, r3
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f7e:	4b36      	ldr	r3, [pc, #216]	; (8004058 <UART_SetConfig+0x2d4>)
 8003f80:	fba3 2302 	umull	r2, r3, r3, r2
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f8c:	441c      	add	r4, r3
 8003f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	464b      	mov	r3, r9
 8003fa4:	1891      	adds	r1, r2, r2
 8003fa6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fa8:	415b      	adcs	r3, r3
 8003faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fb0:	4641      	mov	r1, r8
 8003fb2:	1851      	adds	r1, r2, r1
 8003fb4:	6339      	str	r1, [r7, #48]	; 0x30
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	414b      	adcs	r3, r1
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fc8:	4659      	mov	r1, fp
 8003fca:	00cb      	lsls	r3, r1, #3
 8003fcc:	4651      	mov	r1, sl
 8003fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fd2:	4651      	mov	r1, sl
 8003fd4:	00ca      	lsls	r2, r1, #3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4642      	mov	r2, r8
 8003fde:	189b      	adds	r3, r3, r2
 8003fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fe4:	464b      	mov	r3, r9
 8003fe6:	460a      	mov	r2, r1
 8003fe8:	eb42 0303 	adc.w	r3, r2, r3
 8003fec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ffc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004000:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004004:	460b      	mov	r3, r1
 8004006:	18db      	adds	r3, r3, r3
 8004008:	62bb      	str	r3, [r7, #40]	; 0x28
 800400a:	4613      	mov	r3, r2
 800400c:	eb42 0303 	adc.w	r3, r2, r3
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004012:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004016:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800401a:	f7fc f8f3 	bl	8000204 <__aeabi_uldivmod>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <UART_SetConfig+0x2d4>)
 8004024:	fba3 1302 	umull	r1, r3, r3, r2
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	2164      	movs	r1, #100	; 0x64
 800402c:	fb01 f303 	mul.w	r3, r1, r3
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	3332      	adds	r3, #50	; 0x32
 8004036:	4a08      	ldr	r2, [pc, #32]	; (8004058 <UART_SetConfig+0x2d4>)
 8004038:	fba2 2303 	umull	r2, r3, r2, r3
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	f003 0207 	and.w	r2, r3, #7
 8004042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4422      	add	r2, r4
 800404a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800404c:	e105      	b.n	800425a <UART_SetConfig+0x4d6>
 800404e:	bf00      	nop
 8004050:	40011000 	.word	0x40011000
 8004054:	40011400 	.word	0x40011400
 8004058:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800405c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004060:	2200      	movs	r2, #0
 8004062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004066:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800406a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800406e:	4642      	mov	r2, r8
 8004070:	464b      	mov	r3, r9
 8004072:	1891      	adds	r1, r2, r2
 8004074:	6239      	str	r1, [r7, #32]
 8004076:	415b      	adcs	r3, r3
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
 800407a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800407e:	4641      	mov	r1, r8
 8004080:	1854      	adds	r4, r2, r1
 8004082:	4649      	mov	r1, r9
 8004084:	eb43 0501 	adc.w	r5, r3, r1
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	00eb      	lsls	r3, r5, #3
 8004092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004096:	00e2      	lsls	r2, r4, #3
 8004098:	4614      	mov	r4, r2
 800409a:	461d      	mov	r5, r3
 800409c:	4643      	mov	r3, r8
 800409e:	18e3      	adds	r3, r4, r3
 80040a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040a4:	464b      	mov	r3, r9
 80040a6:	eb45 0303 	adc.w	r3, r5, r3
 80040aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040ca:	4629      	mov	r1, r5
 80040cc:	008b      	lsls	r3, r1, #2
 80040ce:	4621      	mov	r1, r4
 80040d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040d4:	4621      	mov	r1, r4
 80040d6:	008a      	lsls	r2, r1, #2
 80040d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040dc:	f7fc f892 	bl	8000204 <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4b60      	ldr	r3, [pc, #384]	; (8004268 <UART_SetConfig+0x4e4>)
 80040e6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	011c      	lsls	r4, r3, #4
 80040ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040f2:	2200      	movs	r2, #0
 80040f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004100:	4642      	mov	r2, r8
 8004102:	464b      	mov	r3, r9
 8004104:	1891      	adds	r1, r2, r2
 8004106:	61b9      	str	r1, [r7, #24]
 8004108:	415b      	adcs	r3, r3
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004110:	4641      	mov	r1, r8
 8004112:	1851      	adds	r1, r2, r1
 8004114:	6139      	str	r1, [r7, #16]
 8004116:	4649      	mov	r1, r9
 8004118:	414b      	adcs	r3, r1
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004128:	4659      	mov	r1, fp
 800412a:	00cb      	lsls	r3, r1, #3
 800412c:	4651      	mov	r1, sl
 800412e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004132:	4651      	mov	r1, sl
 8004134:	00ca      	lsls	r2, r1, #3
 8004136:	4610      	mov	r0, r2
 8004138:	4619      	mov	r1, r3
 800413a:	4603      	mov	r3, r0
 800413c:	4642      	mov	r2, r8
 800413e:	189b      	adds	r3, r3, r2
 8004140:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004144:	464b      	mov	r3, r9
 8004146:	460a      	mov	r2, r1
 8004148:	eb42 0303 	adc.w	r3, r2, r3
 800414c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	67bb      	str	r3, [r7, #120]	; 0x78
 800415a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004168:	4649      	mov	r1, r9
 800416a:	008b      	lsls	r3, r1, #2
 800416c:	4641      	mov	r1, r8
 800416e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004172:	4641      	mov	r1, r8
 8004174:	008a      	lsls	r2, r1, #2
 8004176:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800417a:	f7fc f843 	bl	8000204 <__aeabi_uldivmod>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4b39      	ldr	r3, [pc, #228]	; (8004268 <UART_SetConfig+0x4e4>)
 8004184:	fba3 1302 	umull	r1, r3, r3, r2
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	2164      	movs	r1, #100	; 0x64
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	3332      	adds	r3, #50	; 0x32
 8004196:	4a34      	ldr	r2, [pc, #208]	; (8004268 <UART_SetConfig+0x4e4>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a2:	441c      	add	r4, r3
 80041a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a8:	2200      	movs	r2, #0
 80041aa:	673b      	str	r3, [r7, #112]	; 0x70
 80041ac:	677a      	str	r2, [r7, #116]	; 0x74
 80041ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041b2:	4642      	mov	r2, r8
 80041b4:	464b      	mov	r3, r9
 80041b6:	1891      	adds	r1, r2, r2
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	415b      	adcs	r3, r3
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041c2:	4641      	mov	r1, r8
 80041c4:	1851      	adds	r1, r2, r1
 80041c6:	6039      	str	r1, [r7, #0]
 80041c8:	4649      	mov	r1, r9
 80041ca:	414b      	adcs	r3, r1
 80041cc:	607b      	str	r3, [r7, #4]
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041da:	4659      	mov	r1, fp
 80041dc:	00cb      	lsls	r3, r1, #3
 80041de:	4651      	mov	r1, sl
 80041e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041e4:	4651      	mov	r1, sl
 80041e6:	00ca      	lsls	r2, r1, #3
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	4603      	mov	r3, r0
 80041ee:	4642      	mov	r2, r8
 80041f0:	189b      	adds	r3, r3, r2
 80041f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80041f4:	464b      	mov	r3, r9
 80041f6:	460a      	mov	r2, r1
 80041f8:	eb42 0303 	adc.w	r3, r2, r3
 80041fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	663b      	str	r3, [r7, #96]	; 0x60
 8004208:	667a      	str	r2, [r7, #100]	; 0x64
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004216:	4649      	mov	r1, r9
 8004218:	008b      	lsls	r3, r1, #2
 800421a:	4641      	mov	r1, r8
 800421c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004220:	4641      	mov	r1, r8
 8004222:	008a      	lsls	r2, r1, #2
 8004224:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004228:	f7fb ffec 	bl	8000204 <__aeabi_uldivmod>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <UART_SetConfig+0x4e4>)
 8004232:	fba3 1302 	umull	r1, r3, r3, r2
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	2164      	movs	r1, #100	; 0x64
 800423a:	fb01 f303 	mul.w	r3, r1, r3
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	3332      	adds	r3, #50	; 0x32
 8004244:	4a08      	ldr	r2, [pc, #32]	; (8004268 <UART_SetConfig+0x4e4>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	f003 020f 	and.w	r2, r3, #15
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4422      	add	r2, r4
 8004258:	609a      	str	r2, [r3, #8]
}
 800425a:	bf00      	nop
 800425c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004260:	46bd      	mov	sp, r7
 8004262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004266:	bf00      	nop
 8004268:	51eb851f 	.word	0x51eb851f

0800426c <__libc_init_array>:
 800426c:	b570      	push	{r4, r5, r6, lr}
 800426e:	4d0d      	ldr	r5, [pc, #52]	; (80042a4 <__libc_init_array+0x38>)
 8004270:	4c0d      	ldr	r4, [pc, #52]	; (80042a8 <__libc_init_array+0x3c>)
 8004272:	1b64      	subs	r4, r4, r5
 8004274:	10a4      	asrs	r4, r4, #2
 8004276:	2600      	movs	r6, #0
 8004278:	42a6      	cmp	r6, r4
 800427a:	d109      	bne.n	8004290 <__libc_init_array+0x24>
 800427c:	4d0b      	ldr	r5, [pc, #44]	; (80042ac <__libc_init_array+0x40>)
 800427e:	4c0c      	ldr	r4, [pc, #48]	; (80042b0 <__libc_init_array+0x44>)
 8004280:	f000 f820 	bl	80042c4 <_init>
 8004284:	1b64      	subs	r4, r4, r5
 8004286:	10a4      	asrs	r4, r4, #2
 8004288:	2600      	movs	r6, #0
 800428a:	42a6      	cmp	r6, r4
 800428c:	d105      	bne.n	800429a <__libc_init_array+0x2e>
 800428e:	bd70      	pop	{r4, r5, r6, pc}
 8004290:	f855 3b04 	ldr.w	r3, [r5], #4
 8004294:	4798      	blx	r3
 8004296:	3601      	adds	r6, #1
 8004298:	e7ee      	b.n	8004278 <__libc_init_array+0xc>
 800429a:	f855 3b04 	ldr.w	r3, [r5], #4
 800429e:	4798      	blx	r3
 80042a0:	3601      	adds	r6, #1
 80042a2:	e7f2      	b.n	800428a <__libc_init_array+0x1e>
 80042a4:	080042fc 	.word	0x080042fc
 80042a8:	080042fc 	.word	0x080042fc
 80042ac:	080042fc 	.word	0x080042fc
 80042b0:	08004300 	.word	0x08004300

080042b4 <memset>:
 80042b4:	4402      	add	r2, r0
 80042b6:	4603      	mov	r3, r0
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d100      	bne.n	80042be <memset+0xa>
 80042bc:	4770      	bx	lr
 80042be:	f803 1b01 	strb.w	r1, [r3], #1
 80042c2:	e7f9      	b.n	80042b8 <memset+0x4>

080042c4 <_init>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	bf00      	nop
 80042c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ca:	bc08      	pop	{r3}
 80042cc:	469e      	mov	lr, r3
 80042ce:	4770      	bx	lr

080042d0 <_fini>:
 80042d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d2:	bf00      	nop
 80042d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d6:	bc08      	pop	{r3}
 80042d8:	469e      	mov	lr, r3
 80042da:	4770      	bx	lr
