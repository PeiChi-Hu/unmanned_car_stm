
EncoderDC0720.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004060  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004224  08004224  00014224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800423c  0800423c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004244  08004244  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004244  08004244  00014244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800424c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000000c  08004258  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08004258  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcde  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae3  00000000  00000000  0002dd1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  0002f800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00030450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f26  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df79  00000000  00000000  00051f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccbb4  00000000  00000000  0005fea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012ca5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003430  00000000  00000000  0012caac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800420c 	.word	0x0800420c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800420c 	.word	0x0800420c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_TIM_IC_CaptureCallback>:
int16_t count3 = 0;
int16_t count4 = 0;
int16_t count5 = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a20      	ldr	r2, [pc, #128]	; (8000594 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d10a      	bne.n	800052e <HAL_TIM_IC_CaptureCallback+0x26>
		counter2 = __HAL_TIM_GET_COUNTER(htim);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051e:	4a1e      	ldr	r2, [pc, #120]	; (8000598 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000520:	6013      	str	r3, [r2, #0]
		count2 = (int16_t)counter2;
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	b21a      	sxth	r2, r3
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <HAL_TIM_IC_CaptureCallback+0x94>)
 800052a:	801a      	strh	r2, [r3, #0]
	else if(htim == &htim5){
			counter5 = __HAL_TIM_GET_COUNTER(htim);
			count5 = (int16_t)counter5;
		}

}
 800052c:	e02b      	b.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
	else if(htim == &htim3){
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a1b      	ldr	r2, [pc, #108]	; (80005a0 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d10a      	bne.n	800054c <HAL_TIM_IC_CaptureCallback+0x44>
			counter3 = __HAL_TIM_GET_COUNTER(htim);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053c:	4a19      	ldr	r2, [pc, #100]	; (80005a4 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800053e:	6013      	str	r3, [r2, #0]
			count3 = (int16_t)counter3;
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	b21a      	sxth	r2, r3
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000548:	801a      	strh	r2, [r3, #0]
}
 800054a:	e01c      	b.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
	else if(htim == &htim4){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a17      	ldr	r2, [pc, #92]	; (80005ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d10a      	bne.n	800056a <HAL_TIM_IC_CaptureCallback+0x62>
			counter4 = __HAL_TIM_GET_COUNTER(htim);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055a:	4a15      	ldr	r2, [pc, #84]	; (80005b0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800055c:	6013      	str	r3, [r2, #0]
			count4 = (int16_t)counter4;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	b21a      	sxth	r2, r3
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000566:	801a      	strh	r2, [r3, #0]
}
 8000568:	e00d      	b.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
	else if(htim == &htim5){
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d109      	bne.n	8000586 <HAL_TIM_IC_CaptureCallback+0x7e>
			counter5 = __HAL_TIM_GET_COUNTER(htim);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000578:	4a10      	ldr	r2, [pc, #64]	; (80005bc <HAL_TIM_IC_CaptureCallback+0xb4>)
 800057a:	6013      	str	r3, [r2, #0]
			count5 = (int16_t)counter5;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_TIM_IC_CaptureCallback+0xb4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	b21a      	sxth	r2, r3
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000584:	801a      	strh	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000070 	.word	0x20000070
 8000598:	20000264 	.word	0x20000264
 800059c:	20000274 	.word	0x20000274
 80005a0:	200000b8 	.word	0x200000b8
 80005a4:	20000268 	.word	0x20000268
 80005a8:	20000276 	.word	0x20000276
 80005ac:	20000100 	.word	0x20000100
 80005b0:	2000026c 	.word	0x2000026c
 80005b4:	20000278 	.word	0x20000278
 80005b8:	20000148 	.word	0x20000148
 80005bc:	20000270 	.word	0x20000270
 80005c0:	2000027a 	.word	0x2000027a

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f001 f833 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f8eb 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 fc89 	bl	8000ee8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 fc5d 	bl	8000e94 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005da:	f000 fa21 	bl	8000a20 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005de:	f000 fa73 	bl	8000ac8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005e2:	f000 fac5 	bl	8000b70 <MX_TIM4_Init>
  MX_TIM5_Init();
 80005e6:	f000 fb17 	bl	8000c18 <MX_TIM5_Init>
  MX_TIM1_Init();
 80005ea:	f000 f94b 	bl	8000884 <MX_TIM1_Init>
  MX_TIM10_Init();
 80005ee:	f000 fc03 	bl	8000df8 <MX_TIM10_Init>
  MX_TIM8_Init();
 80005f2:	f000 fb65 	bl	8000cc0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  // Encoder
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80005f6:	213c      	movs	r1, #60	; 0x3c
 80005f8:	4864      	ldr	r0, [pc, #400]	; (800078c <main+0x1c8>)
 80005fa:	f002 fbbf 	bl	8002d7c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80005fe:	213c      	movs	r1, #60	; 0x3c
 8000600:	4863      	ldr	r0, [pc, #396]	; (8000790 <main+0x1cc>)
 8000602:	f002 fbbb 	bl	8002d7c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000606:	213c      	movs	r1, #60	; 0x3c
 8000608:	4862      	ldr	r0, [pc, #392]	; (8000794 <main+0x1d0>)
 800060a:	f002 fbb7 	bl	8002d7c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 800060e:	213c      	movs	r1, #60	; 0x3c
 8000610:	4861      	ldr	r0, [pc, #388]	; (8000798 <main+0x1d4>)
 8000612:	f002 fbb3 	bl	8002d7c <HAL_TIM_Encoder_Start_IT>

  // start DC motor PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000616:	2100      	movs	r1, #0
 8000618:	4860      	ldr	r0, [pc, #384]	; (800079c <main+0x1d8>)
 800061a:	f002 f9e7 	bl	80029ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800061e:	2104      	movs	r1, #4
 8000620:	485e      	ldr	r0, [pc, #376]	; (800079c <main+0x1d8>)
 8000622:	f002 f9e3 	bl	80029ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000626:	2108      	movs	r1, #8
 8000628:	485c      	ldr	r0, [pc, #368]	; (800079c <main+0x1d8>)
 800062a:	f002 f9df 	bl	80029ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800062e:	210c      	movs	r1, #12
 8000630:	485a      	ldr	r0, [pc, #360]	; (800079c <main+0x1d8>)
 8000632:	f002 f9db 	bl	80029ec <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // DC motor PWM
	  htim1.Instance-> CCR1 = 80;
 8000636:	4b59      	ldr	r3, [pc, #356]	; (800079c <main+0x1d8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2250      	movs	r2, #80	; 0x50
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
	  htim1.Instance-> CCR2 = 80;
 800063e:	4b57      	ldr	r3, [pc, #348]	; (800079c <main+0x1d8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2250      	movs	r2, #80	; 0x50
 8000644:	639a      	str	r2, [r3, #56]	; 0x38
	  htim1.Instance-> CCR3 = 80;
 8000646:	4b55      	ldr	r3, [pc, #340]	; (800079c <main+0x1d8>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2250      	movs	r2, #80	; 0x50
 800064c:	63da      	str	r2, [r3, #60]	; 0x3c
	  htim1.Instance-> CCR4 = 80;
 800064e:	4b53      	ldr	r3, [pc, #332]	; (800079c <main+0x1d8>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2250      	movs	r2, #80	; 0x50
 8000654:	641a      	str	r2, [r3, #64]	; 0x40

	  // four wheels go forward
	  for(int i=0;i<4;i++){
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	e046      	b.n	80006ea <main+0x126>
	  	  		  int a=1;
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
	  	  		  int b=0;
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
	  	  		  HAL_GPIO_WritePin(GPIOC, DC1_1_Pin, a);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	2104      	movs	r1, #4
 800066c:	484c      	ldr	r0, [pc, #304]	; (80007a0 <main+0x1dc>)
 800066e:	f001 fb1d 	bl	8001cac <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOC, DC1_2_Pin, b);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	461a      	mov	r2, r3
 8000678:	2108      	movs	r1, #8
 800067a:	4849      	ldr	r0, [pc, #292]	; (80007a0 <main+0x1dc>)
 800067c:	f001 fb16 	bl	8001cac <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOB, DC2_1_Pin, a);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	461a      	mov	r2, r3
 8000686:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068a:	4846      	ldr	r0, [pc, #280]	; (80007a4 <main+0x1e0>)
 800068c:	f001 fb0e 	bl	8001cac <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOB, DC2_2_Pin, b);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	461a      	mov	r2, r3
 8000696:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069a:	4842      	ldr	r0, [pc, #264]	; (80007a4 <main+0x1e0>)
 800069c:	f001 fb06 	bl	8001cac <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOC, DC3_1_Pin, a);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	2101      	movs	r1, #1
 80006a8:	483d      	ldr	r0, [pc, #244]	; (80007a0 <main+0x1dc>)
 80006aa:	f001 faff 	bl	8001cac <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOC, DC3_2_Pin, b);
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	2102      	movs	r1, #2
 80006b6:	483a      	ldr	r0, [pc, #232]	; (80007a0 <main+0x1dc>)
 80006b8:	f001 faf8 	bl	8001cac <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOB, DC4_1_Pin, a);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	461a      	mov	r2, r3
 80006c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c6:	4837      	ldr	r0, [pc, #220]	; (80007a4 <main+0x1e0>)
 80006c8:	f001 faf0 	bl	8001cac <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOB, DC4_2_Pin, b);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	461a      	mov	r2, r3
 80006d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d6:	4833      	ldr	r0, [pc, #204]	; (80007a4 <main+0x1e0>)
 80006d8:	f001 fae8 	bl	8001cac <HAL_GPIO_WritePin>
	  	  		  HAL_Delay(1000);
 80006dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e0:	f001 f81a 	bl	8001718 <HAL_Delay>
	  for(int i=0;i<4;i++){
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	3301      	adds	r3, #1
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	2b03      	cmp	r3, #3
 80006ee:	ddb5      	ble.n	800065c <main+0x98>
	  }
	  // four wheels go backward
	  for(int i=0;i<4;i++){
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	e046      	b.n	8000784 <main+0x1c0>
				  int a=0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
				  int b=1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	60bb      	str	r3, [r7, #8]
				  HAL_GPIO_WritePin(GPIOC, DC1_1_Pin, a);
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	461a      	mov	r2, r3
 8000704:	2104      	movs	r1, #4
 8000706:	4826      	ldr	r0, [pc, #152]	; (80007a0 <main+0x1dc>)
 8000708:	f001 fad0 	bl	8001cac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, DC1_2_Pin, b);
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	2108      	movs	r1, #8
 8000714:	4822      	ldr	r0, [pc, #136]	; (80007a0 <main+0x1dc>)
 8000716:	f001 fac9 	bl	8001cac <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOB, DC2_1_Pin, a);
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	461a      	mov	r2, r3
 8000720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000724:	481f      	ldr	r0, [pc, #124]	; (80007a4 <main+0x1e0>)
 8000726:	f001 fac1 	bl	8001cac <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOB, DC2_2_Pin, b);
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	461a      	mov	r2, r3
 8000730:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000734:	481b      	ldr	r0, [pc, #108]	; (80007a4 <main+0x1e0>)
 8000736:	f001 fab9 	bl	8001cac <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOC, DC3_1_Pin, a);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	461a      	mov	r2, r3
 8000740:	2101      	movs	r1, #1
 8000742:	4817      	ldr	r0, [pc, #92]	; (80007a0 <main+0x1dc>)
 8000744:	f001 fab2 	bl	8001cac <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOC, DC3_2_Pin, b);
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	2102      	movs	r1, #2
 8000750:	4813      	ldr	r0, [pc, #76]	; (80007a0 <main+0x1dc>)
 8000752:	f001 faab 	bl	8001cac <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOB, DC4_1_Pin, a);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	461a      	mov	r2, r3
 800075c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000760:	4810      	ldr	r0, [pc, #64]	; (80007a4 <main+0x1e0>)
 8000762:	f001 faa3 	bl	8001cac <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOB, DC4_2_Pin, b);
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	461a      	mov	r2, r3
 800076c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <main+0x1e0>)
 8000772:	f001 fa9b 	bl	8001cac <HAL_GPIO_WritePin>
				  HAL_Delay(1000);
 8000776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077a:	f000 ffcd 	bl	8001718 <HAL_Delay>
	  for(int i=0;i<4;i++){
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	3301      	adds	r3, #1
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	2b03      	cmp	r3, #3
 8000788:	ddb5      	ble.n	80006f6 <main+0x132>
	  htim1.Instance-> CCR1 = 80;
 800078a:	e754      	b.n	8000636 <main+0x72>
 800078c:	20000070 	.word	0x20000070
 8000790:	200000b8 	.word	0x200000b8
 8000794:	20000100 	.word	0x20000100
 8000798:	20000148 	.word	0x20000148
 800079c:	20000028 	.word	0x20000028
 80007a0:	40020800 	.word	0x40020800
 80007a4:	40020400 	.word	0x40020400

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	; 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2234      	movs	r2, #52	; 0x34
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 fd20 	bl	80041fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b2a      	ldr	r3, [pc, #168]	; (800087c <SystemClock_Config+0xd4>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a29      	ldr	r2, [pc, #164]	; (800087c <SystemClock_Config+0xd4>)
 80007d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b27      	ldr	r3, [pc, #156]	; (800087c <SystemClock_Config+0xd4>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	4b24      	ldr	r3, [pc, #144]	; (8000880 <SystemClock_Config+0xd8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f4:	4a22      	ldr	r2, [pc, #136]	; (8000880 <SystemClock_Config+0xd8>)
 80007f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b20      	ldr	r3, [pc, #128]	; (8000880 <SystemClock_Config+0xd8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2310      	movs	r3, #16
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	2302      	movs	r3, #2
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000818:	2300      	movs	r3, #0
 800081a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800081c:	2310      	movs	r3, #16
 800081e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000820:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000824:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000826:	2304      	movs	r3, #4
 8000828:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4618      	mov	r0, r3
 8000838:	f001 fd9c 	bl	8002374 <HAL_RCC_OscConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000842:	f000 fbe9 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2302      	movs	r3, #2
 800084c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	2102      	movs	r1, #2
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fa3c 	bl	8001ce0 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800086e:	f000 fbd3 	bl	8001018 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3750      	adds	r7, #80	; 0x50
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b096      	sub	sp, #88	; 0x58
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000898:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
 80008b2:	615a      	str	r2, [r3, #20]
 80008b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2220      	movs	r2, #32
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f003 fc9d 	bl	80041fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c2:	4b55      	ldr	r3, [pc, #340]	; (8000a18 <MX_TIM1_Init+0x194>)
 80008c4:	4a55      	ldr	r2, [pc, #340]	; (8000a1c <MX_TIM1_Init+0x198>)
 80008c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008c8:	4b53      	ldr	r3, [pc, #332]	; (8000a18 <MX_TIM1_Init+0x194>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ce:	4b52      	ldr	r3, [pc, #328]	; (8000a18 <MX_TIM1_Init+0x194>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008d4:	4b50      	ldr	r3, [pc, #320]	; (8000a18 <MX_TIM1_Init+0x194>)
 80008d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008dc:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <MX_TIM1_Init+0x194>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e2:	4b4d      	ldr	r3, [pc, #308]	; (8000a18 <MX_TIM1_Init+0x194>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e8:	4b4b      	ldr	r3, [pc, #300]	; (8000a18 <MX_TIM1_Init+0x194>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ee:	484a      	ldr	r0, [pc, #296]	; (8000a18 <MX_TIM1_Init+0x194>)
 80008f0:	f001 ffde 	bl	80028b0 <HAL_TIM_Base_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008fa:	f000 fb8d 	bl	8001018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000904:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000908:	4619      	mov	r1, r3
 800090a:	4843      	ldr	r0, [pc, #268]	; (8000a18 <MX_TIM1_Init+0x194>)
 800090c:	f002 fcae 	bl	800326c <HAL_TIM_ConfigClockSource>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000916:	f000 fb7f 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800091a:	483f      	ldr	r0, [pc, #252]	; (8000a18 <MX_TIM1_Init+0x194>)
 800091c:	f002 f817 	bl	800294e <HAL_TIM_PWM_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000926:	f000 fb77 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800092a:	2108      	movs	r1, #8
 800092c:	483a      	ldr	r0, [pc, #232]	; (8000a18 <MX_TIM1_Init+0x194>)
 800092e:	f002 f925 	bl	8002b7c <HAL_TIM_OnePulse_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000938:	f000 fb6e 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000944:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000948:	4619      	mov	r1, r3
 800094a:	4833      	ldr	r0, [pc, #204]	; (8000a18 <MX_TIM1_Init+0x194>)
 800094c:	f003 f88e 	bl	8003a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000956:	f000 fb5f 	bl	8001018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800095a:	2360      	movs	r3, #96	; 0x60
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000966:	2300      	movs	r3, #0
 8000968:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097a:	2200      	movs	r2, #0
 800097c:	4619      	mov	r1, r3
 800097e:	4826      	ldr	r0, [pc, #152]	; (8000a18 <MX_TIM1_Init+0x194>)
 8000980:	f002 fbb2 	bl	80030e8 <HAL_TIM_PWM_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800098a:	f000 fb45 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	2204      	movs	r2, #4
 8000994:	4619      	mov	r1, r3
 8000996:	4820      	ldr	r0, [pc, #128]	; (8000a18 <MX_TIM1_Init+0x194>)
 8000998:	f002 fba6 	bl	80030e8 <HAL_TIM_PWM_ConfigChannel>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 80009a2:	f000 fb39 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	2208      	movs	r2, #8
 80009ac:	4619      	mov	r1, r3
 80009ae:	481a      	ldr	r0, [pc, #104]	; (8000a18 <MX_TIM1_Init+0x194>)
 80009b0:	f002 fb9a 	bl	80030e8 <HAL_TIM_PWM_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80009ba:	f000 fb2d 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	220c      	movs	r2, #12
 80009c4:	4619      	mov	r1, r3
 80009c6:	4814      	ldr	r0, [pc, #80]	; (8000a18 <MX_TIM1_Init+0x194>)
 80009c8:	f002 fb8e 	bl	80030e8 <HAL_TIM_PWM_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 80009d2:	f000 fb21 	bl	8001018 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4619      	mov	r1, r3
 80009f8:	4807      	ldr	r0, [pc, #28]	; (8000a18 <MX_TIM1_Init+0x194>)
 80009fa:	f003 f8b3 	bl	8003b64 <HAL_TIMEx_ConfigBreakDeadTime>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8000a04:	f000 fb08 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <MX_TIM1_Init+0x194>)
 8000a0a:	f000 fcb1 	bl	8001370 <HAL_TIM_MspPostInit>

}
 8000a0e:	bf00      	nop
 8000a10:	3758      	adds	r7, #88	; 0x58
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000028 	.word	0x20000028
 8000a1c:	40010000 	.word	0x40010000

08000a20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08c      	sub	sp, #48	; 0x30
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	2224      	movs	r2, #36	; 0x24
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f003 fbe4 	bl	80041fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a3c:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <MX_TIM2_Init+0xa4>)
 8000a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <MX_TIM2_Init+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <MX_TIM2_Init+0xa4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a50:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <MX_TIM2_Init+0xa4>)
 8000a52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_TIM2_Init+0xa4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <MX_TIM2_Init+0xa4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a64:	2303      	movs	r3, #3
 8000a66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <MX_TIM2_Init+0xa4>)
 8000a90:	f002 f8ce 	bl	8002c30 <HAL_TIM_Encoder_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a9a:	f000 fabd 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <MX_TIM2_Init+0xa4>)
 8000aac:	f002 ffde 	bl	8003a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ab6:	f000 faaf 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	3730      	adds	r7, #48	; 0x30
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000070 	.word	0x20000070

08000ac8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	; 0x30
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	2224      	movs	r2, #36	; 0x24
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f003 fb90 	bl	80041fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ae4:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <MX_TIM3_Init+0xa0>)
 8000ae6:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <MX_TIM3_Init+0xa4>)
 8000ae8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_TIM3_Init+0xa0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_TIM3_Init+0xa0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_TIM3_Init+0xa0>)
 8000af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000afc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_TIM3_Init+0xa0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MX_TIM3_Init+0xa0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b12:	2301      	movs	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b22:	2301      	movs	r3, #1
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4619      	mov	r1, r3
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <MX_TIM3_Init+0xa0>)
 8000b36:	f002 f87b 	bl	8002c30 <HAL_TIM_Encoder_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000b40:	f000 fa6a 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_TIM3_Init+0xa0>)
 8000b52:	f002 ff8b 	bl	8003a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b5c:	f000 fa5c 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3730      	adds	r7, #48	; 0x30
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000b8 	.word	0x200000b8
 8000b6c:	40000400 	.word	0x40000400

08000b70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	; 0x30
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	2224      	movs	r2, #36	; 0x24
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f003 fb3c 	bl	80041fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <MX_TIM4_Init+0xa0>)
 8000b8e:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <MX_TIM4_Init+0xa4>)
 8000b90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <MX_TIM4_Init+0xa0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <MX_TIM4_Init+0xa0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <MX_TIM4_Init+0xa0>)
 8000ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <MX_TIM4_Init+0xa0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MX_TIM4_Init+0xa0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480c      	ldr	r0, [pc, #48]	; (8000c10 <MX_TIM4_Init+0xa0>)
 8000bde:	f002 f827 	bl	8002c30 <HAL_TIM_Encoder_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000be8:	f000 fa16 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_TIM4_Init+0xa0>)
 8000bfa:	f002 ff37 	bl	8003a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000c04:	f000 fa08 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3730      	adds	r7, #48	; 0x30
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000100 	.word	0x20000100
 8000c14:	40000800 	.word	0x40000800

08000c18 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08c      	sub	sp, #48	; 0x30
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	2224      	movs	r2, #36	; 0x24
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 fae8 	bl	80041fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c34:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <MX_TIM5_Init+0xa0>)
 8000c36:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <MX_TIM5_Init+0xa4>)
 8000c38:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000c3a:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <MX_TIM5_Init+0xa0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c40:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_TIM5_Init+0xa0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <MX_TIM5_Init+0xa0>)
 8000c48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c4c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_TIM5_Init+0xa0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_TIM5_Init+0xa0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c62:	2301      	movs	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c72:	2301      	movs	r3, #1
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	4619      	mov	r1, r3
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <MX_TIM5_Init+0xa0>)
 8000c86:	f001 ffd3 	bl	8002c30 <HAL_TIM_Encoder_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000c90:	f000 f9c2 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_TIM5_Init+0xa0>)
 8000ca2:	f002 fee3 	bl	8003a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000cac:	f000 f9b4 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3730      	adds	r7, #48	; 0x30
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000148 	.word	0x20000148
 8000cbc:	40000c00 	.word	0x40000c00

08000cc0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b092      	sub	sp, #72	; 0x48
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
 8000ce0:	615a      	str	r2, [r3, #20]
 8000ce2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 fa86 	bl	80041fc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000cf0:	4b3f      	ldr	r3, [pc, #252]	; (8000df0 <MX_TIM8_Init+0x130>)
 8000cf2:	4a40      	ldr	r2, [pc, #256]	; (8000df4 <MX_TIM8_Init+0x134>)
 8000cf4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000cf6:	4b3e      	ldr	r3, [pc, #248]	; (8000df0 <MX_TIM8_Init+0x130>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <MX_TIM8_Init+0x130>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000d02:	4b3b      	ldr	r3, [pc, #236]	; (8000df0 <MX_TIM8_Init+0x130>)
 8000d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d08:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0a:	4b39      	ldr	r3, [pc, #228]	; (8000df0 <MX_TIM8_Init+0x130>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d10:	4b37      	ldr	r3, [pc, #220]	; (8000df0 <MX_TIM8_Init+0x130>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d16:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <MX_TIM8_Init+0x130>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000d1c:	4834      	ldr	r0, [pc, #208]	; (8000df0 <MX_TIM8_Init+0x130>)
 8000d1e:	f001 fe16 	bl	800294e <HAL_TIM_PWM_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000d28:	f000 f976 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d38:	4619      	mov	r1, r3
 8000d3a:	482d      	ldr	r0, [pc, #180]	; (8000df0 <MX_TIM8_Init+0x130>)
 8000d3c:	f002 fe96 	bl	8003a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000d46:	f000 f967 	bl	8001018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d4a:	2360      	movs	r3, #96	; 0x60
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d56:	2300      	movs	r3, #0
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d62:	2300      	movs	r3, #0
 8000d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4820      	ldr	r0, [pc, #128]	; (8000df0 <MX_TIM8_Init+0x130>)
 8000d70:	f002 f9ba 	bl	80030e8 <HAL_TIM_PWM_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000d7a:	f000 f94d 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d82:	2208      	movs	r2, #8
 8000d84:	4619      	mov	r1, r3
 8000d86:	481a      	ldr	r0, [pc, #104]	; (8000df0 <MX_TIM8_Init+0x130>)
 8000d88:	f002 f9ae 	bl	80030e8 <HAL_TIM_PWM_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8000d92:	f000 f941 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4814      	ldr	r0, [pc, #80]	; (8000df0 <MX_TIM8_Init+0x130>)
 8000da0:	f002 f9a2 	bl	80030e8 <HAL_TIM_PWM_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8000daa:	f000 f935 	bl	8001018 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4807      	ldr	r0, [pc, #28]	; (8000df0 <MX_TIM8_Init+0x130>)
 8000dd2:	f002 fec7 	bl	8003b64 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8000ddc:	f000 f91c 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000de0:	4803      	ldr	r0, [pc, #12]	; (8000df0 <MX_TIM8_Init+0x130>)
 8000de2:	f000 fac5 	bl	8001370 <HAL_TIM_MspPostInit>

}
 8000de6:	bf00      	nop
 8000de8:	3748      	adds	r7, #72	; 0x48
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000190 	.word	0x20000190
 8000df4:	40010400 	.word	0x40010400

08000df8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
 8000e0c:	615a      	str	r2, [r3, #20]
 8000e0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000e10:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <MX_TIM10_Init+0x94>)
 8000e12:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <MX_TIM10_Init+0x98>)
 8000e14:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8000e16:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <MX_TIM10_Init+0x94>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_TIM10_Init+0x94>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <MX_TIM10_Init+0x94>)
 8000e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e28:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_TIM10_Init+0x94>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_TIM10_Init+0x94>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000e36:	4815      	ldr	r0, [pc, #84]	; (8000e8c <MX_TIM10_Init+0x94>)
 8000e38:	f001 fd3a 	bl	80028b0 <HAL_TIM_Base_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000e42:	f000 f8e9 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000e46:	4811      	ldr	r0, [pc, #68]	; (8000e8c <MX_TIM10_Init+0x94>)
 8000e48:	f001 fd81 	bl	800294e <HAL_TIM_PWM_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000e52:	f000 f8e1 	bl	8001018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e56:	2360      	movs	r3, #96	; 0x60
 8000e58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4807      	ldr	r0, [pc, #28]	; (8000e8c <MX_TIM10_Init+0x94>)
 8000e6e:	f002 f93b 	bl	80030e8 <HAL_TIM_PWM_ConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8000e78:	f000 f8ce 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <MX_TIM10_Init+0x94>)
 8000e7e:	f000 fa77 	bl	8001370 <HAL_TIM_MspPostInit>

}
 8000e82:	bf00      	nop
 8000e84:	3720      	adds	r7, #32
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200001d8 	.word	0x200001d8
 8000e90:	40014400 	.word	0x40014400

08000e94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <MX_USART2_UART_Init+0x50>)
 8000e9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000eba:	220c      	movs	r2, #12
 8000ebc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ecc:	f002 feb0 	bl	8003c30 <HAL_UART_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ed6:	f000 f89f 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000220 	.word	0x20000220
 8000ee4:	40004400 	.word	0x40004400

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b41      	ldr	r3, [pc, #260]	; (8001008 <MX_GPIO_Init+0x120>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a40      	ldr	r2, [pc, #256]	; (8001008 <MX_GPIO_Init+0x120>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b3e      	ldr	r3, [pc, #248]	; (8001008 <MX_GPIO_Init+0x120>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b3a      	ldr	r3, [pc, #232]	; (8001008 <MX_GPIO_Init+0x120>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a39      	ldr	r2, [pc, #228]	; (8001008 <MX_GPIO_Init+0x120>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b37      	ldr	r3, [pc, #220]	; (8001008 <MX_GPIO_Init+0x120>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b33      	ldr	r3, [pc, #204]	; (8001008 <MX_GPIO_Init+0x120>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a32      	ldr	r2, [pc, #200]	; (8001008 <MX_GPIO_Init+0x120>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b30      	ldr	r3, [pc, #192]	; (8001008 <MX_GPIO_Init+0x120>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <MX_GPIO_Init+0x120>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a2b      	ldr	r2, [pc, #172]	; (8001008 <MX_GPIO_Init+0x120>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <MX_GPIO_Init+0x120>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DC3_1_Pin|DC3_2_Pin|DC1_1_Pin|DC1_2_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	210f      	movs	r1, #15
 8000f72:	4826      	ldr	r0, [pc, #152]	; (800100c <MX_GPIO_Init+0x124>)
 8000f74:	f000 fe9a 	bl	8001cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	4824      	ldr	r0, [pc, #144]	; (8001010 <MX_GPIO_Init+0x128>)
 8000f7e:	f000 fe95 	bl	8001cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC4_1_Pin|DC2_1_Pin|DC2_2_Pin|DC4_2_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f88:	4822      	ldr	r0, [pc, #136]	; (8001014 <MX_GPIO_Init+0x12c>)
 8000f8a:	f000 fe8f 	bl	8001cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4819      	ldr	r0, [pc, #100]	; (800100c <MX_GPIO_Init+0x124>)
 8000fa6:	f000 fced 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC3_1_Pin DC3_2_Pin DC1_1_Pin DC1_2_Pin */
  GPIO_InitStruct.Pin = DC3_1_Pin|DC3_2_Pin|DC1_1_Pin|DC1_2_Pin;
 8000faa:	230f      	movs	r3, #15
 8000fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4812      	ldr	r0, [pc, #72]	; (800100c <MX_GPIO_Init+0x124>)
 8000fc2:	f000 fcdf 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fc6:	2320      	movs	r3, #32
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <MX_GPIO_Init+0x128>)
 8000fde:	f000 fcd1 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC4_1_Pin DC2_1_Pin DC2_2_Pin DC4_2_Pin */
  GPIO_InitStruct.Pin = DC4_1_Pin|DC2_1_Pin|DC2_2_Pin|DC4_2_Pin;
 8000fe2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <MX_GPIO_Init+0x12c>)
 8000ffc:	f000 fcc2 	bl	8001984 <HAL_GPIO_Init>

}
 8001000:	bf00      	nop
 8001002:	3728      	adds	r7, #40	; 0x28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800
 800100c:	40020800 	.word	0x40020800
 8001010:	40020000 	.word	0x40020000
 8001014:	40020400 	.word	0x40020400

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001020:	e7fe      	b.n	8001020 <Error_Handler+0x8>
	...

08001024 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_MspInit+0x4c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <HAL_MspInit+0x4c>)
 8001034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_MspInit+0x4c>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_MspInit+0x4c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	4a08      	ldr	r2, [pc, #32]	; (8001070 <HAL_MspInit+0x4c>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	6413      	str	r3, [r2, #64]	; 0x40
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_MspInit+0x4c>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001062:	2007      	movs	r0, #7
 8001064:	f000 fc4c 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800

08001074 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a15      	ldr	r2, [pc, #84]	; (80010d8 <HAL_TIM_Base_MspInit+0x64>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d10e      	bne.n	80010a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_TIM_Base_MspInit+0x68>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a13      	ldr	r2, [pc, #76]	; (80010dc <HAL_TIM_Base_MspInit+0x68>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_TIM_Base_MspInit+0x68>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80010a2:	e012      	b.n	80010ca <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <HAL_TIM_Base_MspInit+0x6c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d10d      	bne.n	80010ca <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_TIM_Base_MspInit+0x68>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a09      	ldr	r2, [pc, #36]	; (80010dc <HAL_TIM_Base_MspInit+0x68>)
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <HAL_TIM_Base_MspInit+0x68>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40010000 	.word	0x40010000
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40014400 	.word	0x40014400

080010e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b090      	sub	sp, #64	; 0x40
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001104:	d154      	bne.n	80011b0 <HAL_TIM_Encoder_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
 800110a:	4b82      	ldr	r3, [pc, #520]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a81      	ldr	r2, [pc, #516]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b7f      	ldr	r3, [pc, #508]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001120:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
 8001126:	4b7b      	ldr	r3, [pc, #492]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a7a      	ldr	r2, [pc, #488]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b78      	ldr	r3, [pc, #480]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
 8001142:	4b74      	ldr	r3, [pc, #464]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a73      	ldr	r2, [pc, #460]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b71      	ldr	r3, [pc, #452]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	623b      	str	r3, [r7, #32]
 8001158:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800115a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800116c:	2301      	movs	r3, #1
 800116e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001174:	4619      	mov	r1, r3
 8001176:	4868      	ldr	r0, [pc, #416]	; (8001318 <HAL_TIM_Encoder_MspInit+0x234>)
 8001178:	f000 fc04 	bl	8001984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800117c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800118e:	2301      	movs	r3, #1
 8001190:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001196:	4619      	mov	r1, r3
 8001198:	4860      	ldr	r0, [pc, #384]	; (800131c <HAL_TIM_Encoder_MspInit+0x238>)
 800119a:	f000 fbf3 	bl	8001984 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	201c      	movs	r0, #28
 80011a4:	f000 fbb7 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011a8:	201c      	movs	r0, #28
 80011aa:	f000 fbd0 	bl	800194e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80011ae:	e0ac      	b.n	800130a <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM3)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a5a      	ldr	r2, [pc, #360]	; (8001320 <HAL_TIM_Encoder_MspInit+0x23c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d134      	bne.n	8001224 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	4b55      	ldr	r3, [pc, #340]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a54      	ldr	r2, [pc, #336]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b52      	ldr	r3, [pc, #328]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	4b4e      	ldr	r3, [pc, #312]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a4d      	ldr	r2, [pc, #308]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b4b      	ldr	r3, [pc, #300]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	61bb      	str	r3, [r7, #24]
 80011f0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011f2:	23c0      	movs	r3, #192	; 0xc0
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001202:	2302      	movs	r3, #2
 8001204:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800120a:	4619      	mov	r1, r3
 800120c:	4842      	ldr	r0, [pc, #264]	; (8001318 <HAL_TIM_Encoder_MspInit+0x234>)
 800120e:	f000 fbb9 	bl	8001984 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	201d      	movs	r0, #29
 8001218:	f000 fb7d 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800121c:	201d      	movs	r0, #29
 800121e:	f000 fb96 	bl	800194e <HAL_NVIC_EnableIRQ>
}
 8001222:	e072      	b.n	800130a <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM4)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a3e      	ldr	r2, [pc, #248]	; (8001324 <HAL_TIM_Encoder_MspInit+0x240>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d134      	bne.n	8001298 <HAL_TIM_Encoder_MspInit+0x1b4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	4b38      	ldr	r3, [pc, #224]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a37      	ldr	r2, [pc, #220]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
 800123e:	4b35      	ldr	r3, [pc, #212]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b31      	ldr	r3, [pc, #196]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a30      	ldr	r2, [pc, #192]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001266:	23c0      	movs	r3, #192	; 0xc0
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001276:	2302      	movs	r3, #2
 8001278:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800127e:	4619      	mov	r1, r3
 8001280:	4826      	ldr	r0, [pc, #152]	; (800131c <HAL_TIM_Encoder_MspInit+0x238>)
 8001282:	f000 fb7f 	bl	8001984 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	201e      	movs	r0, #30
 800128c:	f000 fb43 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001290:	201e      	movs	r0, #30
 8001292:	f000 fb5c 	bl	800194e <HAL_NVIC_EnableIRQ>
}
 8001296:	e038      	b.n	800130a <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM5)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a22      	ldr	r2, [pc, #136]	; (8001328 <HAL_TIM_Encoder_MspInit+0x244>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d133      	bne.n	800130a <HAL_TIM_Encoder_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_TIM_Encoder_MspInit+0x230>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012da:	2303      	movs	r3, #3
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80012ea:	2302      	movs	r3, #2
 80012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f2:	4619      	mov	r1, r3
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <HAL_TIM_Encoder_MspInit+0x234>)
 80012f6:	f000 fb45 	bl	8001984 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2032      	movs	r0, #50	; 0x32
 8001300:	f000 fb09 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001304:	2032      	movs	r0, #50	; 0x32
 8001306:	f000 fb22 	bl	800194e <HAL_NVIC_EnableIRQ>
}
 800130a:	bf00      	nop
 800130c:	3740      	adds	r7, #64	; 0x40
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400
 8001320:	40000400 	.word	0x40000400
 8001324:	40000800 	.word	0x40000800
 8001328:	40000c00 	.word	0x40000c00

0800132c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <HAL_TIM_PWM_MspInit+0x3c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10d      	bne.n	800135a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_TIM_PWM_MspInit+0x40>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a09      	ldr	r2, [pc, #36]	; (800136c <HAL_TIM_PWM_MspInit+0x40>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_TIM_PWM_MspInit+0x40>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40010400 	.word	0x40010400
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a37      	ldr	r2, [pc, #220]	; (800146c <HAL_TIM_MspPostInit+0xfc>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d11f      	bne.n	80013d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b36      	ldr	r3, [pc, #216]	; (8001470 <HAL_TIM_MspPostInit+0x100>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a35      	ldr	r2, [pc, #212]	; (8001470 <HAL_TIM_MspPostInit+0x100>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b33      	ldr	r3, [pc, #204]	; (8001470 <HAL_TIM_MspPostInit+0x100>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80013ae:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	482a      	ldr	r0, [pc, #168]	; (8001474 <HAL_TIM_MspPostInit+0x104>)
 80013cc:	f000 fada 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80013d0:	e048      	b.n	8001464 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM8)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a28      	ldr	r2, [pc, #160]	; (8001478 <HAL_TIM_MspPostInit+0x108>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d11f      	bne.n	800141c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <HAL_TIM_MspPostInit+0x100>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	4a22      	ldr	r2, [pc, #136]	; (8001470 <HAL_TIM_MspPostInit+0x100>)
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	6313      	str	r3, [r2, #48]	; 0x30
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <HAL_TIM_MspPostInit+0x100>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80013f8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800140a:	2303      	movs	r3, #3
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4819      	ldr	r0, [pc, #100]	; (800147c <HAL_TIM_MspPostInit+0x10c>)
 8001416:	f000 fab5 	bl	8001984 <HAL_GPIO_Init>
}
 800141a:	e023      	b.n	8001464 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM10)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a17      	ldr	r2, [pc, #92]	; (8001480 <HAL_TIM_MspPostInit+0x110>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d11e      	bne.n	8001464 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_TIM_MspPostInit+0x100>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a10      	ldr	r2, [pc, #64]	; (8001470 <HAL_TIM_MspPostInit+0x100>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_TIM_MspPostInit+0x100>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001454:	2303      	movs	r3, #3
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	4809      	ldr	r0, [pc, #36]	; (8001484 <HAL_TIM_MspPostInit+0x114>)
 8001460:	f000 fa90 	bl	8001984 <HAL_GPIO_Init>
}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40010000 	.word	0x40010000
 8001470:	40023800 	.word	0x40023800
 8001474:	40020000 	.word	0x40020000
 8001478:	40010400 	.word	0x40010400
 800147c:	40020800 	.word	0x40020800
 8001480:	40014400 	.word	0x40014400
 8001484:	40020400 	.word	0x40020400

08001488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <HAL_UART_MspInit+0x84>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d12b      	bne.n	8001502 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a17      	ldr	r2, [pc, #92]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014e2:	230c      	movs	r3, #12
 80014e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f2:	2307      	movs	r3, #7
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <HAL_UART_MspInit+0x8c>)
 80014fe:	f000 fa41 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001502:	bf00      	nop
 8001504:	3728      	adds	r7, #40	; 0x28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40004400 	.word	0x40004400
 8001510:	40023800 	.word	0x40023800
 8001514:	40020000 	.word	0x40020000

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001564:	f000 f8b8 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <TIM2_IRQHandler+0x10>)
 8001572:	f001 fcb1 	bl	8002ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000070 	.word	0x20000070

08001580 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <TIM3_IRQHandler+0x10>)
 8001586:	f001 fca7 	bl	8002ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200000b8 	.word	0x200000b8

08001594 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <TIM4_IRQHandler+0x10>)
 800159a:	f001 fc9d 	bl	8002ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000100 	.word	0x20000100

080015a8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <TIM5_IRQHandler+0x10>)
 80015ae:	f001 fc93 	bl	8002ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000148 	.word	0x20000148

080015bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <SystemInit+0x20>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <SystemInit+0x20>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001618 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015e6:	490e      	ldr	r1, [pc, #56]	; (8001620 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015e8:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015fc:	4c0b      	ldr	r4, [pc, #44]	; (800162c <LoopFillZerobss+0x26>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800160a:	f7ff ffd7 	bl	80015bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160e:	f002 fdd1 	bl	80041b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001612:	f7fe ffd7 	bl	80005c4 <main>
  bx  lr    
 8001616:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001618:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001624:	0800424c 	.word	0x0800424c
  ldr r2, =_sbss
 8001628:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800162c:	20000280 	.word	0x20000280

08001630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC_IRQHandler>
	...

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <HAL_Init+0x40>)
 800163e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001642:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_Init+0x40>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <HAL_Init+0x40>)
 800164a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_Init+0x40>)
 8001656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 f94f 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001662:	2000      	movs	r0, #0
 8001664:	f000 f808 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001668:	f7ff fcdc 	bl	8001024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023c00 	.word	0x40023c00

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x54>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x58>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f967 	bl	800196a <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00e      	b.n	80016c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d80a      	bhi.n	80016c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016b4:	f000 f92f 	bl	8001916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <HAL_InitTick+0x5c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000000 	.word	0x20000000
 80016d0:	20000008 	.word	0x20000008
 80016d4:	20000004 	.word	0x20000004

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000008 	.word	0x20000008
 80016fc:	2000027c 	.word	0x2000027c

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2000027c 	.word	0x2000027c

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffee 	bl	8001700 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffde 	bl	8001700 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4907      	ldr	r1, [pc, #28]	; (80017fc <__NVIC_EnableIRQ+0x38>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018e0:	f7ff ff8e 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff29 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff3e 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff8e 	bl	8001854 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5d 	bl	8001800 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff31 	bl	80017c4 <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa2 	bl	80018bc <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	e165      	b.n	8001c6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	f040 8154 	bne.w	8001c66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d005      	beq.n	80019d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d130      	bne.n	8001a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	2203      	movs	r2, #3
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 0201 	and.w	r2, r3, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d017      	beq.n	8001a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d123      	bne.n	8001ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	08da      	lsrs	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3208      	adds	r2, #8
 8001a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220f      	movs	r2, #15
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	08da      	lsrs	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3208      	adds	r2, #8
 8001ac2:	69b9      	ldr	r1, [r7, #24]
 8001ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80ae 	beq.w	8001c66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b5d      	ldr	r3, [pc, #372]	; (8001c84 <HAL_GPIO_Init+0x300>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a5c      	ldr	r2, [pc, #368]	; (8001c84 <HAL_GPIO_Init+0x300>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b5a      	ldr	r3, [pc, #360]	; (8001c84 <HAL_GPIO_Init+0x300>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b26:	4a58      	ldr	r2, [pc, #352]	; (8001c88 <HAL_GPIO_Init+0x304>)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4f      	ldr	r2, [pc, #316]	; (8001c8c <HAL_GPIO_Init+0x308>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d025      	beq.n	8001b9e <HAL_GPIO_Init+0x21a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4e      	ldr	r2, [pc, #312]	; (8001c90 <HAL_GPIO_Init+0x30c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d01f      	beq.n	8001b9a <HAL_GPIO_Init+0x216>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4d      	ldr	r2, [pc, #308]	; (8001c94 <HAL_GPIO_Init+0x310>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d019      	beq.n	8001b96 <HAL_GPIO_Init+0x212>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4c      	ldr	r2, [pc, #304]	; (8001c98 <HAL_GPIO_Init+0x314>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_GPIO_Init+0x20e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4b      	ldr	r2, [pc, #300]	; (8001c9c <HAL_GPIO_Init+0x318>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00d      	beq.n	8001b8e <HAL_GPIO_Init+0x20a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4a      	ldr	r2, [pc, #296]	; (8001ca0 <HAL_GPIO_Init+0x31c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d007      	beq.n	8001b8a <HAL_GPIO_Init+0x206>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a49      	ldr	r2, [pc, #292]	; (8001ca4 <HAL_GPIO_Init+0x320>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d101      	bne.n	8001b86 <HAL_GPIO_Init+0x202>
 8001b82:	2306      	movs	r3, #6
 8001b84:	e00c      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b86:	2307      	movs	r3, #7
 8001b88:	e00a      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b8a:	2305      	movs	r3, #5
 8001b8c:	e008      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b8e:	2304      	movs	r3, #4
 8001b90:	e006      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b92:	2303      	movs	r3, #3
 8001b94:	e004      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e002      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	f002 0203 	and.w	r2, r2, #3
 8001ba6:	0092      	lsls	r2, r2, #2
 8001ba8:	4093      	lsls	r3, r2
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb0:	4935      	ldr	r1, [pc, #212]	; (8001c88 <HAL_GPIO_Init+0x304>)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bbe:	4b3a      	ldr	r3, [pc, #232]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001be2:	4a31      	ldr	r2, [pc, #196]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be8:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c0c:	4a26      	ldr	r2, [pc, #152]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c12:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c36:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c60:	4a11      	ldr	r2, [pc, #68]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	2b0f      	cmp	r3, #15
 8001c70:	f67f ae96 	bls.w	80019a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40013800 	.word	0x40013800
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	40020400 	.word	0x40020400
 8001c94:	40020800 	.word	0x40020800
 8001c98:	40020c00 	.word	0x40020c00
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40021400 	.word	0x40021400
 8001ca4:	40021800 	.word	0x40021800
 8001ca8:	40013c00 	.word	0x40013c00

08001cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cbc:	787b      	ldrb	r3, [r7, #1]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc2:	887a      	ldrh	r2, [r7, #2]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cc8:	e003      	b.n	8001cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	041a      	lsls	r2, r3, #16
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	619a      	str	r2, [r3, #24]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0cc      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b68      	ldr	r3, [pc, #416]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d90c      	bls.n	8001d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b65      	ldr	r3, [pc, #404]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0b8      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d020      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d4c:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d58:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	494d      	ldr	r1, [pc, #308]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d044      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d119      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e07f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9e:	4b3f      	ldr	r3, [pc, #252]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d109      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e06f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dae:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e067      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dbe:	4b37      	ldr	r3, [pc, #220]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f023 0203 	bic.w	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4934      	ldr	r1, [pc, #208]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd0:	f7ff fc96 	bl	8001700 <HAL_GetTick>
 8001dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd8:	f7ff fc92 	bl	8001700 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e04f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 020c 	and.w	r2, r3, #12
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d1eb      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e00:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d20c      	bcs.n	8001e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e032      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4916      	ldr	r1, [pc, #88]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	490e      	ldr	r1, [pc, #56]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e66:	f000 f855 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	490a      	ldr	r1, [pc, #40]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	5ccb      	ldrb	r3, [r1, r3]
 8001e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fbf6 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023c00 	.word	0x40023c00
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	08004224 	.word	0x08004224
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	20000004 	.word	0x20000004

08001eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000000 	.word	0x20000000

08001ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ec8:	f7ff fff0 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	0a9b      	lsrs	r3, r3, #10
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4903      	ldr	r1, [pc, #12]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	08004234 	.word	0x08004234

08001eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ef0:	f7ff ffdc 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	0b5b      	lsrs	r3, r3, #13
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4903      	ldr	r1, [pc, #12]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f02:	5ccb      	ldrb	r3, [r1, r3]
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	08004234 	.word	0x08004234

08001f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f18:	b0ae      	sub	sp, #184	; 0xb8
 8001f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f3a:	4bcb      	ldr	r3, [pc, #812]	; (8002268 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	f200 8206 	bhi.w	8002354 <HAL_RCC_GetSysClockFreq+0x440>
 8001f48:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4e:	bf00      	nop
 8001f50:	08001f85 	.word	0x08001f85
 8001f54:	08002355 	.word	0x08002355
 8001f58:	08002355 	.word	0x08002355
 8001f5c:	08002355 	.word	0x08002355
 8001f60:	08001f8d 	.word	0x08001f8d
 8001f64:	08002355 	.word	0x08002355
 8001f68:	08002355 	.word	0x08002355
 8001f6c:	08002355 	.word	0x08002355
 8001f70:	08001f95 	.word	0x08001f95
 8001f74:	08002355 	.word	0x08002355
 8001f78:	08002355 	.word	0x08002355
 8001f7c:	08002355 	.word	0x08002355
 8001f80:	08002185 	.word	0x08002185
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f84:	4bb9      	ldr	r3, [pc, #740]	; (800226c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001f8a:	e1e7      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f8c:	4bb8      	ldr	r3, [pc, #736]	; (8002270 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f92:	e1e3      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f94:	4bb4      	ldr	r3, [pc, #720]	; (8002268 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fa0:	4bb1      	ldr	r3, [pc, #708]	; (8002268 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d071      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fac:	4bae      	ldr	r3, [pc, #696]	; (8002268 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	099b      	lsrs	r3, r3, #6
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001fb8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001fce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001fd2:	4622      	mov	r2, r4
 8001fd4:	462b      	mov	r3, r5
 8001fd6:	f04f 0000 	mov.w	r0, #0
 8001fda:	f04f 0100 	mov.w	r1, #0
 8001fde:	0159      	lsls	r1, r3, #5
 8001fe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe4:	0150      	lsls	r0, r2, #5
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4621      	mov	r1, r4
 8001fec:	1a51      	subs	r1, r2, r1
 8001fee:	6439      	str	r1, [r7, #64]	; 0x40
 8001ff0:	4629      	mov	r1, r5
 8001ff2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002004:	4649      	mov	r1, r9
 8002006:	018b      	lsls	r3, r1, #6
 8002008:	4641      	mov	r1, r8
 800200a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800200e:	4641      	mov	r1, r8
 8002010:	018a      	lsls	r2, r1, #6
 8002012:	4641      	mov	r1, r8
 8002014:	1a51      	subs	r1, r2, r1
 8002016:	63b9      	str	r1, [r7, #56]	; 0x38
 8002018:	4649      	mov	r1, r9
 800201a:	eb63 0301 	sbc.w	r3, r3, r1
 800201e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800202c:	4649      	mov	r1, r9
 800202e:	00cb      	lsls	r3, r1, #3
 8002030:	4641      	mov	r1, r8
 8002032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002036:	4641      	mov	r1, r8
 8002038:	00ca      	lsls	r2, r1, #3
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	4603      	mov	r3, r0
 8002040:	4622      	mov	r2, r4
 8002042:	189b      	adds	r3, r3, r2
 8002044:	633b      	str	r3, [r7, #48]	; 0x30
 8002046:	462b      	mov	r3, r5
 8002048:	460a      	mov	r2, r1
 800204a:	eb42 0303 	adc.w	r3, r2, r3
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800205c:	4629      	mov	r1, r5
 800205e:	024b      	lsls	r3, r1, #9
 8002060:	4621      	mov	r1, r4
 8002062:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002066:	4621      	mov	r1, r4
 8002068:	024a      	lsls	r2, r1, #9
 800206a:	4610      	mov	r0, r2
 800206c:	4619      	mov	r1, r3
 800206e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002072:	2200      	movs	r2, #0
 8002074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002078:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800207c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002080:	f7fe f8c0 	bl	8000204 <__aeabi_uldivmod>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4613      	mov	r3, r2
 800208a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800208e:	e067      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002090:	4b75      	ldr	r3, [pc, #468]	; (8002268 <HAL_RCC_GetSysClockFreq+0x354>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	2200      	movs	r2, #0
 8002098:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800209c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80020a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80020aa:	2300      	movs	r3, #0
 80020ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80020b2:	4622      	mov	r2, r4
 80020b4:	462b      	mov	r3, r5
 80020b6:	f04f 0000 	mov.w	r0, #0
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	0159      	lsls	r1, r3, #5
 80020c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c4:	0150      	lsls	r0, r2, #5
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4621      	mov	r1, r4
 80020cc:	1a51      	subs	r1, r2, r1
 80020ce:	62b9      	str	r1, [r7, #40]	; 0x28
 80020d0:	4629      	mov	r1, r5
 80020d2:	eb63 0301 	sbc.w	r3, r3, r1
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80020e4:	4649      	mov	r1, r9
 80020e6:	018b      	lsls	r3, r1, #6
 80020e8:	4641      	mov	r1, r8
 80020ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ee:	4641      	mov	r1, r8
 80020f0:	018a      	lsls	r2, r1, #6
 80020f2:	4641      	mov	r1, r8
 80020f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80020f8:	4649      	mov	r1, r9
 80020fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800210a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800210e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002112:	4692      	mov	sl, r2
 8002114:	469b      	mov	fp, r3
 8002116:	4623      	mov	r3, r4
 8002118:	eb1a 0303 	adds.w	r3, sl, r3
 800211c:	623b      	str	r3, [r7, #32]
 800211e:	462b      	mov	r3, r5
 8002120:	eb4b 0303 	adc.w	r3, fp, r3
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002132:	4629      	mov	r1, r5
 8002134:	028b      	lsls	r3, r1, #10
 8002136:	4621      	mov	r1, r4
 8002138:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800213c:	4621      	mov	r1, r4
 800213e:	028a      	lsls	r2, r1, #10
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002148:	2200      	movs	r2, #0
 800214a:	673b      	str	r3, [r7, #112]	; 0x70
 800214c:	677a      	str	r2, [r7, #116]	; 0x74
 800214e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002152:	f7fe f857 	bl	8000204 <__aeabi_uldivmod>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4613      	mov	r3, r2
 800215c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002160:	4b41      	ldr	r3, [pc, #260]	; (8002268 <HAL_RCC_GetSysClockFreq+0x354>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	0c1b      	lsrs	r3, r3, #16
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	3301      	adds	r3, #1
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002172:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002182:	e0eb      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002184:	4b38      	ldr	r3, [pc, #224]	; (8002268 <HAL_RCC_GetSysClockFreq+0x354>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800218c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002190:	4b35      	ldr	r3, [pc, #212]	; (8002268 <HAL_RCC_GetSysClockFreq+0x354>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d06b      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219c:	4b32      	ldr	r3, [pc, #200]	; (8002268 <HAL_RCC_GetSysClockFreq+0x354>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	2200      	movs	r2, #0
 80021a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80021a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ae:	663b      	str	r3, [r7, #96]	; 0x60
 80021b0:	2300      	movs	r3, #0
 80021b2:	667b      	str	r3, [r7, #100]	; 0x64
 80021b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80021b8:	4622      	mov	r2, r4
 80021ba:	462b      	mov	r3, r5
 80021bc:	f04f 0000 	mov.w	r0, #0
 80021c0:	f04f 0100 	mov.w	r1, #0
 80021c4:	0159      	lsls	r1, r3, #5
 80021c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021ca:	0150      	lsls	r0, r2, #5
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4621      	mov	r1, r4
 80021d2:	1a51      	subs	r1, r2, r1
 80021d4:	61b9      	str	r1, [r7, #24]
 80021d6:	4629      	mov	r1, r5
 80021d8:	eb63 0301 	sbc.w	r3, r3, r1
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80021ea:	4659      	mov	r1, fp
 80021ec:	018b      	lsls	r3, r1, #6
 80021ee:	4651      	mov	r1, sl
 80021f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021f4:	4651      	mov	r1, sl
 80021f6:	018a      	lsls	r2, r1, #6
 80021f8:	4651      	mov	r1, sl
 80021fa:	ebb2 0801 	subs.w	r8, r2, r1
 80021fe:	4659      	mov	r1, fp
 8002200:	eb63 0901 	sbc.w	r9, r3, r1
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002210:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002214:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002218:	4690      	mov	r8, r2
 800221a:	4699      	mov	r9, r3
 800221c:	4623      	mov	r3, r4
 800221e:	eb18 0303 	adds.w	r3, r8, r3
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	462b      	mov	r3, r5
 8002226:	eb49 0303 	adc.w	r3, r9, r3
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002238:	4629      	mov	r1, r5
 800223a:	024b      	lsls	r3, r1, #9
 800223c:	4621      	mov	r1, r4
 800223e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002242:	4621      	mov	r1, r4
 8002244:	024a      	lsls	r2, r1, #9
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800224e:	2200      	movs	r2, #0
 8002250:	65bb      	str	r3, [r7, #88]	; 0x58
 8002252:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002254:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002258:	f7fd ffd4 	bl	8000204 <__aeabi_uldivmod>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4613      	mov	r3, r2
 8002262:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002266:	e065      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x420>
 8002268:	40023800 	.word	0x40023800
 800226c:	00f42400 	.word	0x00f42400
 8002270:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002274:	4b3d      	ldr	r3, [pc, #244]	; (800236c <HAL_RCC_GetSysClockFreq+0x458>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	2200      	movs	r2, #0
 800227c:	4618      	mov	r0, r3
 800227e:	4611      	mov	r1, r2
 8002280:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002284:	653b      	str	r3, [r7, #80]	; 0x50
 8002286:	2300      	movs	r3, #0
 8002288:	657b      	str	r3, [r7, #84]	; 0x54
 800228a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800228e:	4642      	mov	r2, r8
 8002290:	464b      	mov	r3, r9
 8002292:	f04f 0000 	mov.w	r0, #0
 8002296:	f04f 0100 	mov.w	r1, #0
 800229a:	0159      	lsls	r1, r3, #5
 800229c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a0:	0150      	lsls	r0, r2, #5
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4641      	mov	r1, r8
 80022a8:	1a51      	subs	r1, r2, r1
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	4649      	mov	r1, r9
 80022ae:	eb63 0301 	sbc.w	r3, r3, r1
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80022c0:	4659      	mov	r1, fp
 80022c2:	018b      	lsls	r3, r1, #6
 80022c4:	4651      	mov	r1, sl
 80022c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ca:	4651      	mov	r1, sl
 80022cc:	018a      	lsls	r2, r1, #6
 80022ce:	4651      	mov	r1, sl
 80022d0:	1a54      	subs	r4, r2, r1
 80022d2:	4659      	mov	r1, fp
 80022d4:	eb63 0501 	sbc.w	r5, r3, r1
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	00eb      	lsls	r3, r5, #3
 80022e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022e6:	00e2      	lsls	r2, r4, #3
 80022e8:	4614      	mov	r4, r2
 80022ea:	461d      	mov	r5, r3
 80022ec:	4643      	mov	r3, r8
 80022ee:	18e3      	adds	r3, r4, r3
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	464b      	mov	r3, r9
 80022f4:	eb45 0303 	adc.w	r3, r5, r3
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002306:	4629      	mov	r1, r5
 8002308:	028b      	lsls	r3, r1, #10
 800230a:	4621      	mov	r1, r4
 800230c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002310:	4621      	mov	r1, r4
 8002312:	028a      	lsls	r2, r1, #10
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800231c:	2200      	movs	r2, #0
 800231e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002320:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002322:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002326:	f7fd ff6d 	bl	8000204 <__aeabi_uldivmod>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4613      	mov	r3, r2
 8002330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002334:	4b0d      	ldr	r3, [pc, #52]	; (800236c <HAL_RCC_GetSysClockFreq+0x458>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	0f1b      	lsrs	r3, r3, #28
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002346:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800234a:	fbb2 f3f3 	udiv	r3, r2, r3
 800234e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002352:	e003      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002356:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800235a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800235c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002360:	4618      	mov	r0, r3
 8002362:	37b8      	adds	r7, #184	; 0xb8
 8002364:	46bd      	mov	sp, r7
 8002366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	00f42400 	.word	0x00f42400

08002374 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e28d      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8083 	beq.w	800249a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002394:	4b94      	ldr	r3, [pc, #592]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b04      	cmp	r3, #4
 800239e:	d019      	beq.n	80023d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023a0:	4b91      	ldr	r3, [pc, #580]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d106      	bne.n	80023ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023ac:	4b8e      	ldr	r3, [pc, #568]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023b8:	d00c      	beq.n	80023d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ba:	4b8b      	ldr	r3, [pc, #556]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d112      	bne.n	80023ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c6:	4b88      	ldr	r3, [pc, #544]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023d2:	d10b      	bne.n	80023ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d4:	4b84      	ldr	r3, [pc, #528]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d05b      	beq.n	8002498 <HAL_RCC_OscConfig+0x124>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d157      	bne.n	8002498 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e25a      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f4:	d106      	bne.n	8002404 <HAL_RCC_OscConfig+0x90>
 80023f6:	4b7c      	ldr	r3, [pc, #496]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7b      	ldr	r2, [pc, #492]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e01d      	b.n	8002440 <HAL_RCC_OscConfig+0xcc>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0xb4>
 800240e:	4b76      	ldr	r3, [pc, #472]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a75      	ldr	r2, [pc, #468]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 8002414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	4b73      	ldr	r3, [pc, #460]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a72      	ldr	r2, [pc, #456]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e00b      	b.n	8002440 <HAL_RCC_OscConfig+0xcc>
 8002428:	4b6f      	ldr	r3, [pc, #444]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a6e      	ldr	r2, [pc, #440]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 800242e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b6c      	ldr	r3, [pc, #432]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a6b      	ldr	r2, [pc, #428]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 800243a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7ff f95a 	bl	8001700 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002450:	f7ff f956 	bl	8001700 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	; 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e21f      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	4b61      	ldr	r3, [pc, #388]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0xdc>
 800246e:	e014      	b.n	800249a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7ff f946 	bl	8001700 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002478:	f7ff f942 	bl	8001700 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	; 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e20b      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248a:	4b57      	ldr	r3, [pc, #348]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x104>
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d06f      	beq.n	8002586 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024a6:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d017      	beq.n	80024e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024b2:	4b4d      	ldr	r3, [pc, #308]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d105      	bne.n	80024ca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024be:	4b4a      	ldr	r3, [pc, #296]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d11c      	bne.n	8002510 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024d6:	4b44      	ldr	r3, [pc, #272]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d116      	bne.n	8002510 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e2:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <HAL_RCC_OscConfig+0x186>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d001      	beq.n	80024fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e1d3      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fa:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4937      	ldr	r1, [pc, #220]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250e:	e03a      	b.n	8002586 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d020      	beq.n	800255a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002518:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_RCC_OscConfig+0x278>)
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7ff f8ef 	bl	8001700 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002526:	f7ff f8eb 	bl	8001700 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e1b4      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002538:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002544:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4925      	ldr	r1, [pc, #148]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]
 8002558:	e015      	b.n	8002586 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x278>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7ff f8ce 	bl	8001700 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002568:	f7ff f8ca 	bl	8001700 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e193      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257a:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d036      	beq.n	8002600 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d016      	beq.n	80025c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <HAL_RCC_OscConfig+0x27c>)
 800259c:	2201      	movs	r2, #1
 800259e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a0:	f7ff f8ae 	bl	8001700 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a8:	f7ff f8aa 	bl	8001700 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e173      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80025bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x234>
 80025c6:	e01b      	b.n	8002600 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RCC_OscConfig+0x27c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ce:	f7ff f897 	bl	8001700 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d4:	e00e      	b.n	80025f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d6:	f7ff f893 	bl	8001700 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d907      	bls.n	80025f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e15c      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
 80025e8:	40023800 	.word	0x40023800
 80025ec:	42470000 	.word	0x42470000
 80025f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f4:	4b8a      	ldr	r3, [pc, #552]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 80025f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ea      	bne.n	80025d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8097 	beq.w	800273c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002612:	4b83      	ldr	r3, [pc, #524]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10f      	bne.n	800263e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	4b7f      	ldr	r3, [pc, #508]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	4a7e      	ldr	r2, [pc, #504]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 8002628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262c:	6413      	str	r3, [r2, #64]	; 0x40
 800262e:	4b7c      	ldr	r3, [pc, #496]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800263a:	2301      	movs	r3, #1
 800263c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263e:	4b79      	ldr	r3, [pc, #484]	; (8002824 <HAL_RCC_OscConfig+0x4b0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d118      	bne.n	800267c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264a:	4b76      	ldr	r3, [pc, #472]	; (8002824 <HAL_RCC_OscConfig+0x4b0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a75      	ldr	r2, [pc, #468]	; (8002824 <HAL_RCC_OscConfig+0x4b0>)
 8002650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002656:	f7ff f853 	bl	8001700 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265e:	f7ff f84f 	bl	8001700 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e118      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002670:	4b6c      	ldr	r3, [pc, #432]	; (8002824 <HAL_RCC_OscConfig+0x4b0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d106      	bne.n	8002692 <HAL_RCC_OscConfig+0x31e>
 8002684:	4b66      	ldr	r3, [pc, #408]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	4a65      	ldr	r2, [pc, #404]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6713      	str	r3, [r2, #112]	; 0x70
 8002690:	e01c      	b.n	80026cc <HAL_RCC_OscConfig+0x358>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b05      	cmp	r3, #5
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x340>
 800269a:	4b61      	ldr	r3, [pc, #388]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269e:	4a60      	ldr	r2, [pc, #384]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 80026a0:	f043 0304 	orr.w	r3, r3, #4
 80026a4:	6713      	str	r3, [r2, #112]	; 0x70
 80026a6:	4b5e      	ldr	r3, [pc, #376]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026aa:	4a5d      	ldr	r2, [pc, #372]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6713      	str	r3, [r2, #112]	; 0x70
 80026b2:	e00b      	b.n	80026cc <HAL_RCC_OscConfig+0x358>
 80026b4:	4b5a      	ldr	r3, [pc, #360]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	4a59      	ldr	r2, [pc, #356]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 80026ba:	f023 0301 	bic.w	r3, r3, #1
 80026be:	6713      	str	r3, [r2, #112]	; 0x70
 80026c0:	4b57      	ldr	r3, [pc, #348]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	4a56      	ldr	r2, [pc, #344]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 80026c6:	f023 0304 	bic.w	r3, r3, #4
 80026ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d015      	beq.n	8002700 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7ff f814 	bl	8001700 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7ff f810 	bl	8001700 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e0d7      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f2:	4b4b      	ldr	r3, [pc, #300]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0ee      	beq.n	80026dc <HAL_RCC_OscConfig+0x368>
 80026fe:	e014      	b.n	800272a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fe fffe 	bl	8001700 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002706:	e00a      	b.n	800271e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f7fe fffa 	bl	8001700 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	; 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e0c1      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271e:	4b40      	ldr	r3, [pc, #256]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1ee      	bne.n	8002708 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800272a:	7dfb      	ldrb	r3, [r7, #23]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d105      	bne.n	800273c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002730:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	4a3a      	ldr	r2, [pc, #232]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 8002736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800273a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80ad 	beq.w	80028a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002746:	4b36      	ldr	r3, [pc, #216]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b08      	cmp	r3, #8
 8002750:	d060      	beq.n	8002814 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d145      	bne.n	80027e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275a:	4b33      	ldr	r3, [pc, #204]	; (8002828 <HAL_RCC_OscConfig+0x4b4>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7fe ffce 	bl	8001700 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002768:	f7fe ffca 	bl	8001700 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e093      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	4b29      	ldr	r3, [pc, #164]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69da      	ldr	r2, [r3, #28]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	019b      	lsls	r3, r3, #6
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	085b      	lsrs	r3, r3, #1
 800279e:	3b01      	subs	r3, #1
 80027a0:	041b      	lsls	r3, r3, #16
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	061b      	lsls	r3, r3, #24
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	071b      	lsls	r3, r3, #28
 80027b2:	491b      	ldr	r1, [pc, #108]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b8:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <HAL_RCC_OscConfig+0x4b4>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7fe ff9f 	bl	8001700 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c6:	f7fe ff9b 	bl	8001700 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e064      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x452>
 80027e4:	e05c      	b.n	80028a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <HAL_RCC_OscConfig+0x4b4>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe ff88 	bl	8001700 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe ff84 	bl	8001700 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e04d      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_RCC_OscConfig+0x4ac>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x480>
 8002812:	e045      	b.n	80028a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d107      	bne.n	800282c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e040      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
 8002820:	40023800 	.word	0x40023800
 8002824:	40007000 	.word	0x40007000
 8002828:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800282c:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <HAL_RCC_OscConfig+0x538>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d030      	beq.n	800289c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d129      	bne.n	800289c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d122      	bne.n	800289c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800285c:	4013      	ands	r3, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002862:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002864:	4293      	cmp	r3, r2
 8002866:	d119      	bne.n	800289c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002872:	085b      	lsrs	r3, r3, #1
 8002874:	3b01      	subs	r3, #1
 8002876:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d10f      	bne.n	800289c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d107      	bne.n	800289c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800

080028b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e041      	b.n	8002946 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe fbcc 	bl	8001074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4610      	mov	r0, r2
 80028f0:	f000 fdac 	bl	800344c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e041      	b.n	80029e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d106      	bne.n	800297a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7fe fcd9 	bl	800132c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2202      	movs	r2, #2
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3304      	adds	r3, #4
 800298a:	4619      	mov	r1, r3
 800298c:	4610      	mov	r0, r2
 800298e:	f000 fd5d 	bl	800344c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <HAL_TIM_PWM_Start+0x24>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e022      	b.n	8002a56 <HAL_TIM_PWM_Start+0x6a>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d109      	bne.n	8002a2a <HAL_TIM_PWM_Start+0x3e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	bf14      	ite	ne
 8002a22:	2301      	movne	r3, #1
 8002a24:	2300      	moveq	r3, #0
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	e015      	b.n	8002a56 <HAL_TIM_PWM_Start+0x6a>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d109      	bne.n	8002a44 <HAL_TIM_PWM_Start+0x58>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	bf14      	ite	ne
 8002a3c:	2301      	movne	r3, #1
 8002a3e:	2300      	moveq	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e008      	b.n	8002a56 <HAL_TIM_PWM_Start+0x6a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e07c      	b.n	8002b58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d104      	bne.n	8002a6e <HAL_TIM_PWM_Start+0x82>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a6c:	e013      	b.n	8002a96 <HAL_TIM_PWM_Start+0xaa>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d104      	bne.n	8002a7e <HAL_TIM_PWM_Start+0x92>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a7c:	e00b      	b.n	8002a96 <HAL_TIM_PWM_Start+0xaa>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d104      	bne.n	8002a8e <HAL_TIM_PWM_Start+0xa2>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a8c:	e003      	b.n	8002a96 <HAL_TIM_PWM_Start+0xaa>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2202      	movs	r2, #2
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	6839      	ldr	r1, [r7, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 ffbe 	bl	8003a20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2d      	ldr	r2, [pc, #180]	; (8002b60 <HAL_TIM_PWM_Start+0x174>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d004      	beq.n	8002ab8 <HAL_TIM_PWM_Start+0xcc>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2c      	ldr	r2, [pc, #176]	; (8002b64 <HAL_TIM_PWM_Start+0x178>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d101      	bne.n	8002abc <HAL_TIM_PWM_Start+0xd0>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <HAL_TIM_PWM_Start+0xd2>
 8002abc:	2300      	movs	r3, #0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a22      	ldr	r2, [pc, #136]	; (8002b60 <HAL_TIM_PWM_Start+0x174>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d022      	beq.n	8002b22 <HAL_TIM_PWM_Start+0x136>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d01d      	beq.n	8002b22 <HAL_TIM_PWM_Start+0x136>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a1f      	ldr	r2, [pc, #124]	; (8002b68 <HAL_TIM_PWM_Start+0x17c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d018      	beq.n	8002b22 <HAL_TIM_PWM_Start+0x136>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <HAL_TIM_PWM_Start+0x180>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <HAL_TIM_PWM_Start+0x136>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1c      	ldr	r2, [pc, #112]	; (8002b70 <HAL_TIM_PWM_Start+0x184>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00e      	beq.n	8002b22 <HAL_TIM_PWM_Start+0x136>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a16      	ldr	r2, [pc, #88]	; (8002b64 <HAL_TIM_PWM_Start+0x178>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d009      	beq.n	8002b22 <HAL_TIM_PWM_Start+0x136>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <HAL_TIM_PWM_Start+0x188>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d004      	beq.n	8002b22 <HAL_TIM_PWM_Start+0x136>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a16      	ldr	r2, [pc, #88]	; (8002b78 <HAL_TIM_PWM_Start+0x18c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d111      	bne.n	8002b46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b06      	cmp	r3, #6
 8002b32:	d010      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b44:	e007      	b.n	8002b56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0201 	orr.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40010000 	.word	0x40010000
 8002b64:	40010400 	.word	0x40010400
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40000c00 	.word	0x40000c00
 8002b74:	40014000 	.word	0x40014000
 8002b78:	40001800 	.word	0x40001800

08002b7c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e041      	b.n	8002c14 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d106      	bne.n	8002baa <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f839 	bl	8002c1c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2202      	movs	r2, #2
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	f000 fc45 	bl	800344c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0208 	bic.w	r2, r2, #8
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6819      	ldr	r1, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e097      	b.n	8002d74 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d106      	bne.n	8002c5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fe fa43 	bl	80010e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2202      	movs	r2, #2
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c74:	f023 0307 	bic.w	r3, r3, #7
 8002c78:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3304      	adds	r3, #4
 8002c82:	4619      	mov	r1, r3
 8002c84:	4610      	mov	r0, r2
 8002c86:	f000 fbe1 	bl	800344c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002cd0:	f023 030c 	bic.w	r3, r3, #12
 8002cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	4313      	orrs	r3, r2
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	011a      	lsls	r2, r3, #4
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	031b      	lsls	r3, r3, #12
 8002d00:	4313      	orrs	r3, r2
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002d0e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002d16:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	4313      	orrs	r3, r2
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d8c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d94:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d9c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002da4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d110      	bne.n	8002dce <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d102      	bne.n	8002db8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002db2:	7b7b      	ldrb	r3, [r7, #13]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d001      	beq.n	8002dbc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e089      	b.n	8002ed0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dcc:	e031      	b.n	8002e32 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d110      	bne.n	8002df6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dd4:	7bbb      	ldrb	r3, [r7, #14]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d102      	bne.n	8002de0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002dda:	7b3b      	ldrb	r3, [r7, #12]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d001      	beq.n	8002de4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e075      	b.n	8002ed0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002df4:	e01d      	b.n	8002e32 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d108      	bne.n	8002e0e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dfc:	7bbb      	ldrb	r3, [r7, #14]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d105      	bne.n	8002e0e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e02:	7b7b      	ldrb	r3, [r7, #13]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d102      	bne.n	8002e0e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e08:	7b3b      	ldrb	r3, [r7, #12]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d001      	beq.n	8002e12 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e05e      	b.n	8002ed0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2202      	movs	r2, #2
 8002e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d010      	beq.n	8002e60 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002e3e:	e01f      	b.n	8002e80 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2201      	movs	r2, #1
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fde9 	bl	8003a20 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0202 	orr.w	r2, r2, #2
 8002e5c:	60da      	str	r2, [r3, #12]
      break;
 8002e5e:	e02e      	b.n	8002ebe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2201      	movs	r2, #1
 8002e66:	2104      	movs	r1, #4
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fdd9 	bl	8003a20 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0204 	orr.w	r2, r2, #4
 8002e7c:	60da      	str	r2, [r3, #12]
      break;
 8002e7e:	e01e      	b.n	8002ebe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2201      	movs	r2, #1
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fdc9 	bl	8003a20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2201      	movs	r2, #1
 8002e94:	2104      	movs	r1, #4
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fdc2 	bl	8003a20 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0202 	orr.w	r2, r2, #2
 8002eaa:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0204 	orr.w	r2, r2, #4
 8002eba:	60da      	str	r2, [r3, #12]
      break;
 8002ebc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d122      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d11b      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0202 	mvn.w	r2, #2
 8002f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fd faf4 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8002f20:	e005      	b.n	8002f2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fa73 	bl	800340e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fa7a 	bl	8003422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d122      	bne.n	8002f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d11b      	bne.n	8002f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0204 	mvn.w	r2, #4
 8002f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fd faca 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8002f74:	e005      	b.n	8002f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa49 	bl	800340e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fa50 	bl	8003422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d122      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d11b      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0208 	mvn.w	r2, #8
 8002fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd faa0 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8002fc8:	e005      	b.n	8002fd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fa1f 	bl	800340e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fa26 	bl	8003422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b10      	cmp	r3, #16
 8002fe8:	d122      	bne.n	8003030 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d11b      	bne.n	8003030 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0210 	mvn.w	r2, #16
 8003000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2208      	movs	r2, #8
 8003006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd fa76 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f9f5 	bl	800340e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f9fc 	bl	8003422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b01      	cmp	r3, #1
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b01      	cmp	r3, #1
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0201 	mvn.w	r2, #1
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f9cf 	bl	80033fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003066:	2b80      	cmp	r3, #128	; 0x80
 8003068:	d10e      	bne.n	8003088 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	2b80      	cmp	r3, #128	; 0x80
 8003076:	d107      	bne.n	8003088 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fdca 	bl	8003c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d10e      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a0:	2b40      	cmp	r3, #64	; 0x40
 80030a2:	d107      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f9c1 	bl	8003436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d10e      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d107      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0220 	mvn.w	r2, #32
 80030d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fd94 	bl	8003c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003102:	2302      	movs	r3, #2
 8003104:	e0ae      	b.n	8003264 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b0c      	cmp	r3, #12
 8003112:	f200 809f 	bhi.w	8003254 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003116:	a201      	add	r2, pc, #4	; (adr r2, 800311c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311c:	08003151 	.word	0x08003151
 8003120:	08003255 	.word	0x08003255
 8003124:	08003255 	.word	0x08003255
 8003128:	08003255 	.word	0x08003255
 800312c:	08003191 	.word	0x08003191
 8003130:	08003255 	.word	0x08003255
 8003134:	08003255 	.word	0x08003255
 8003138:	08003255 	.word	0x08003255
 800313c:	080031d3 	.word	0x080031d3
 8003140:	08003255 	.word	0x08003255
 8003144:	08003255 	.word	0x08003255
 8003148:	08003255 	.word	0x08003255
 800314c:	08003213 	.word	0x08003213
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fa18 	bl	800358c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0208 	orr.w	r2, r2, #8
 800316a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0204 	bic.w	r2, r2, #4
 800317a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6999      	ldr	r1, [r3, #24]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	619a      	str	r2, [r3, #24]
      break;
 800318e:	e064      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fa68 	bl	800366c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6999      	ldr	r1, [r3, #24]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	021a      	lsls	r2, r3, #8
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	619a      	str	r2, [r3, #24]
      break;
 80031d0:	e043      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fabd 	bl	8003758 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0208 	orr.w	r2, r2, #8
 80031ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0204 	bic.w	r2, r2, #4
 80031fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69d9      	ldr	r1, [r3, #28]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	61da      	str	r2, [r3, #28]
      break;
 8003210:	e023      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fb11 	bl	8003840 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800322c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69d9      	ldr	r1, [r3, #28]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	021a      	lsls	r2, r3, #8
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	61da      	str	r2, [r3, #28]
      break;
 8003252:	e002      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	75fb      	strb	r3, [r7, #23]
      break;
 8003258:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003262:	7dfb      	ldrb	r3, [r7, #23]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_TIM_ConfigClockSource+0x1c>
 8003284:	2302      	movs	r3, #2
 8003286:	e0b4      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x186>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c0:	d03e      	beq.n	8003340 <HAL_TIM_ConfigClockSource+0xd4>
 80032c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c6:	f200 8087 	bhi.w	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 80032ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ce:	f000 8086 	beq.w	80033de <HAL_TIM_ConfigClockSource+0x172>
 80032d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d6:	d87f      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 80032d8:	2b70      	cmp	r3, #112	; 0x70
 80032da:	d01a      	beq.n	8003312 <HAL_TIM_ConfigClockSource+0xa6>
 80032dc:	2b70      	cmp	r3, #112	; 0x70
 80032de:	d87b      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 80032e0:	2b60      	cmp	r3, #96	; 0x60
 80032e2:	d050      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0x11a>
 80032e4:	2b60      	cmp	r3, #96	; 0x60
 80032e6:	d877      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 80032e8:	2b50      	cmp	r3, #80	; 0x50
 80032ea:	d03c      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0xfa>
 80032ec:	2b50      	cmp	r3, #80	; 0x50
 80032ee:	d873      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d058      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x13a>
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	d86f      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 80032f8:	2b30      	cmp	r3, #48	; 0x30
 80032fa:	d064      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0x15a>
 80032fc:	2b30      	cmp	r3, #48	; 0x30
 80032fe:	d86b      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003300:	2b20      	cmp	r3, #32
 8003302:	d060      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003304:	2b20      	cmp	r3, #32
 8003306:	d867      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d05c      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0x15a>
 800330c:	2b10      	cmp	r3, #16
 800330e:	d05a      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003310:	e062      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6899      	ldr	r1, [r3, #8]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f000 fb5d 	bl	80039e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003334:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	609a      	str	r2, [r3, #8]
      break;
 800333e:	e04f      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	6899      	ldr	r1, [r3, #8]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f000 fb46 	bl	80039e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003362:	609a      	str	r2, [r3, #8]
      break;
 8003364:	e03c      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6859      	ldr	r1, [r3, #4]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	461a      	mov	r2, r3
 8003374:	f000 faba 	bl	80038ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2150      	movs	r1, #80	; 0x50
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fb13 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 8003384:	e02c      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6859      	ldr	r1, [r3, #4]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	461a      	mov	r2, r3
 8003394:	f000 fad9 	bl	800394a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2160      	movs	r1, #96	; 0x60
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fb03 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 80033a4:	e01c      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6859      	ldr	r1, [r3, #4]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	461a      	mov	r2, r3
 80033b4:	f000 fa9a 	bl	80038ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2140      	movs	r1, #64	; 0x40
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 faf3 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 80033c4:	e00c      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4619      	mov	r1, r3
 80033d0:	4610      	mov	r0, r2
 80033d2:	f000 faea 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 80033d6:	e003      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
      break;
 80033dc:	e000      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a40      	ldr	r2, [pc, #256]	; (8003560 <TIM_Base_SetConfig+0x114>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d013      	beq.n	800348c <TIM_Base_SetConfig+0x40>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346a:	d00f      	beq.n	800348c <TIM_Base_SetConfig+0x40>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a3d      	ldr	r2, [pc, #244]	; (8003564 <TIM_Base_SetConfig+0x118>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00b      	beq.n	800348c <TIM_Base_SetConfig+0x40>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a3c      	ldr	r2, [pc, #240]	; (8003568 <TIM_Base_SetConfig+0x11c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d007      	beq.n	800348c <TIM_Base_SetConfig+0x40>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a3b      	ldr	r2, [pc, #236]	; (800356c <TIM_Base_SetConfig+0x120>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d003      	beq.n	800348c <TIM_Base_SetConfig+0x40>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a3a      	ldr	r2, [pc, #232]	; (8003570 <TIM_Base_SetConfig+0x124>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d108      	bne.n	800349e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a2f      	ldr	r2, [pc, #188]	; (8003560 <TIM_Base_SetConfig+0x114>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d02b      	beq.n	80034fe <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ac:	d027      	beq.n	80034fe <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a2c      	ldr	r2, [pc, #176]	; (8003564 <TIM_Base_SetConfig+0x118>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d023      	beq.n	80034fe <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2b      	ldr	r2, [pc, #172]	; (8003568 <TIM_Base_SetConfig+0x11c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01f      	beq.n	80034fe <TIM_Base_SetConfig+0xb2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a2a      	ldr	r2, [pc, #168]	; (800356c <TIM_Base_SetConfig+0x120>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d01b      	beq.n	80034fe <TIM_Base_SetConfig+0xb2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a29      	ldr	r2, [pc, #164]	; (8003570 <TIM_Base_SetConfig+0x124>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d017      	beq.n	80034fe <TIM_Base_SetConfig+0xb2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a28      	ldr	r2, [pc, #160]	; (8003574 <TIM_Base_SetConfig+0x128>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <TIM_Base_SetConfig+0xb2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a27      	ldr	r2, [pc, #156]	; (8003578 <TIM_Base_SetConfig+0x12c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00f      	beq.n	80034fe <TIM_Base_SetConfig+0xb2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a26      	ldr	r2, [pc, #152]	; (800357c <TIM_Base_SetConfig+0x130>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00b      	beq.n	80034fe <TIM_Base_SetConfig+0xb2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a25      	ldr	r2, [pc, #148]	; (8003580 <TIM_Base_SetConfig+0x134>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <TIM_Base_SetConfig+0xb2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a24      	ldr	r2, [pc, #144]	; (8003584 <TIM_Base_SetConfig+0x138>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d003      	beq.n	80034fe <TIM_Base_SetConfig+0xb2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a23      	ldr	r2, [pc, #140]	; (8003588 <TIM_Base_SetConfig+0x13c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d108      	bne.n	8003510 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <TIM_Base_SetConfig+0x114>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d003      	beq.n	8003544 <TIM_Base_SetConfig+0xf8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a0c      	ldr	r2, [pc, #48]	; (8003570 <TIM_Base_SetConfig+0x124>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d103      	bne.n	800354c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	615a      	str	r2, [r3, #20]
}
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40010000 	.word	0x40010000
 8003564:	40000400 	.word	0x40000400
 8003568:	40000800 	.word	0x40000800
 800356c:	40000c00 	.word	0x40000c00
 8003570:	40010400 	.word	0x40010400
 8003574:	40014000 	.word	0x40014000
 8003578:	40014400 	.word	0x40014400
 800357c:	40014800 	.word	0x40014800
 8003580:	40001800 	.word	0x40001800
 8003584:	40001c00 	.word	0x40001c00
 8003588:	40002000 	.word	0x40002000

0800358c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f023 0201 	bic.w	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0303 	bic.w	r3, r3, #3
 80035c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f023 0302 	bic.w	r3, r3, #2
 80035d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a20      	ldr	r2, [pc, #128]	; (8003664 <TIM_OC1_SetConfig+0xd8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_OC1_SetConfig+0x64>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a1f      	ldr	r2, [pc, #124]	; (8003668 <TIM_OC1_SetConfig+0xdc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d10c      	bne.n	800360a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f023 0308 	bic.w	r3, r3, #8
 80035f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f023 0304 	bic.w	r3, r3, #4
 8003608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a15      	ldr	r2, [pc, #84]	; (8003664 <TIM_OC1_SetConfig+0xd8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_OC1_SetConfig+0x8e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a14      	ldr	r2, [pc, #80]	; (8003668 <TIM_OC1_SetConfig+0xdc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d111      	bne.n	800363e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40010000 	.word	0x40010000
 8003668:	40010400 	.word	0x40010400

0800366c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f023 0210 	bic.w	r2, r3, #16
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f023 0320 	bic.w	r3, r3, #32
 80036b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a22      	ldr	r2, [pc, #136]	; (8003750 <TIM_OC2_SetConfig+0xe4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_OC2_SetConfig+0x68>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a21      	ldr	r2, [pc, #132]	; (8003754 <TIM_OC2_SetConfig+0xe8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d10d      	bne.n	80036f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a17      	ldr	r2, [pc, #92]	; (8003750 <TIM_OC2_SetConfig+0xe4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d003      	beq.n	8003700 <TIM_OC2_SetConfig+0x94>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a16      	ldr	r2, [pc, #88]	; (8003754 <TIM_OC2_SetConfig+0xe8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d113      	bne.n	8003728 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003706:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800370e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	621a      	str	r2, [r3, #32]
}
 8003742:	bf00      	nop
 8003744:	371c      	adds	r7, #28
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40010000 	.word	0x40010000
 8003754:	40010400 	.word	0x40010400

08003758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0303 	bic.w	r3, r3, #3
 800378e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a21      	ldr	r2, [pc, #132]	; (8003838 <TIM_OC3_SetConfig+0xe0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d003      	beq.n	80037be <TIM_OC3_SetConfig+0x66>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a20      	ldr	r2, [pc, #128]	; (800383c <TIM_OC3_SetConfig+0xe4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d10d      	bne.n	80037da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a16      	ldr	r2, [pc, #88]	; (8003838 <TIM_OC3_SetConfig+0xe0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d003      	beq.n	80037ea <TIM_OC3_SetConfig+0x92>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a15      	ldr	r2, [pc, #84]	; (800383c <TIM_OC3_SetConfig+0xe4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d113      	bne.n	8003812 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	621a      	str	r2, [r3, #32]
}
 800382c:	bf00      	nop
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	40010000 	.word	0x40010000
 800383c:	40010400 	.word	0x40010400

08003840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800386e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800388a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	031b      	lsls	r3, r3, #12
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a12      	ldr	r2, [pc, #72]	; (80038e4 <TIM_OC4_SetConfig+0xa4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d003      	beq.n	80038a8 <TIM_OC4_SetConfig+0x68>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a11      	ldr	r2, [pc, #68]	; (80038e8 <TIM_OC4_SetConfig+0xa8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d109      	bne.n	80038bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	019b      	lsls	r3, r3, #6
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	621a      	str	r2, [r3, #32]
}
 80038d6:	bf00      	nop
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40010000 	.word	0x40010000
 80038e8:	40010400 	.word	0x40010400

080038ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f023 0201 	bic.w	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f023 030a 	bic.w	r3, r3, #10
 8003928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	621a      	str	r2, [r3, #32]
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800394a:	b480      	push	{r7}
 800394c:	b087      	sub	sp, #28
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0210 	bic.w	r2, r3, #16
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003974:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	031b      	lsls	r3, r3, #12
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003986:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	621a      	str	r2, [r3, #32]
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f043 0307 	orr.w	r3, r3, #7
 80039cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	609a      	str	r2, [r3, #8]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	021a      	lsls	r2, r3, #8
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	609a      	str	r2, [r3, #8]
}
 8003a14:	bf00      	nop
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2201      	movs	r2, #1
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1a      	ldr	r2, [r3, #32]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	401a      	ands	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a1a      	ldr	r2, [r3, #32]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	621a      	str	r2, [r3, #32]
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e05a      	b.n	8003b3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a21      	ldr	r2, [pc, #132]	; (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d022      	beq.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad0:	d01d      	beq.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1d      	ldr	r2, [pc, #116]	; (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d018      	beq.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a1b      	ldr	r2, [pc, #108]	; (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d013      	beq.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1a      	ldr	r2, [pc, #104]	; (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00e      	beq.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d009      	beq.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d004      	beq.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a15      	ldr	r2, [pc, #84]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d10c      	bne.n	8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40010000 	.word	0x40010000
 8003b4c:	40000400 	.word	0x40000400
 8003b50:	40000800 	.word	0x40000800
 8003b54:	40000c00 	.word	0x40000c00
 8003b58:	40010400 	.word	0x40010400
 8003b5c:	40014000 	.word	0x40014000
 8003b60:	40001800 	.word	0x40001800

08003b64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e03d      	b.n	8003bfc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e03f      	b.n	8003cc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fd fc16 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2224      	movs	r2, #36	; 0x24
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f829 	bl	8003ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd0:	b0c0      	sub	sp, #256	; 0x100
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce8:	68d9      	ldr	r1, [r3, #12]
 8003cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	ea40 0301 	orr.w	r3, r0, r1
 8003cf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d24:	f021 010c 	bic.w	r1, r1, #12
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d32:	430b      	orrs	r3, r1
 8003d34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d46:	6999      	ldr	r1, [r3, #24]
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	ea40 0301 	orr.w	r3, r0, r1
 8003d52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b8f      	ldr	r3, [pc, #572]	; (8003f98 <UART_SetConfig+0x2cc>)
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d005      	beq.n	8003d6c <UART_SetConfig+0xa0>
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	4b8d      	ldr	r3, [pc, #564]	; (8003f9c <UART_SetConfig+0x2d0>)
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d104      	bne.n	8003d76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d6c:	f7fe f8be 	bl	8001eec <HAL_RCC_GetPCLK2Freq>
 8003d70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d74:	e003      	b.n	8003d7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d76:	f7fe f8a5 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 8003d7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d88:	f040 810c 	bne.w	8003fa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d90:	2200      	movs	r2, #0
 8003d92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d9e:	4622      	mov	r2, r4
 8003da0:	462b      	mov	r3, r5
 8003da2:	1891      	adds	r1, r2, r2
 8003da4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003da6:	415b      	adcs	r3, r3
 8003da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003daa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dae:	4621      	mov	r1, r4
 8003db0:	eb12 0801 	adds.w	r8, r2, r1
 8003db4:	4629      	mov	r1, r5
 8003db6:	eb43 0901 	adc.w	r9, r3, r1
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dce:	4690      	mov	r8, r2
 8003dd0:	4699      	mov	r9, r3
 8003dd2:	4623      	mov	r3, r4
 8003dd4:	eb18 0303 	adds.w	r3, r8, r3
 8003dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ddc:	462b      	mov	r3, r5
 8003dde:	eb49 0303 	adc.w	r3, r9, r3
 8003de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003df2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003df6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	18db      	adds	r3, r3, r3
 8003dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8003e00:	4613      	mov	r3, r2
 8003e02:	eb42 0303 	adc.w	r3, r2, r3
 8003e06:	657b      	str	r3, [r7, #84]	; 0x54
 8003e08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e10:	f7fc f9f8 	bl	8000204 <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4b61      	ldr	r3, [pc, #388]	; (8003fa0 <UART_SetConfig+0x2d4>)
 8003e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	011c      	lsls	r4, r3, #4
 8003e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e34:	4642      	mov	r2, r8
 8003e36:	464b      	mov	r3, r9
 8003e38:	1891      	adds	r1, r2, r2
 8003e3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e3c:	415b      	adcs	r3, r3
 8003e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e44:	4641      	mov	r1, r8
 8003e46:	eb12 0a01 	adds.w	sl, r2, r1
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	eb43 0b01 	adc.w	fp, r3, r1
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e64:	4692      	mov	sl, r2
 8003e66:	469b      	mov	fp, r3
 8003e68:	4643      	mov	r3, r8
 8003e6a:	eb1a 0303 	adds.w	r3, sl, r3
 8003e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e72:	464b      	mov	r3, r9
 8003e74:	eb4b 0303 	adc.w	r3, fp, r3
 8003e78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e90:	460b      	mov	r3, r1
 8003e92:	18db      	adds	r3, r3, r3
 8003e94:	643b      	str	r3, [r7, #64]	; 0x40
 8003e96:	4613      	mov	r3, r2
 8003e98:	eb42 0303 	adc.w	r3, r2, r3
 8003e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ea2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ea6:	f7fc f9ad 	bl	8000204 <__aeabi_uldivmod>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4611      	mov	r1, r2
 8003eb0:	4b3b      	ldr	r3, [pc, #236]	; (8003fa0 <UART_SetConfig+0x2d4>)
 8003eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	2264      	movs	r2, #100	; 0x64
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	1acb      	subs	r3, r1, r3
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ec6:	4b36      	ldr	r3, [pc, #216]	; (8003fa0 <UART_SetConfig+0x2d4>)
 8003ec8:	fba3 2302 	umull	r2, r3, r3, r2
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ed4:	441c      	add	r4, r3
 8003ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ee0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ee4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ee8:	4642      	mov	r2, r8
 8003eea:	464b      	mov	r3, r9
 8003eec:	1891      	adds	r1, r2, r2
 8003eee:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ef0:	415b      	adcs	r3, r3
 8003ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ef4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ef8:	4641      	mov	r1, r8
 8003efa:	1851      	adds	r1, r2, r1
 8003efc:	6339      	str	r1, [r7, #48]	; 0x30
 8003efe:	4649      	mov	r1, r9
 8003f00:	414b      	adcs	r3, r1
 8003f02:	637b      	str	r3, [r7, #52]	; 0x34
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f10:	4659      	mov	r1, fp
 8003f12:	00cb      	lsls	r3, r1, #3
 8003f14:	4651      	mov	r1, sl
 8003f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f1a:	4651      	mov	r1, sl
 8003f1c:	00ca      	lsls	r2, r1, #3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	4619      	mov	r1, r3
 8003f22:	4603      	mov	r3, r0
 8003f24:	4642      	mov	r2, r8
 8003f26:	189b      	adds	r3, r3, r2
 8003f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f2c:	464b      	mov	r3, r9
 8003f2e:	460a      	mov	r2, r1
 8003f30:	eb42 0303 	adc.w	r3, r2, r3
 8003f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	18db      	adds	r3, r3, r3
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f52:	4613      	mov	r3, r2
 8003f54:	eb42 0303 	adc.w	r3, r2, r3
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f62:	f7fc f94f 	bl	8000204 <__aeabi_uldivmod>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <UART_SetConfig+0x2d4>)
 8003f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	2164      	movs	r1, #100	; 0x64
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	3332      	adds	r3, #50	; 0x32
 8003f7e:	4a08      	ldr	r2, [pc, #32]	; (8003fa0 <UART_SetConfig+0x2d4>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	f003 0207 	and.w	r2, r3, #7
 8003f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4422      	add	r2, r4
 8003f92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f94:	e105      	b.n	80041a2 <UART_SetConfig+0x4d6>
 8003f96:	bf00      	nop
 8003f98:	40011000 	.word	0x40011000
 8003f9c:	40011400 	.word	0x40011400
 8003fa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003fb6:	4642      	mov	r2, r8
 8003fb8:	464b      	mov	r3, r9
 8003fba:	1891      	adds	r1, r2, r2
 8003fbc:	6239      	str	r1, [r7, #32]
 8003fbe:	415b      	adcs	r3, r3
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fc6:	4641      	mov	r1, r8
 8003fc8:	1854      	adds	r4, r2, r1
 8003fca:	4649      	mov	r1, r9
 8003fcc:	eb43 0501 	adc.w	r5, r3, r1
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	00eb      	lsls	r3, r5, #3
 8003fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fde:	00e2      	lsls	r2, r4, #3
 8003fe0:	4614      	mov	r4, r2
 8003fe2:	461d      	mov	r5, r3
 8003fe4:	4643      	mov	r3, r8
 8003fe6:	18e3      	adds	r3, r4, r3
 8003fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fec:	464b      	mov	r3, r9
 8003fee:	eb45 0303 	adc.w	r3, r5, r3
 8003ff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004002:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004012:	4629      	mov	r1, r5
 8004014:	008b      	lsls	r3, r1, #2
 8004016:	4621      	mov	r1, r4
 8004018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800401c:	4621      	mov	r1, r4
 800401e:	008a      	lsls	r2, r1, #2
 8004020:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004024:	f7fc f8ee 	bl	8000204 <__aeabi_uldivmod>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4b60      	ldr	r3, [pc, #384]	; (80041b0 <UART_SetConfig+0x4e4>)
 800402e:	fba3 2302 	umull	r2, r3, r3, r2
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	011c      	lsls	r4, r3, #4
 8004036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800403a:	2200      	movs	r2, #0
 800403c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004040:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004044:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004048:	4642      	mov	r2, r8
 800404a:	464b      	mov	r3, r9
 800404c:	1891      	adds	r1, r2, r2
 800404e:	61b9      	str	r1, [r7, #24]
 8004050:	415b      	adcs	r3, r3
 8004052:	61fb      	str	r3, [r7, #28]
 8004054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004058:	4641      	mov	r1, r8
 800405a:	1851      	adds	r1, r2, r1
 800405c:	6139      	str	r1, [r7, #16]
 800405e:	4649      	mov	r1, r9
 8004060:	414b      	adcs	r3, r1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004070:	4659      	mov	r1, fp
 8004072:	00cb      	lsls	r3, r1, #3
 8004074:	4651      	mov	r1, sl
 8004076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800407a:	4651      	mov	r1, sl
 800407c:	00ca      	lsls	r2, r1, #3
 800407e:	4610      	mov	r0, r2
 8004080:	4619      	mov	r1, r3
 8004082:	4603      	mov	r3, r0
 8004084:	4642      	mov	r2, r8
 8004086:	189b      	adds	r3, r3, r2
 8004088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800408c:	464b      	mov	r3, r9
 800408e:	460a      	mov	r2, r1
 8004090:	eb42 0303 	adc.w	r3, r2, r3
 8004094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80040a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040b0:	4649      	mov	r1, r9
 80040b2:	008b      	lsls	r3, r1, #2
 80040b4:	4641      	mov	r1, r8
 80040b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ba:	4641      	mov	r1, r8
 80040bc:	008a      	lsls	r2, r1, #2
 80040be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040c2:	f7fc f89f 	bl	8000204 <__aeabi_uldivmod>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4b39      	ldr	r3, [pc, #228]	; (80041b0 <UART_SetConfig+0x4e4>)
 80040cc:	fba3 1302 	umull	r1, r3, r3, r2
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	2164      	movs	r1, #100	; 0x64
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	3332      	adds	r3, #50	; 0x32
 80040de:	4a34      	ldr	r2, [pc, #208]	; (80041b0 <UART_SetConfig+0x4e4>)
 80040e0:	fba2 2303 	umull	r2, r3, r2, r3
 80040e4:	095b      	lsrs	r3, r3, #5
 80040e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ea:	441c      	add	r4, r3
 80040ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040f0:	2200      	movs	r2, #0
 80040f2:	673b      	str	r3, [r7, #112]	; 0x70
 80040f4:	677a      	str	r2, [r7, #116]	; 0x74
 80040f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040fa:	4642      	mov	r2, r8
 80040fc:	464b      	mov	r3, r9
 80040fe:	1891      	adds	r1, r2, r2
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	415b      	adcs	r3, r3
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800410a:	4641      	mov	r1, r8
 800410c:	1851      	adds	r1, r2, r1
 800410e:	6039      	str	r1, [r7, #0]
 8004110:	4649      	mov	r1, r9
 8004112:	414b      	adcs	r3, r1
 8004114:	607b      	str	r3, [r7, #4]
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004122:	4659      	mov	r1, fp
 8004124:	00cb      	lsls	r3, r1, #3
 8004126:	4651      	mov	r1, sl
 8004128:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800412c:	4651      	mov	r1, sl
 800412e:	00ca      	lsls	r2, r1, #3
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	4603      	mov	r3, r0
 8004136:	4642      	mov	r2, r8
 8004138:	189b      	adds	r3, r3, r2
 800413a:	66bb      	str	r3, [r7, #104]	; 0x68
 800413c:	464b      	mov	r3, r9
 800413e:	460a      	mov	r2, r1
 8004140:	eb42 0303 	adc.w	r3, r2, r3
 8004144:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	663b      	str	r3, [r7, #96]	; 0x60
 8004150:	667a      	str	r2, [r7, #100]	; 0x64
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800415e:	4649      	mov	r1, r9
 8004160:	008b      	lsls	r3, r1, #2
 8004162:	4641      	mov	r1, r8
 8004164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004168:	4641      	mov	r1, r8
 800416a:	008a      	lsls	r2, r1, #2
 800416c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004170:	f7fc f848 	bl	8000204 <__aeabi_uldivmod>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <UART_SetConfig+0x4e4>)
 800417a:	fba3 1302 	umull	r1, r3, r3, r2
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	2164      	movs	r1, #100	; 0x64
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	3332      	adds	r3, #50	; 0x32
 800418c:	4a08      	ldr	r2, [pc, #32]	; (80041b0 <UART_SetConfig+0x4e4>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	f003 020f 	and.w	r2, r3, #15
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4422      	add	r2, r4
 80041a0:	609a      	str	r2, [r3, #8]
}
 80041a2:	bf00      	nop
 80041a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041a8:	46bd      	mov	sp, r7
 80041aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ae:	bf00      	nop
 80041b0:	51eb851f 	.word	0x51eb851f

080041b4 <__libc_init_array>:
 80041b4:	b570      	push	{r4, r5, r6, lr}
 80041b6:	4d0d      	ldr	r5, [pc, #52]	; (80041ec <__libc_init_array+0x38>)
 80041b8:	4c0d      	ldr	r4, [pc, #52]	; (80041f0 <__libc_init_array+0x3c>)
 80041ba:	1b64      	subs	r4, r4, r5
 80041bc:	10a4      	asrs	r4, r4, #2
 80041be:	2600      	movs	r6, #0
 80041c0:	42a6      	cmp	r6, r4
 80041c2:	d109      	bne.n	80041d8 <__libc_init_array+0x24>
 80041c4:	4d0b      	ldr	r5, [pc, #44]	; (80041f4 <__libc_init_array+0x40>)
 80041c6:	4c0c      	ldr	r4, [pc, #48]	; (80041f8 <__libc_init_array+0x44>)
 80041c8:	f000 f820 	bl	800420c <_init>
 80041cc:	1b64      	subs	r4, r4, r5
 80041ce:	10a4      	asrs	r4, r4, #2
 80041d0:	2600      	movs	r6, #0
 80041d2:	42a6      	cmp	r6, r4
 80041d4:	d105      	bne.n	80041e2 <__libc_init_array+0x2e>
 80041d6:	bd70      	pop	{r4, r5, r6, pc}
 80041d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041dc:	4798      	blx	r3
 80041de:	3601      	adds	r6, #1
 80041e0:	e7ee      	b.n	80041c0 <__libc_init_array+0xc>
 80041e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e6:	4798      	blx	r3
 80041e8:	3601      	adds	r6, #1
 80041ea:	e7f2      	b.n	80041d2 <__libc_init_array+0x1e>
 80041ec:	08004244 	.word	0x08004244
 80041f0:	08004244 	.word	0x08004244
 80041f4:	08004244 	.word	0x08004244
 80041f8:	08004248 	.word	0x08004248

080041fc <memset>:
 80041fc:	4402      	add	r2, r0
 80041fe:	4603      	mov	r3, r0
 8004200:	4293      	cmp	r3, r2
 8004202:	d100      	bne.n	8004206 <memset+0xa>
 8004204:	4770      	bx	lr
 8004206:	f803 1b01 	strb.w	r1, [r3], #1
 800420a:	e7f9      	b.n	8004200 <memset+0x4>

0800420c <_init>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	bf00      	nop
 8004210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004212:	bc08      	pop	{r3}
 8004214:	469e      	mov	lr, r3
 8004216:	4770      	bx	lr

08004218 <_fini>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	bf00      	nop
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr
